#include "..\..\Public_H\DePublic.h"
#ifdef De_Compiler_miscellaneous_Arithmetic
/*===============================Include File================================================*/
      
      #include "..\..\APP\config.h"
      #include "stdlib.h"
/*==============================Function Data==========================================*/
	
	typedef struct 
	{	/*	函数功能：获取ECC校验，DAT的长度必须是256个
			入口参数：输入参数			dat					校验的数据
					  输出参数			ecc_code			校验所得到的结果			
			返回值	无
	
		*/
		void (* Calculate_ecc) (const uint8 *dat, uint8 *ecc_code);
		/*	函数功能：恢复数据		当中间有三位出现问题时，能将数据恢复。
			入口参数：read_ecc		实际的ECC校验
					  calc_ecc		按照实际数据计算的目前的校验				
					  dat			被恢复的数据
			返回值	>0	恢复成功	==0恢复失败
		*/
		
		uint16 (* Correct_data) (uint8 *dat, uint8 *read_ecc, uint8 *calc_ecc);	
	}st_Fun_Ecc;  							//ECC校验函数
	
	typedef struct
	{	/*	函数功能：CRC-16校验
			入口参数：s		需要校验的数据
					  len	校验的长度				
					  Value	校验传递的初始值
			返回值	CRC-16的校验值
		
		*/
		uint16 (*Crc)(uint8 *s,uint16 len,uint16 Value);
	}st_Fun_Crc;	  					//CRC校验
	typedef struct
	{	/*	函数功能：CRC-16校验
			入口参数：s		需要校验的数据
					  len	校验的长度				
					  Value	校验传递的初始值
			返回值	CRC-16的校验值
		
		*/
		uint16 (*Crc1021)(uint8 *s,uint16 len,uint16 Value);
	}st_Fun_Crc1021;	

	typedef struct
	{	uint8 (*CheckSum)(uint8 *Buf,uint16 SizeofBuf);
	}st_Fun_CheckSum;
	typedef struct
	{	uint8 (*CheckAdd)(uint8 *Buf,uint16 SizeofBuf,uint8 Value);


	}st_Fun_CheckAdd;
	
	
	typedef struct
	{	st_Fun_Ecc	*ptst_Fun_Ecc;			//ECC校验函数
		st_Fun_Crc	*ptst_Fun_Crc;			//CRC校验函数
		st_Fun_CheckSum	*ptst_Fun_CheckSum;	//异或和检验函数
		st_Fun_CheckAdd	*ptst_Fun_CheckAdd;
		st_Fun_Crc1021	*ptst_Fun_Crc1021;
	}st_Fun_Arithmetic;				   //校验函数
/*====================================函数定义============================================================*/
	#ifdef 	De_Arithmetic_Compiler

		static void nand_trans_result(uint8 reg2, uint8 reg3,uint8 *ecc_code);
		static void nand_calculate_ecc (const uint8 *dat, uint8 *ecc_code);
		static uint16 nand_correct_data (uint8 *dat, uint8 *read_ecc, uint8 *calc_ecc);
		static uint16 Crc(uint8 *s,uint16 len,uint16 Value);
		static uint8 CheckSum(uint8 *Buf,uint16 SizeofBuf);
		static uint8 CheckAdd(uint8 *Buf,uint16 SizeofBuf,uint8 Value);
		static uint16 Crc1021(uint8 *s,uint16 len,uint16 Value);

/*======================================常数定义======================================================*/
		const st_Fun_Ecc	CN_st_Fun_Ecc={nand_calculate_ecc,nand_correct_data};
		const st_Fun_Crc	CN_st_Fun_Crc={Crc}; 
		const st_Fun_CheckSum	CN_st_Fun_CheckSum={CheckSum};
		const st_Fun_CheckAdd	CN_st_Fun_CheckAdd={CheckAdd};
		const st_Fun_Crc1021	CN_st_Fun_Crc1021={Crc1021};		
		const st_Fun_Arithmetic	CN_st_Fun_Arithmetic={(st_Fun_Ecc	*)&CN_st_Fun_Ecc,(st_Fun_Crc	*)&CN_st_Fun_Crc,(st_Fun_CheckSum	*)&CN_st_Fun_CheckSum,(st_Fun_CheckAdd	*)&CN_st_Fun_CheckAdd,(st_Fun_Crc1021	*)&CN_st_Fun_Crc1021};
		static const uint8 nand_ecc_precalc_table[] =
		{
			0x00, 0x55, 0x56, 0x03, 0x59, 0x0c, 0x0f, 0x5a, 0x5a, 0x0f, 0x0c, 0x59, 0x03, 0x56, 0x55, 0x00,
			0x65, 0x30, 0x33, 0x66, 0x3c, 0x69, 0x6a, 0x3f, 0x3f, 0x6a, 0x69, 0x3c, 0x66, 0x33, 0x30, 0x65,
			0x66, 0x33, 0x30, 0x65, 0x3f, 0x6a, 0x69, 0x3c, 0x3c, 0x69, 0x6a, 0x3f, 0x65, 0x30, 0x33, 0x66,
			0x03, 0x56, 0x55, 0x00, 0x5a, 0x0f, 0x0c, 0x59, 0x59, 0x0c, 0x0f, 0x5a, 0x00, 0x55, 0x56, 0x03,
			0x69, 0x3c, 0x3f, 0x6a, 0x30, 0x65, 0x66, 0x33, 0x33, 0x66, 0x65, 0x30, 0x6a, 0x3f, 0x3c, 0x69,
			0x0c, 0x59, 0x5a, 0x0f, 0x55, 0x00, 0x03, 0x56, 0x56, 0x03, 0x00, 0x55, 0x0f, 0x5a, 0x59, 0x0c,
			0x0f, 0x5a, 0x59, 0x0c, 0x56, 0x03, 0x00, 0x55, 0x55, 0x00, 0x03, 0x56, 0x0c, 0x59, 0x5a, 0x0f,
			0x6a, 0x3f, 0x3c, 0x69, 0x33, 0x66, 0x65, 0x30, 0x30, 0x65, 0x66, 0x33, 0x69, 0x3c, 0x3f, 0x6a,
			0x6a, 0x3f, 0x3c, 0x69, 0x33, 0x66, 0x65, 0x30, 0x30, 0x65, 0x66, 0x33, 0x69, 0x3c, 0x3f, 0x6a,
			0x0f, 0x5a, 0x59, 0x0c, 0x56, 0x03, 0x00, 0x55, 0x55, 0x00, 0x03, 0x56, 0x0c, 0x59, 0x5a, 0x0f,
			0x0c, 0x59, 0x5a, 0x0f, 0x55, 0x00, 0x03, 0x56, 0x56, 0x03, 0x00, 0x55, 0x0f, 0x5a, 0x59, 0x0c,
			0x69, 0x3c, 0x3f, 0x6a, 0x30, 0x65, 0x66, 0x33, 0x33, 0x66, 0x65, 0x30, 0x6a, 0x3f, 0x3c, 0x69,
			0x03, 0x56, 0x55, 0x00, 0x5a, 0x0f, 0x0c, 0x59, 0x59, 0x0c, 0x0f, 0x5a, 0x00, 0x55, 0x56, 0x03,
			0x66, 0x33, 0x30, 0x65, 0x3f, 0x6a, 0x69, 0x3c, 0x3c, 0x69, 0x6a, 0x3f, 0x65, 0x30, 0x33, 0x66,
			0x65, 0x30, 0x33, 0x66, 0x3c, 0x69, 0x6a, 0x3f, 0x3f, 0x6a, 0x69, 0x3c, 0x66, 0x33, 0x30, 0x65,
			0x00, 0x55, 0x56, 0x03, 0x59, 0x0c, 0x0f, 0x5a, 0x5a, 0x0f, 0x0c, 0x59, 0x03, 0x56, 0x55, 0x00
		};
	#else
		extern const st_Fun_Arithmetic	CN_st_Fun_Arithmetic;
	#endif

#endif
