<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\GPRS_OS1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\GPRS_OS1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jan 10 22:46:02 2019
<BR><P>
<H3>Maximum Stack Usage =       1104 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SeePar &rArr; GetCentrIP
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9]">Reset_Handler</a>
 <LI><a href="#[3ef]">__user_initial_stackheap</a>
 <LI><a href="#[3f6]">IRQ_Handler</a>
 <LI><a href="#[14]">Timer0_Handler</a>
 <LI><a href="#[15]">Uart0_Handler</a>
 <LI><a href="#[16]">Uart1_Handler</a>
 <LI><a href="#[17]">Uart2_Handler</a>
 <LI><a href="#[18]">Uart3_Handler</a>
 <LI><a href="#[19]">CAN_Handler</a>
 <LI><a href="#[12]">Timer1_Handler</a>
 <LI><a href="#[13]">Timer2_Handler</a>
 <LI><a href="#[11]">EINT2_Handler</a>
 <LI><a href="#[b]">SoftwareInterrupt</a>
 <LI><a href="#[2e]">OSIntCtxSw</a>
 <LI><a href="#[2f]">__OSStartHighRdy</a>
 <LI><a href="#[a]">Undef_Handler</a>
 <LI><a href="#[c]">PAbt_Handler</a>
 <LI><a href="#[d]">DAbt_Handler</a>
 <LI><a href="#[e]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Undef_Handler</a><BR>
 <LI><a href="#[c]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PAbt_Handler</a><BR>
 <LI><a href="#[d]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DAbt_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f6]">AccOper</a> from accoper.o(.text) referenced from accoper.o(.constdata)
 <LI><a href="#[1b2]">AccessAear</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[1d8]">Activation</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1af]">AddSpace</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[1c9]">AgreeData</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[128]">AgreePhone1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[39]">Algorism2Asc</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[62]">Algorism2BCD</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[1f0]">AmendForm</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1ce]">AmendMenum</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1c8]">Answer</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[38]">Asc2Algorism</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[36]">Asc2Bcd</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[3e]">Asc2Float</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[3c]">Asc2Hex</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[3a]">Asc2HexBuf</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[63]">BCD2Algorism</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[66]">Back</a> from _date.o(.text) referenced from _date.o(.constdata)
 <LI><a href="#[37]">Bcd2Asc</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[3f]">Bcd2Hex</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[58]">Bit72Bit8</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[19]">CAN_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[22]">CE_High</a> from _spiflash512.o(.text) referenced from _spiflash512.o(.text)
 <LI><a href="#[23]">CE_Low</a> from _spiflash512.o(.text) referenced from _spiflash512.o(.text)
 <LI><a href="#[1d2]">CallAnswer</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[5f]">Char2IP</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[214]">ChargeLoadDev</a> from openandclose.o(.text) referenced from openandclose.o(.constdata)
 <LI><a href="#[213]">ChargeLogin</a> from openandclose.o(.text) referenced from openandclose.o(.constdata)
 <LI><a href="#[34]">CheckAdd</a> from _arithmetic.o(.text) referenced from _arithmetic.o(.constdata)
 <LI><a href="#[33]">CheckSum</a> from _arithmetic.o(.text) referenced from _arithmetic.o(.constdata)
 <LI><a href="#[114]">CleanProperty</a> from _downfile.o(.text) referenced from _downfile.o(.constdata)
 <LI><a href="#[1ac]">ClearState</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[212]">ClearTimer</a> from openandclose.o(.text) referenced from openandclose.o(.constdata)
 <LI><a href="#[73]">Close</a> from _spi.o(.text) referenced 24 times from _spi.o(.constdata)
 <LI><a href="#[5]">Close</a> from _can.o(.text) referenced 2 times from _can.o(.data)
 <LI><a href="#[b1]">Close1</a> from less.o(.text) referenced 2 times from less.o(.constdata)
 <LI><a href="#[210]">CloseCall</a> from messageandphone.o(.text) referenced from messageandphone.o(.constdata)
 <LI><a href="#[129]">CloseCall1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[1fa]">CloseGprs</a> from accoper.o(.text) referenced 2 times from accoper.o(.constdata)
 <LI><a href="#[1f9]">CloseGps</a> from accoper.o(.text) referenced 2 times from accoper.o(.constdata)
 <LI><a href="#[123]">CloseIP1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[122]">CloseMessage1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[124]">ClosePhone1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[121]">CloseSys1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[45]">ClsArray</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[47]">CompareBuf</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[48]">CompareVa</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[1d7]">ConfigCentrSever</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1d6]">ConfineCall</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1d5]">Contrl</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[32]">Crc</a> from _arithmetic.o(.text) referenced from _arithmetic.o(.constdata)
 <LI><a href="#[35]">Crc1021</a> from _arithmetic.o(.text) referenced from _arithmetic.o(.constdata)
 <LI><a href="#[19c]">CreatBad</a> from _flash.o(.text) referenced from _flash.o(.constdata)
 <LI><a href="#[fd]">CreateBin1</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[10d]">CreateFile</a> from _downfile.o(.text) referenced from _downfile.o(.constdata)
 <LI><a href="#[fe]">CreateRecoder1</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[d]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[132]">DNSRIP1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[1b3]">DelAear</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[1e8]">DelPolygon</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1e6]">DelRectangle</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1ea]">DelRoadMap</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1e4]">DelRound</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[13a]">DisEnable</a> from timer.o(.text) referenced from timer.o(.constdata)
 <LI><a href="#[26]">DownLoaderOver</a> from appgprs.o(.text) referenced from appgprs.o(.text)
 <LI><a href="#[1ec]">Driver</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[11]">EINT2_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[190]">Ease</a> from _nandflash512.o(.text) referenced 3 times from _nandflash512.o(.constdata)
 <LI><a href="#[1a0]">EaseFlash</a> from _flash.o(.text) referenced from _flash.o(.constdata)
 <LI><a href="#[13d]">EditPro</a> from timer.o(.text) referenced from timer.o(.constdata)
 <LI><a href="#[139]">Enable</a> from timer.o(.text) referenced from timer.o(.constdata)
 <LI><a href="#[72]">End</a> from _spi.o(.text) referenced from _spi.o(.constdata)
 <LI><a href="#[57]">ExpPdu</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[170]">Explain</a> from tz_agreen.o(.text) referenced 2 times from tz_agreen.o(.constdata)
 <LI><a href="#[16b]">Explain_AmendForm</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[14c]">Explain_AmendMenum</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[149]">Explain_Answer</a> from tz_agreen.o(.text) referenced 2 times from tz_agreen.o(.constdata)
 <LI><a href="#[150]">Explain_CallAnswer</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[155]">Explain_ConfigCentrSever</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[154]">Explain_ConfineCall</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[153]">Explain_Contrl</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[163]">Explain_DelPolygon</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[161]">Explain_DelRectangle</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[165]">Explain_DelRoadMap</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[15f]">Explain_DelRound</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[167]">Explain_Driver</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[171]">Explain_GetSeverComPar</a> from tz_send.o(.text) referenced 5 times from tz_send.o(.constdata)
 <LI><a href="#[16a]">Explain_HandAttemper</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[169]">Explain_HandTxt</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[157]">Explain_JpgIng</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[14d]">Explain_LoaderTxt</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[14e]">Explain_LoaderTxtMenum</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[156]">Explain_LookJpg</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[15c]">Explain_LookLog</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[152]">Explain_LookPar</a> from tz_agreen.o(.text) referenced 2 times from tz_agreen.o(.constdata)
 <LI><a href="#[173]">Explain_Menum</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[168]">Explain_Navigation</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[17b]">Explain_NoSem</a> from tz_send.o(.text) referenced 2 times from tz_send.o(.constdata)
 <LI><a href="#[17d]">Explain_OutRoadMap</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[182]">Explain_OverFromErro</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[183]">Explain_PriceData</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[166]">Explain_Reduce</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[14b]">Explain_SetPar</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[14f]">Explain_SetPhone</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[162]">Explain_SetPolygon</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[160]">Explain_SetRectangle</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[164]">Explain_SetRoadMap</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[15e]">Explain_SetRound</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[158]">Explain_SetVidType</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[15d]">Explain_SetWaringTerm</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[159]">Explain_TabelList</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[14a]">Explain_Track</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[174]">Explain_TxtMenum</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[16f]">Explain_UpLoaderCan</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[17f]">Explain_UpLoaderDriver</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[16c]">Explain_UpLoaderForm</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[16e]">Explain_UpLoaderFormErro</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[16d]">Explain_UpLoaderFormSuc</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[181]">Explain_UpLoaderFrom</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[180]">Explain_UpLoaderHandMess</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[17e]">Explain_UpLoaderReduce</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[17c]">Explain_UpLoaderWarning</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[151]">Explain_UpdateSoftWare</a> from tz_agreen.o(.text) referenced 2 times from tz_agreen.o(.constdata)
 <LI><a href="#[178]">Explain_UploaderJpg1</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[179]">Explain_UploaderJpg2</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[17a]">Explain_UploaderPar</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[177]">Explain_Waring</a> from tz_send.o(.text) referenced from tz_send.o(.constdata)
 <LI><a href="#[15b]">Explain_WorkParSpace</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[15a]">Explain_WorkParTimer</a> from tz_agreen.o(.text) referenced from tz_agreen.o(.constdata)
 <LI><a href="#[e]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[192]">FMrdPg517</a> from _nandflash512.o(.text) referenced from _nandflash512.o(.constdata)
 <LI><a href="#[191]">FMwrPg</a> from _nandflash512.o(.text) referenced from _nandflash512.o(.constdata)
 <LI><a href="#[145]">FTP_CtrReceive</a> from ftp.o(.text) referenced from ftp.o(.constdata)
 <LI><a href="#[146]">FTP_DataReceive</a> from ftp.o(.text) referenced from ftp.o(.constdata)
 <LI><a href="#[19b]">FormatFlash</a> from _flash.o(.text) referenced from _flash.o(.constdata)
 <LI><a href="#[c1]">Get</a> from sensor.o(.text) referenced 2 times from sensor.o(.constdata)
 <LI><a href="#[1b1]">GetAreaData</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[84]">GetChipID</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[59]">GetCsq</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[134]">GetCurIPState</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[1fc]">GetData</a> from appagreedatasensor.o(.text) referenced 2 times from appagreedatasensor.o(.constdata)
 <LI><a href="#[13b]">GetEnable</a> from timer.o(.text) referenced from timer.o(.constdata)
 <LI><a href="#[111]">GetFileProperty</a> from _downfile.o(.text) referenced from _downfile.o(.constdata)
 <LI><a href="#[1a8]">GetFlowWaringType</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[1fe]">GetGps</a> from space.o(.text) referenced from space.o(.constdata)
 <LI><a href="#[c2]">GetID2Par</a> from sensor.o(.text) referenced from sensor.o(.constdata)
 <LI><a href="#[131]">GetIPState1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[133]">GetIpPro1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[105]">GetJlNum1</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[12f]">GetMessageState1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[c3]">GetPar2ID</a> from sensor.o(.text) referenced 2 times from sensor.o(.constdata)
 <LI><a href="#[1aa]">GetPhoneCut</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[130]">GetPhoneState1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[1a9]">GetPhonesSize</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[10a]">GetPointNum</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[13c]">GetPro</a> from timer.o(.text) referenced from timer.o(.constdata)
 <LI><a href="#[c4]">GetSi</a> from sensor.o(.text) referenced from sensor.o(.constdata)
 <LI><a href="#[c0]">GetState</a> from sensor.o(.text) referenced 5 times from sensor.o(.constdata)
 <LI><a href="#[b3]">GetState1</a> from less.o(.text) referenced from less.o(.constdata)
 <LI><a href="#[12e]">GetSysState1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[67]">GetWeek</a> from _date.o(.text) referenced from _date.o(.constdata)
 <LI><a href="#[1ef]">HandAttemper</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1ee]">HandTxt</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[3d]">Hex2Asc</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[40]">Hex2Bcd</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[3b]">HexBuf2Asc</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[ca]">Host_Answer</a> from display.o(.text) referenced from display.o(.constdata)
 <LI><a href="#[d1]">Host_ConInfor</a> from display.o(.text) referenced from display.o(.constdata)
 <LI><a href="#[cb]">Host_DeliverCentr</a> from display.o(.text) referenced from display.o(.constdata)
 <LI><a href="#[d0]">Host_HostSoft</a> from display.o(.text) referenced from display.o(.constdata)
 <LI><a href="#[cf]">Host_InitOver</a> from display.o(.text) referenced from display.o(.constdata)
 <LI><a href="#[ce]">Host_InitStart</a> from display.o(.text) referenced from display.o(.constdata)
 <LI><a href="#[d2]">Host_ParAnswer</a> from display.o(.text) referenced from display.o(.constdata)
 <LI><a href="#[cd]">Host_Phone</a> from display.o(.text) referenced from display.o(.constdata)
 <LI><a href="#[cc]">Host_SysInfor</a> from display.o(.text) referenced from display.o(.constdata)
 <LI><a href="#[97]">Huawei_ATA</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[95]">Huawei_ATD</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[99]">Huawei_CGDCONT</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[a5]">Huawei_CLCC</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[94]">Huawei_CLIP</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[96]">Huawei_Chup</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[83]">Huawei_CloseShow</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[a3]">Huawei_DNSR</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[8f]">Huawei_DelMsg</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[9a]">Huawei_Etcpip</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[87]">Huawei_GetCenterNumber</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[88]">Huawei_GetMessage</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[86]">Huawei_GetModermCard</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[85]">Huawei_GetModermState</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[98]">Huawei_IMEI</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[9b]">Huawei_IOMODE</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[a0]">Huawei_IPCLOSE</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[9f]">Huawei_IPDR</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[9c]">Huawei_IPOPENX</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[a4]">Huawei_IPR</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[9d]">Huawei_IPSENDX</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[a2]">Huawei_JugeETCPIP</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[a1]">Huawei_LogOnTCPIP</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[91]">Huawei_MessSet</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[8b]">Huawei_MsgSend</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[8c]">Huawei_MsgSendData</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[a7]">Huawei_PowerDown</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[93]">Huawei_Reg</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[a6]">Huawei_SEEIPCLOSE</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[8e]">Huawei_SQ</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[a8]">Huawei_SeeCGDCONT</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[8d]">Huawei_SeeCarrier</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[9e]">Huawei_SeeDataRead</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[8a]">Huawei_SeeTxtOrPdu</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[a9]">Huawei_SendExtension</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[89]">Huawei_SetTxtOrPdu</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[aa]">Huawei_SetVolume</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[90]">Huawei_Set_Mem</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[92]">Huawei_Upadate</a> from huaiweigprs.o(.text) referenced from huaiweigprs.o(.constdata)
 <LI><a href="#[5c]">INT322IPAsc</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[5e]">IP2Char</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[5d]">IPAsc2INT32</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[68]">Init</a> from _rtc.o(.text) referenced 38 times from _rtc.o(.constdata)
 <LI><a href="#[3]">Init</a> from _can.o(.text) referenced 4 times from _can.o(.data)
 <LI><a href="#[2d]">Init</a> from _init.o(.text) referenced from _init.o(.text)
 <LI><a href="#[af]">Init1</a> from less.o(.text) referenced 2 times from less.o(.constdata)
 <LI><a href="#[11c]">InitGprs1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[11a]">InitMessage1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[11b]">InitPhone1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[1fd]">InitSpace</a> from space.o(.text) referenced from space.o(.constdata)
 <LI><a href="#[119]">InitSys1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[1da]">JpgIng</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[64]">Juge</a> from _date.o(.text) referenced 2 times from _date.o(.constdata)
 <LI><a href="#[41]">JugeAscBcd</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[43]">JugeAscFloat</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[42]">JugeAscHex</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[71]">JugeBuf</a> from _spi.o(.text) referenced 3 times from _spi.o(.constdata)
 <LI><a href="#[53]">JugeBufType</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[70]">JugeByte</a> from _spi.o(.text) referenced 3 times from _spi.o(.constdata)
 <LI><a href="#[19d]">JugeFlash</a> from _flash.o(.text) referenced from _flash.o(.constdata)
 <LI><a href="#[44]">JugeHexBcd</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[208]">LCDRef</a> from displayoper.o(.text) referenced from displayoper.o(.constdata)
 <LI><a href="#[1cf]">LoaderTxt</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1d0]">LoaderTxtMenum</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[206]">Log</a> from displayoper.o(.text) referenced from displayoper.o(.constdata)
 <LI><a href="#[1b4]">LogInfor</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[2b]">LogSucOper</a> from openandclose.o(.text) referenced from openandclose.o(.text)
 <LI><a href="#[18d]">LookBad</a> from _nandflash512.o(.text) referenced from _nandflash512.o(.constdata)
 <LI><a href="#[60]">LookBufInLength</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[4d]">LookEnable</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[1d9]">LookJpg</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1e0]">LookLog</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1b8]">LookPar</a> from appsendagreeon.o(.text) referenced 2 times from appsendagreeon.o(.constdata)
 <LI><a href="#[50]">LookShowChar</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[4c]">LookStr</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[4f]">LookStrDown</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[4e]">LookStrInLength</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[1e2]">LookWaringTerm</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1dd]">LookWorkPar</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[52]">MemSpace</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[1b6]">Menum</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[1a]">ModermCom</a> from gprshard.o(.text) referenced from gprshard.o(.text)
 <LI><a href="#[46]">MoveByte</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[1ed]">Navigation</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[20f]">NewMessage</a> from messageandphone.o(.text) referenced from messageandphone.o(.constdata)
 <LI><a href="#[65]">Next</a> from _date.o(.text) referenced from _date.o(.constdata)
 <LI><a href="#[1c5]">NoSemSend</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[2e]">OSIntCtxSw</a> from os_cpu_a.o(subr) referenced from irq.o(IRQ)
 <LI><a href="#[2e]">OSIntCtxSw</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[241]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[23b]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[6b]">Open</a> from _spi.o(.text) referenced 26 times from _spi.o(.constdata)
 <LI><a href="#[4]">Open</a> from _can.o(.text) referenced 2 times from _can.o(.data)
 <LI><a href="#[b0]">Open1</a> from less.o(.text) referenced 2 times from less.o(.constdata)
 <LI><a href="#[1f8]">OpenGprs</a> from accoper.o(.text) referenced 14 times from accoper.o(.constdata)
 <LI><a href="#[2a]">OpenGprsNo</a> from openandclose.o(.text) referenced from openandclose.o(.constdata)
 <LI><a href="#[2a]">OpenGprsNo</a> from openandclose.o(.text) referenced from openandclose.o(.text)
 <LI><a href="#[1f7]">OpenGps</a> from accoper.o(.text) referenced 14 times from accoper.o(.constdata)
 <LI><a href="#[11f]">OpenIP1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[11e]">OpenMessage1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[120]">OpenPhone1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[11d]">OpenSys1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[21a]">OpenUart</a> from openandclose.o(.text) referenced from openandclose.o(.constdata)
 <LI><a href="#[203]">Order_Phone</a> from displayoper.o(.text) referenced from displayoper.o(.constdata)
 <LI><a href="#[1b5]">Orientation</a> from appsendagreeon.o(.text) referenced 4 times from appsendagreeon.o(.constdata)
 <LI><a href="#[1c0]">OutRoadMap</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[c]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[56]">PduNumber</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[54]">PhoPdu</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[ad]">PowerDown</a> from gprshard.o(.text) referenced from gprshard.o(.constdata)
 <LI><a href="#[ac]">PowerUp</a> from gprshard.o(.text) referenced from gprshard.o(.constdata)
 <LI><a href="#[69]">Read</a> from _rtc.o(.text) referenced 24 times from _rtc.o(.constdata)
 <LI><a href="#[7]">Read</a> from _can.o(.text) referenced 2 times from _can.o(.data)
 <LI><a href="#[b2]">Read1</a> from less.o(.text) referenced 2 times from less.o(.constdata)
 <LI><a href="#[101]">ReadBin1</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[1a7]">ReadDataFlow</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[10e]">ReadFile</a> from _downfile.o(.text) referenced from _downfile.o(.constdata)
 <LI><a href="#[19f]">ReadFlash</a> from _flash.o(.text) referenced from _flash.o(.constdata)
 <LI><a href="#[1a5]">ReadFlow</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[108]">ReadHeadTail</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[18c]">ReadID</a> from _nandflash512.o(.text) referenced 2 times from _nandflash512.o(.constdata)
 <LI><a href="#[126]">ReadIP1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[125]">ReadMessage1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[24]">ReadParTable</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[24]">ReadParTable</a> from takedata.o(.text) referenced from takedata.o(.text)
 <LI><a href="#[127]">ReadPhone1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[109]">ReadPor</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[103]">ReadRecoder2</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[1b0]">ReadSpace</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[1eb]">Reduce</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[9]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6d]">RwSpi</a> from _spi.o(.text) referenced from _spi.o(.constdata)
 <LI><a href="#[204]">SeePar</a> from displayoper.o(.text) referenced from displayoper.o(.constdata)
 <LI><a href="#[106]">Seek1</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[107]">SeekSize1</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[51]">SeekStr</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[12b]">SendIP1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[12a]">SendMessage1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[12c]">SendPhone1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[112]">SetFileLength</a> from _downfile.o(.text) referenced from _downfile.o(.constdata)
 <LI><a href="#[113]">SetFileName</a> from _downfile.o(.text) referenced from _downfile.o(.constdata)
 <LI><a href="#[205]">SetPar</a> from displayoper.o(.text) referenced from displayoper.o(.constdata)
 <LI><a href="#[1cc]">SetPar1</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1d1]">SetPhone</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1e7]">SetPolygon</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1e5]">SetRectangle</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1e9]">SetRoadMap</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1e3]">SetRound</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1ae]">SetState</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[1db]">SetVidType</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[12d]">SetVolume1</a> from gprs.o(.text) referenced from gprs.o(.constdata)
 <LI><a href="#[1e1]">SetWaringTerm</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[27]">SoftWareState</a> from appgprs.o(.text) referenced from appgprs.o(.text)
 <LI><a href="#[b]">SoftwareInterrupt</a> from os_cpu_a.o(subr) referenced from startup.o(RESET)
 <LI><a href="#[1ff]">Space_Track</a> from space.o(.text) referenced from space.o(.constdata)
 <LI><a href="#[200]">Space_WorkParSpace</a> from space.o(.text) referenced from space.o(.constdata)
 <LI><a href="#[6c]">Start</a> from _spi.o(.text) referenced from _spi.o(.constdata)
 <LI><a href="#[4b]">StrATChar</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[5a]">StrToUni</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[49]">Strsize</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[4a]">Strsize16</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[1dc]">TabelList</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[234]">TargetInit</a> from target.o(.text) referenced from target.o(.text)
 <LI><a href="#[1b]">Task</a> from sensorcontr.o(.text) referenced 11 times from sensorcontr.o(.text)
 <LI><a href="#[14]">Timer0_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[12]">Timer1_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[13]">Timer2_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[1cb]">Track</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1b7]">TxtMenum</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[15]">Uart0_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[16]">Uart1_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[17]">Uart2_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[18]">Uart3_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[a]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5b]">UniToStr</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[1cd]">UnlockWaring</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1f4]">UpLoaderCan</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1c2]">UpLoaderDriver</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[1f1]">UpLoaderForm</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1f3]">UpLoaderFormErro</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1f2]">UpLoaderFormSuc</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1c3]">UpLoaderHandMess</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[1c1]">UpLoaderReduce1</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[1bf]">UpLoaderWarning</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[1b9]">UpdateSoftWare</a> from appsendagreeon.o(.text) referenced 2 times from appsendagreeon.o(.constdata)
 <LI><a href="#[1bb]">UploaderJpg1</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[1bc]">UploaderJpg2</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[1be]">UploaderLog</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[1bd]">UploaderPar</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[61]">Value32</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[207]">Voic</a> from displayoper.o(.text) referenced from displayoper.o(.constdata)
 <LI><a href="#[1ba]">Waring</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[1df]">WorkParSpace</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[1de]">WorkParTimer</a> from appgprs.o(.text) referenced from appgprs.o(.constdata)
 <LI><a href="#[6a]">Write</a> from _rtc.o(.text) referenced 6 times from _rtc.o(.constdata)
 <LI><a href="#[6]">Write</a> from _can.o(.text) referenced 2 times from _can.o(.data)
 <LI><a href="#[102]">WriteBin1</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[1c7]">WriteCommand</a> from appsendagreeon.o(.text) referenced from appsendagreeon.o(.constdata)
 <LI><a href="#[10f]">WriteFile</a> from _downfile.o(.text) referenced from _downfile.o(.constdata)
 <LI><a href="#[19e]">WriteFlash</a> from _flash.o(.text) referenced from _flash.o(.constdata)
 <LI><a href="#[1a6]">WriteFlow</a> from takedata.o(.text) referenced 2 times from takedata.o(.constdata)
 <LI><a href="#[1ab]">WritePhone</a> from takedata.o(.text) referenced from takedata.o(.constdata)
 <LI><a href="#[104]">WriteRecoder2</a> from _rwfile.o(.text) referenced from _rwfile.o(.constdata)
 <LI><a href="#[2f]">__OSStartHighRdy</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[21b]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[55]">gsmEncode7bit</a> from _ascnumber.o(.text) referenced from _ascnumber.o(.constdata)
 <LI><a href="#[10]">main</a> from _init.o(.text) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[30]">nand_calculate_ecc</a> from _arithmetic.o(.text) referenced from _arithmetic.o(.constdata)
 <LI><a href="#[31]">nand_correct_data</a> from _arithmetic.o(.text) referenced from _arithmetic.o(.constdata)
 <LI><a href="#[20d]">ptFunHupWork</a> from messageandphone.o(.text) referenced from messageandphone.o(.constdata)
 <LI><a href="#[20e]">ptFunMostPhone</a> from messageandphone.o(.text) referenced from messageandphone.o(.constdata)
 <LI><a href="#[20c]">ptFunNewPhone</a> from messageandphone.o(.text) referenced from messageandphone.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; TargetResetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21b]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[21e]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[220]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[42c]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[42d]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[42e]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[42f]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[226]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[430]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[431]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[432]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[221]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[433]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[434]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[435]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[436]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[437]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[438]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[439]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[43a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[43b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[43c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[43d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[43e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[43f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[440]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[441]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[442]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[443]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[444]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[22a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[445]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[446]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[447]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[448]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[449]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[44a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[44b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[21f]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[44c]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[223]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[225]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[44d]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[227]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[44e]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3f1]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[229]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[44f]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[22b]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[22d]"></a>ConfigurePLL</STRONG> (ARM, 320 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[22e]"></a>GPIOResetInit</STRONG> (ARM, 120 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[22f]"></a>init_VIC</STRONG> (ARM, 84 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[21d]"></a>TargetResetInit</STRONG> (ARM, 92 bytes, Stack size 4 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TargetResetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VIC
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOResetInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[233]"></a>Install_IRQ</STRONG> (ARM, 92 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Install_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Setup
</UL>

<P><STRONG><a name="[238]"></a>init_port</STRONG> (ARM, 72 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[3f7]"></a>IRQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[21c]"></a>FIQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[230]"></a>Timer0_Exception</STRONG> (ARM, 36 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer0_Exception &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
</UL>

<P><STRONG><a name="[237]"></a>Timer0Init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[232]"></a>VIC_Setup</STRONG> (ARM, 156 bytes, Stack size 4 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VIC_Setup &rArr; Install_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Install_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[234]"></a>TargetInit</STRONG> (ARM, 44 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TargetInit &rArr; VIC_Setup &rArr; Install_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Setup
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_port
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWTD
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[23a]"></a>WatchDog</STRONG> (ARM, 72 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write0
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom1
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20WriteBit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadByte
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadBit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20Reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agree
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreeData
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeOrder
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSig
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileData_BackSet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Photo
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreeData
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemTrack
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemWorkPar
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemReduce
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemJpgData
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemDriver
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileData_CheckFile
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackFacFile
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevPar
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevParSigle
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDRef
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccOper
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[3ef]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[271]"></a>OSTaskStkInit</STRONG> (ARM, 232 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[40b]"></a>SWI_Exception</STRONG> (ARM, 348 bytes, Stack size 4 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SWI_Exception
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInterrupt
</UL>

<P><STRONG><a name="[250]"></a>OSStartHighRdy</STRONG> (ARM, 16 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[244]"></a>OSInitHookBegin</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[24c]"></a>OSInitHookEnd</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[255]"></a>OSTaskCreateHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[275]"></a>OSTaskDelHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[40c]"></a>OSTaskSwHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OSStartHighRdy
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>

<P><STRONG><a name="[23e]"></a>OSTaskStatHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[254]"></a>OSTCBInitHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[252]"></a>OSTimeTickHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[239]"></a>OSTaskIdleHook</STRONG> (ARM, 16 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[23b]"></a>OS_TaskStat</STRONG> (ARM, 216 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[241]"></a>OS_TaskIdle</STRONG> (ARM, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[243]"></a>OSInit</STRONG> (ARM, 56 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[450]"></a>OSIntEnter</STRONG> (ARM, 56 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>OSIntExit</STRONG> (ARM, 244 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIntExit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Handler
</UL>

<P><STRONG><a name="[451]"></a>OSSchedLock</STRONG> (ARM, 72 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>OS_Sched</STRONG> (ARM, 168 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[24d]"></a>OSSchedUnlock</STRONG> (ARM, 124 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[24f]"></a>OSStart</STRONG> (ARM, 132 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSStart &rArr; OSStartHighRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[251]"></a>OSStatInit</STRONG> (ARM, 84 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[231]"></a>OSTimeTick</STRONG> (ARM, 220 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Exception
</UL>

<P><STRONG><a name="[452]"></a>OSVersion</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>OS_Dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[25f]"></a>OS_EventTaskRdy</STRONG> (ARM, 200 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
</UL>

<P><STRONG><a name="[261]"></a>OS_EventTaskWait</STRONG> (ARM, 192 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[262]"></a>OS_EventTO</STRONG> (ARM, 120 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[25d]"></a>OS_EventWaitListInit</STRONG> (ARM, 32 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>

<P><STRONG><a name="[253]"></a>OS_TCBInit</STRONG> (ARM, 336 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[453]"></a>OSFlagAccept</STRONG> (ARM, 444 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)

<P><STRONG><a name="[454]"></a>OSFlagCreate</STRONG> (ARM, 140 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>OS_FlagUnlink</STRONG> (ARM, 88 bytes, Stack size 4 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[258]"></a>OSFlagDel</STRONG> (ARM, 344 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[259]"></a>OSFlagPend</STRONG> (ARM, 824 bytes, Stack size 64 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[25b]"></a>OSFlagPost</STRONG> (ARM, 496 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[455]"></a>OSFlagQuery</STRONG> (ARM, 96 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>OS_FlagInit</STRONG> (ARM, 76 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[456]"></a>OSMboxAccept</STRONG> (ARM, 76 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>OSMboxCreate</STRONG> (ARM, 128 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSMboxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePhone
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[25e]"></a>OSMboxDel</STRONG> (ARM, 344 bytes, Stack size 24 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OSMboxDel &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePhone
</UL>

<P><STRONG><a name="[260]"></a>OSMboxPend</STRONG> (ARM, 316 bytes, Stack size 24 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeFtpAsk
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePhone
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGprs
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>

<P><STRONG><a name="[263]"></a>OSMboxPost</STRONG> (ARM, 156 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_CtrReceive
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemSend
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGprs
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGprs
</UL>

<P><STRONG><a name="[264]"></a>OSMboxPostOpt</STRONG> (ARM, 208 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[373]"></a>OSMboxQuery</STRONG> (ARM, 116 bytes, Stack size 24 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSMboxQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>

<P><STRONG><a name="[457]"></a>OSMemCreate</STRONG> (ARM, 252 bytes, Stack size 40 bytes, os_mem.o(.text), UNUSED)

<P><STRONG><a name="[458]"></a>OSMemGet</STRONG> (ARM, 120 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>OSMemPut</STRONG> (ARM, 116 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>OSMemQuery</STRONG> (ARM, 120 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>OS_MemInit</STRONG> (ARM, 116 bytes, Stack size 0 bytes, os_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[45b]"></a>OSQAccept</STRONG> (ARM, 140 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>OSQCreate</STRONG> (ARM, 236 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[266]"></a>OSQDel</STRONG> (ARM, 392 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[45c]"></a>OSQFlush</STRONG> (ARM, 92 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>OSQPend</STRONG> (ARM, 364 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearQ
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[268]"></a>OSQPost</STRONG> (ARM, 216 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_DataReceive
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSoftWare
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePhone
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[269]"></a>OSQPostFront</STRONG> (ARM, 220 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[26a]"></a>OSQPostOpt</STRONG> (ARM, 328 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[36a]"></a>OSQQuery</STRONG> (ARM, 164 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSQQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearQ
</UL>

<P><STRONG><a name="[24b]"></a>OS_QInit</STRONG> (ARM, 72 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[45d]"></a>OSSemAccept</STRONG> (ARM, 88 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>OSSemCreate</STRONG> (ARM, 128 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init1
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[26c]"></a>OSSemDel</STRONG> (ARM, 344 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[26d]"></a>OSSemPend</STRONG> (ARM, 280 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetID2Par
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPar2ID
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSi
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState1
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open3
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open4
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeIPData
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurIPState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume1
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPhone1
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIP1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseCall1
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreePhone1
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPhone1
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIP1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMessage1
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSRIP1
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIpPro1
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIPState1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhoneState1
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessageState1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysState1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePhone1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseMessage1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseIP1
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSys1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPhone1
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenIP1
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMessage1
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSys1
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGprs1
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPhone1
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMessage1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSys1
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperIPData
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperMessage
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperPhone
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanProperty
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileName
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileLength
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileProperty
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPor
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHeadTail
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSize1
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBin1
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBin1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPar2ID
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EditPro
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPro
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnable
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEnable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemSend
</UL>

<P><STRONG><a name="[26e]"></a>OSSemPost</STRONG> (ARM, 152 bytes, Stack size 8 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;End
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Exception
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Exception
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Exception
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Exception
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Exception
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetID2Par
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPar2ID
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSi
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState1
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close2
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close3
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeIPData
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurIPState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume1
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPhone1
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIP1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseCall1
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreePhone1
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPhone1
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIP1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMessage1
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSRIP1
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIpPro1
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIPState1
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhoneState1
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessageState1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysState1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePhone1
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseMessage1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseIP1
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSys1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPhone1
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenIP1
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMessage1
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSys1
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGprs1
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPhone1
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMessage1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSys1
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperIPData
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperMessage
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperPhone
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanProperty
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileName
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileLength
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileProperty
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPor
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHeadTail
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSize1
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBin1
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBin1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPar2ID
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EditPro
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPro
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnable
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEnable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemSend
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[293]"></a>OSSemQuery</STRONG> (ARM, 116 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSSemQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>

<P><STRONG><a name="[26f]"></a>OSTaskChangePrio</STRONG> (ARM, 472 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[270]"></a>OSTaskCreate</STRONG> (ARM, 240 bytes, Stack size 40 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[240]"></a>OSTaskCreateExt</STRONG> (ARM, 288 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[273]"></a>OSTaskDel</STRONG> (ARM, 516 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[45e]"></a>OSTaskDelReq</STRONG> (ARM, 140 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>OSTaskResume</STRONG> (ARM, 200 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[45f]"></a>OSTaskStkChk</STRONG> (ARM, 196 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>OSTaskSuspend</STRONG> (ARM, 244 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[278]"></a>OSTaskQuery</STRONG> (ARM, 120 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[23c]"></a>OSTimeDly</STRONG> (ARM, 144 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configuration
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreeData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUp
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSig
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoCommon
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPhoto
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevPar
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevParSigle
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[27a]"></a>OSTimeDlyHMSM</STRONG> (ARM, 232 bytes, Stack size 32 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[27b]"></a>OSTimeDlyResume</STRONG> (ARM, 188 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[460]"></a>OSTimeGet</STRONG> (ARM, 32 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>OSTimeSet</STRONG> (ARM, 32 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>CAN_Exception</STRONG> (ARM, 404 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Handler
</UL>

<P><STRONG><a name="[3fb]"></a>Eint_Exception</STRONG> (ARM, 156 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT2_Handler
</UL>

<P><STRONG><a name="[3f9]"></a>Timer1_Exception</STRONG> (ARM, 312 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Handler
</UL>

<P><STRONG><a name="[3fa]"></a>Timer2_Exception</STRONG> (ARM, 260 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Handler
</UL>

<P><STRONG><a name="[2bc]"></a>UART0_Exception</STRONG> (ARM, 244 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART0_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Handler
</UL>

<P><STRONG><a name="[2bd]"></a>UART1_Exception</STRONG> (ARM, 244 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART1_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Handler
</UL>

<P><STRONG><a name="[2be]"></a>UART2_Exception</STRONG> (ARM, 280 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART2_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Handler
</UL>

<P><STRONG><a name="[2bf]"></a>UART3_Exception</STRONG> (ARM, 244 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART3_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Handler
</UL>

<P><STRONG><a name="[378]"></a>FileData_BackSet</STRONG> (ARM, 124 bytes, Stack size 16 bytes, _filedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FileData_BackSet &rArr; BackFacFile
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackFacFile
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_Par
</UL>

<P><STRONG><a name="[39e]"></a>FileData_CheckFile</STRONG> (ARM, 508 bytes, Stack size 32 bytes, _filedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FileData_CheckFile &rArr; BackFacFile
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackFacFile
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[462]"></a>Build_INT_Vector_Table</STRONG> (ARM, 112 bytes, Stack size 4 bytes, _init.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>main</STRONG> (ARM, 48 bytes, Stack size 8 bytes, _init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[235]"></a>srand</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[222]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[2f1]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeOrder (via Veneer)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open (via Veneer)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileNameAgain (via Veneer)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin (via Veneer)
</UL>

<P><STRONG><a name="[280]"></a>memchr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Float (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeOrder (via Veneer)
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSms
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUart
</UL>

<P><STRONG><a name="[463]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_Par
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_SetWaringTerm
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_SetVidType
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPhone
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmendMenum
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploaderJpg2Sig
</UL>

<P><STRONG><a name="[272]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>

<P><STRONG><a name="[466]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[468]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHeadTailPoint
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2ReduceGps_Height
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_WorkPar2
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_WorkPar1
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_WorkPar
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_Par
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeReduceLen
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFlash
</UL>

<P><STRONG><a name="[469]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[46a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[46b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>__read_errno</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[3eb]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via Veneer)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin (via Veneer)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos (via Veneer)
</UL>

<P><STRONG><a name="[46c]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[3e8]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3ea]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via Veneer)
</UL>

<P><STRONG><a name="[46d]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[46e]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[46f]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[470]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[228]"></a>exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[22c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[471]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[473]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[23d]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Algorism2Asc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Algorism2BCD
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open3
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Lat
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Long
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHeadTailPoint
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpLoaderReduce
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps_Angle
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps_Height
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_Par
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftWareState
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploaderJpg2Sig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploaderJpg1
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoaderJpgData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhoneCut
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EaseFlash
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeFlash
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatBad
</UL>

<P><STRONG><a name="[474]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
</UL>

<P><STRONG><a name="[14]"></a>Timer0_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer0_Handler &rArr; Timer0_Exception &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>Uart0_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart0_Handler &rArr; UART0_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Exception
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>Uart1_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart1_Handler &rArr; UART1_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Exception
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>Uart2_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart2_Handler &rArr; UART2_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Exception
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>Uart3_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart3_Handler &rArr; UART3_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Exception
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>CAN_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = CAN_Handler &rArr; CAN_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>Timer1_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Timer1_Handler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Exception
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>Timer2_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Timer2_Handler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Exception
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>EINT2_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = EINT2_Handler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[406]"></a>__ARM_fpclassify</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[3fc]"></a>__ieee754_rem_pio2</STRONG> (ARM, 1236 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[403]"></a>__kernel_cos</STRONG> (ARM, 404 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[404]"></a>__kernel_poly</STRONG> (ARM, 256 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[405]"></a>__kernel_sin</STRONG> (ARM, 368 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[408]"></a>__mathlib_dbl_infnan</STRONG> (ARM, 8 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[409]"></a>__mathlib_dbl_invalid</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[407]"></a>__mathlib_dbl_underflow</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[303]"></a>cos</STRONG> (ARM, 236 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
</UL>

<P><STRONG><a name="[302]"></a>sin</STRONG> (ARM, 244 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
</UL>

<P><STRONG><a name="[305]"></a>sqrt</STRONG> (ARM, 112 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
</UL>

<P><STRONG><a name="[b]"></a>SoftwareInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = SoftwareInterrupt &rArr; SWI_Exception
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>OSIntCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 2]<UL><LI> irq.o(IRQ)
<LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[2f]"></a>__OSStartHighRdy</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[2fe]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
</UL>

<P><STRONG><a name="[40d]"></a>_d2f</STRONG> (ARM, 108 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[304]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[410]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[413]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[2fd]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[415]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3fe]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[416]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3ff]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[475]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[418]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[401]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[417]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[2ff]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[419]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[40f]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[412]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[400]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[41a]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[40a]"></a>_dsqrt</STRONG> (ARM, 516 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[3fd]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[41c]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2fc]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
</UL>

<P><STRONG><a name="[41d]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[476]"></a>__aeabi_fadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[41f]"></a>_fadd</STRONG> (ARM, 196 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[425]"></a>__fpl_fcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[308]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeAreacirc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[421]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[477]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[478]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[423]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[2fb]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
</UL>

<P><STRONG><a name="[422]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[479]"></a>__aeabi_cfcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[424]"></a>_fcmple</STRONG> (ARM, 132 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[428]"></a>__fpl_fcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[306]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
</UL>

<P><STRONG><a name="[426]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[41e]"></a>__fpl_fnaninf</STRONG> (ARM, 168 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[40e]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[300]"></a>__aeabi_cfrcmple</STRONG> (ARM, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
</UL>

<P><STRONG><a name="[427]"></a>_frcmple</STRONG> (ARM, 124 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[301]"></a>__aeabi_fsub</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
</UL>

<P><STRONG><a name="[429]"></a>_fsub</STRONG> (ARM, 304 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[414]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[402]"></a>__ARM_scalbn</STRONG> (ARM, 104 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[42b]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[236]"></a>InitWTD</STRONG> (ARM, 24 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[a]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23f]"></a>OS_InitTaskStat</STRONG> (ARM, 76 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[242]"></a>OS_InitTaskIdle</STRONG> (ARM, 76 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[248]"></a>OS_InitEventList</STRONG> (ARM, 84 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[247]"></a>OS_InitTCBList</STRONG> (ARM, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[246]"></a>OS_InitRdyList</STRONG> (ARM, 92 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[245]"></a>OS_InitMisc</STRONG> (ARM, 88 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[256]"></a>OS_FlagTaskRdy</STRONG> (ARM, 140 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[25a]"></a>OS_FlagBlock</STRONG> (ARM, 224 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[27c]"></a>nand_trans_result</STRONG> (ARM, 196 bytes, Stack size 16 bytes, _arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nand_trans_result
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_calculate_ecc
</UL>

<P><STRONG><a name="[30]"></a>nand_calculate_ecc</STRONG> (ARM, 184 bytes, Stack size 32 bytes, _arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nand_calculate_ecc &rArr; nand_trans_result
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_trans_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>nand_correct_data</STRONG> (ARM, 488 bytes, Stack size 36 bytes, _arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nand_correct_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>Crc</STRONG> (ARM, 124 bytes, Stack size 8 bytes, _arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Crc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>CheckSum</STRONG> (ARM, 52 bytes, Stack size 0 bytes, _arithmetic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>CheckAdd</STRONG> (ARM, 56 bytes, Stack size 0 bytes, _arithmetic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>Crc1021</STRONG> (ARM, 124 bytes, Stack size 8 bytes, _arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Crc1021
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>Bcd2Hex</STRONG> (ARM, 72 bytes, Stack size 8 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2Algorism
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>BCD2Algorism</STRONG> (ARM, 96 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BCD2Algorism &rArr; Bcd2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>Hex2Bcd</STRONG> (ARM, 108 bytes, Stack size 24 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Algorism2BCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>Algorism2BCD</STRONG> (ARM, 120 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Algorism2BCD &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>Asc2Bcd</STRONG> (ARM, 80 bytes, Stack size 8 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Asc2Bcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>Bcd2Asc</STRONG> (ARM, 84 bytes, Stack size 4 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Bcd2Asc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>Asc2Algorism</STRONG> (ARM, 100 bytes, Stack size 12 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Asc2Algorism
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char2IP
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAsc2INT32
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>Algorism2Asc</STRONG> (ARM, 176 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Algorism2Asc
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP2Char
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT322IPAsc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[27e]"></a>Asc2HexSig</STRONG> (ARM, 96 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2HexBuf
</UL>

<P><STRONG><a name="[3a]"></a>Asc2HexBuf</STRONG> (ARM, 120 bytes, Stack size 24 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Asc2HexBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2HexSig
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpPdu
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[27f]"></a>Hex2AscSig</STRONG> (ARM, 52 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Asc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexBuf2Asc
</UL>

<P><STRONG><a name="[3b]"></a>HexBuf2Asc</STRONG> (ARM, 96 bytes, Stack size 24 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HexBuf2Asc
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2AscSig
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>Asc2Hex</STRONG> (ARM, 100 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Asc2Hex &rArr; Asc2HexBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2HexBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>Hex2Asc</STRONG> (ARM, 220 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hex2Asc
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2AscSig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>JugeAscBcd</STRONG> (ARM, 72 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>JugeHexBcd</STRONG> (ARM, 84 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>JugeAscHex</STRONG> (ARM, 136 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>Asc2Float</STRONG> (ARM, 160 bytes, Stack size 40 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Asc2Float &rArr; Asc2Algorism
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Algorism
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>JugeAscFloat</STRONG> (ARM, 120 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>ClsArray</STRONG> (ARM, 48 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpPdu
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>MoveByte</STRONG> (ARM, 60 bytes, Stack size 8 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MoveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>CompareBuf</STRONG> (ARM, 84 bytes, Stack size 12 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CompareBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>CompareVa</STRONG> (ARM, 208 bytes, Stack size 8 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompareVa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>Strsize</STRONG> (ARM, 52 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeBufType
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAsc2INT32
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemSpace
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookStrDown
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookStrInLength
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrATChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>StrATChar</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StrATChar
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>Strsize16</STRONG> (ARM, 60 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char2IP
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>LookStr</STRONG> (ARM, 164 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LookStr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize16
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAsc2INT32
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>LookStrInLength</STRONG> (ARM, 156 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LookStrInLength
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>LookStrDown</STRONG> (ARM, 200 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LookStrDown
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>LookEnable</STRONG> (ARM, 144 bytes, Stack size 16 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LookEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>LookShowChar</STRONG> (ARM, 64 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[283]"></a>SeekChar</STRONG> (ARM, 108 bytes, Stack size 8 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char2IP
</UL>

<P><STRONG><a name="[51]"></a>SeekStr</STRONG> (ARM, 104 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SeekStr &rArr; LookStr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>MemSpace</STRONG> (ARM, 108 bytes, Stack size 24 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>IPAsc2INT32</STRONG> (ARM, 252 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IPAsc2INT32 &rArr; LookStr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookStr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Algorism
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>INT322IPAsc</STRONG> (ARM, 164 bytes, Stack size 24 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = INT322IPAsc &rArr; Algorism2Asc
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Algorism2Asc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>JugeBufType</STRONG> (ARM, 112 bytes, Stack size 24 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JugeBufType
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[281]"></a>BinarySearchStr</STRONG> (ARM, 208 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BinarySearchStr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToUni
</UL>

<P><STRONG><a name="[5a]"></a>StrToUni</STRONG> (ARM, 216 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = StrToUni &rArr; BinarySearchStr
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearchStr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>gsmEncode7bit</STRONG> (ARM, 152 bytes, Stack size 16 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gsmEncode7bit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>PduNumber</STRONG> (ARM, 92 bytes, Stack size 4 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PduNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>PhoPdu</STRONG> (ARM, 628 bytes, Stack size 200 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PhoPdu &rArr; StrToUni &rArr; BinarySearchStr
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduNumber
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsmEncode7bit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToUni
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeBufType
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize16
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexBuf2Asc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>Bit72Bit8</STRONG> (ARM, 548 bytes, Stack size 12 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bit72Bit8
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[282]"></a>BinarySearchUni</STRONG> (ARM, 200 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BinarySearchUni
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniToStr
</UL>

<P><STRONG><a name="[5b]"></a>UniToStr</STRONG> (ARM, 220 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UniToStr &rArr; BinarySearchUni
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearchUni
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>ExpPdu</STRONG> (ARM, 520 bytes, Stack size 40 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ExpPdu &rArr; UniToStr &rArr; BinarySearchUni
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniToStr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit72Bit8
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2HexBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>GetCsq</STRONG> (ARM, 92 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>IP2Char</STRONG> (ARM, 112 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = IP2Char &rArr; Algorism2Asc
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Algorism2Asc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>Char2IP</STRONG> (ARM, 252 bytes, Stack size 40 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Char2IP &rArr; Asc2Algorism
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize16
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Algorism
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>LookBufInLength</STRONG> (ARM, 144 bytes, Stack size 12 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LookBufInLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>Value32</STRONG> (ARM, 96 bytes, Stack size 4 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Value32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[288]"></a>JugeSecond</STRONG> (ARM, 28 bytes, Stack size 0 bytes, _date.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>

<P><STRONG><a name="[287]"></a>JugeMinute</STRONG> (ARM, 28 bytes, Stack size 0 bytes, _date.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>

<P><STRONG><a name="[286]"></a>JugeHour</STRONG> (ARM, 28 bytes, Stack size 0 bytes, _date.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>

<P><STRONG><a name="[285]"></a>Bcd2Hex</STRONG> (ARM, 72 bytes, Stack size 8 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSecond
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMinute
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHour
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDate
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextSecond
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMinute
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextHour
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextDate
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeDate
</UL>

<P><STRONG><a name="[284]"></a>JugeDate</STRONG> (ARM, 400 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JugeDate &rArr; Bcd2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>

<P><STRONG><a name="[64]"></a>Juge</STRONG> (ARM, 212 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Juge &rArr; JugeDate &rArr; Bcd2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeDate
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeHour
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeMinute
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _date.o(.constdata)
</UL>
<P><STRONG><a name="[289]"></a>Hex2Bcd</STRONG> (ARM, 108 bytes, Stack size 24 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSecond
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMinute
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHour
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDate
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextSecond
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMinute
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextHour
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextDate
</UL>

<P><STRONG><a name="[28a]"></a>NextDate</STRONG> (ARM, 412 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextHour
</UL>

<P><STRONG><a name="[28b]"></a>NextHour</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NextHour &rArr; NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextDate
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMinute
</UL>

<P><STRONG><a name="[28c]"></a>NextMinute</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NextMinute &rArr; NextHour &rArr; NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextHour
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextSecond
</UL>

<P><STRONG><a name="[28d]"></a>NextSecond</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NextSecond &rArr; NextMinute &rArr; NextHour &rArr; NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMinute
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next
</UL>

<P><STRONG><a name="[65]"></a>Next</STRONG> (ARM, 120 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Next &rArr; NextSecond &rArr; NextMinute &rArr; NextHour &rArr; NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextSecond
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMinute
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextHour
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextDate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _date.o(.constdata)
</UL>
<P><STRONG><a name="[28e]"></a>BackDate</STRONG> (ARM, 384 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BackDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHour
</UL>

<P><STRONG><a name="[28f]"></a>BackHour</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BackHour &rArr; BackDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDate
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMinute
</UL>

<P><STRONG><a name="[290]"></a>BackMinute</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BackMinute &rArr; BackHour &rArr; BackDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHour
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSecond
</UL>

<P><STRONG><a name="[291]"></a>BackSecond</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BackSecond &rArr; BackMinute &rArr; BackHour &rArr; BackDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMinute
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
</UL>

<P><STRONG><a name="[66]"></a>Back</STRONG> (ARM, 120 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Back &rArr; BackSecond &rArr; BackMinute &rArr; BackHour &rArr; BackDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSecond
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMinute
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHour
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _date.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>GetWeek</STRONG> (ARM, 292 bytes, Stack size 24 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetWeek &rArr; NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextDate
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeDate
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _date.o(.constdata)
</UL>
<P><STRONG><a name="[3]"></a>Init</STRONG> (ARM, 268 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _can.o(.data)
</UL>
<P><STRONG><a name="[292]"></a>ClearSem</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>

<P><STRONG><a name="[294]"></a>Open1</STRONG> (ARM, 192 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Open1 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[295]"></a>Open0</STRONG> (ARM, 192 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Open0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[4]"></a>Open</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Open &rArr; Open0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _can.o(.data)
</UL>
<P><STRONG><a name="[296]"></a>Close1</STRONG> (ARM, 84 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close1 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[297]"></a>Close0</STRONG> (ARM, 84 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[5]"></a>Close</STRONG> (ARM, 52 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Close &rArr; Close0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _can.o(.data)
</UL>
<P><STRONG><a name="[299]"></a>Read1</STRONG> (ARM, 184 bytes, Stack size 0 bytes, _can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[298]"></a>Read0</STRONG> (ARM, 184 bytes, Stack size 0 bytes, _can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[7]"></a>Read</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read0
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _can.o(.data)
</UL>
<P><STRONG><a name="[29b]"></a>Write1</STRONG> (ARM, 116 bytes, Stack size 0 bytes, _can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[29a]"></a>Write0</STRONG> (ARM, 128 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write0
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[6]"></a>Write</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Write &rArr; Write0
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write0
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _can.o(.data)
</UL>
<P><STRONG><a name="[29e]"></a>RTCInit</STRONG> (ARM, 80 bytes, Stack size 0 bytes, _rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init1
</UL>

<P><STRONG><a name="[29d]"></a>Init1</STRONG> (ARM, 20 bytes, Stack size 8 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init1
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[68]"></a>Init</STRONG> (ARM, 104 bytes, Stack size 8 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init1
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rtc.o(.constdata)
</UL>
<P><STRONG><a name="[29f]"></a>Read1</STRONG> (ARM, 188 bytes, Stack size 24 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Read1
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[69]"></a>Read</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rtc.o(.constdata)
</UL>
<P><STRONG><a name="[2a0]"></a>Write1</STRONG> (ARM, 180 bytes, Stack size 24 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Write1 &rArr; Read1
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[6a]"></a>Write</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Write &rArr; Write1 &rArr; Read1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rtc.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>Open</STRONG> (ARM, 172 bytes, Stack size 8 bytes, _spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Open &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[2a1]"></a>DelaySpi</STRONG> (ARM, 32 bytes, Stack size 0 bytes, _spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
</UL>

<P><STRONG><a name="[6c]"></a>Start</STRONG> (ARM, 120 bytes, Stack size 16 bytes, _spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Start &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelaySpi
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>RwSpi</STRONG> (ARM, 196 bytes, Stack size 4 bytes, _spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RwSpi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>Write</STRONG> (ARM, 156 bytes, Stack size 4 bytes, _spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>Read</STRONG> (ARM, 188 bytes, Stack size 0 bytes, _spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>JugeBuf</STRONG> (ARM, 204 bytes, Stack size 0 bytes, _spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>JugeByte</STRONG> (ARM, 184 bytes, Stack size 0 bytes, _spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>End</STRONG> (ARM, 84 bytes, Stack size 8 bytes, _spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = End &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>Close</STRONG> (ARM, 32 bytes, Stack size 0 bytes, _spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>Init</STRONG> (ARM, 628 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _uart.o(.constdata)
</UL>
<P><STRONG><a name="[2a2]"></a>ClearSem</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close2
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close3
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open3
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open4
</UL>

<P><STRONG><a name="[2a3]"></a>Open4</STRONG> (ARM, 712 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Open4 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[2a4]"></a>Open3</STRONG> (ARM, 532 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Open3 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[2a5]"></a>Open2</STRONG> (ARM, 532 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Open2 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[2a6]"></a>Open1</STRONG> (ARM, 544 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Open1 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[2a7]"></a>Open0</STRONG> (ARM, 740 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Open0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[75]"></a>Open</STRONG> (ARM, 124 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Open &rArr; Open0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open3
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _uart.o(.constdata)
</UL>
<P><STRONG><a name="[2ac]"></a>Close4</STRONG> (ARM, 48 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[2a8]"></a>Close3</STRONG> (ARM, 96 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close3 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[2a9]"></a>Close2</STRONG> (ARM, 92 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close2 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[2aa]"></a>Close1</STRONG> (ARM, 92 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close1 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[2ab]"></a>Close0</STRONG> (ARM, 92 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[76]"></a>Close</STRONG> (ARM, 100 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Close &rArr; Close0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close2
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close3
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _uart.o(.constdata)
</UL>
<P><STRONG><a name="[2ae]"></a>Receive4Byte</STRONG> (ARM, 116 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read4
</UL>

<P><STRONG><a name="[2ad]"></a>Read4</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read4
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[2b0]"></a>Receive3Byte</STRONG> (ARM, 116 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read3
</UL>

<P><STRONG><a name="[2af]"></a>Read3</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read3
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive3Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[2b2]"></a>Receive2Byte</STRONG> (ARM, 116 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read2
</UL>

<P><STRONG><a name="[2b1]"></a>Read2</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read2
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[2b4]"></a>Receive1Byte</STRONG> (ARM, 116 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>

<P><STRONG><a name="[2b3]"></a>Read1</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[2b6]"></a>Receive0Byte</STRONG> (ARM, 116 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read0
</UL>

<P><STRONG><a name="[2b5]"></a>Read0</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read0
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive0Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[77]"></a>Read</STRONG> (ARM, 148 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read &rArr; Read0
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read0
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read2
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read3
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _uart.o(.constdata)
</UL>
<P><STRONG><a name="[2bb]"></a>Write4</STRONG> (ARM, 132 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[2ba]"></a>Write3</STRONG> (ARM, 80 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[2b9]"></a>Write2</STRONG> (ARM, 80 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[2b8]"></a>Write1</STRONG> (ARM, 80 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[2b7]"></a>Write0</STRONG> (ARM, 80 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[78]"></a>Write</STRONG> (ARM, 148 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write0
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write2
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write3
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _uart.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>Init</STRONG> (ARM, 160 bytes, Stack size 8 bytes, adchard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adchard.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>Open</STRONG> (ARM, 708 bytes, Stack size 24 bytes, adchard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adchard.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>Close</STRONG> (ARM, 172 bytes, Stack size 16 bytes, adchard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adchard.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>Read</STRONG> (ARM, 1040 bytes, Stack size 24 bytes, adchard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adchard.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>Init</STRONG> (ARM, 72 bytes, Stack size 8 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>Open</STRONG> (ARM, 260 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[2c8]"></a>DS18B20crc8</STRONG> (ARM, 64 bytes, Stack size 8 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DS18B20crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadTemp
</UL>

<P><STRONG><a name="[2c1]"></a>delay_10us</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ds18b20.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadTemp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20WriteBit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20Reset
</UL>

<P><STRONG><a name="[2c0]"></a>DS18B20Reset</STRONG> (ARM, 216 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DS18B20Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadTemp
</UL>

<P><STRONG><a name="[2c3]"></a>delay_1us</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ds18b20.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20WriteByte
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20WriteBit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadByte
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadBit
</UL>

<P><STRONG><a name="[2c2]"></a>DS18B20ReadBit</STRONG> (ARM, 248 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DS18B20ReadBit
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadByte
</UL>

<P><STRONG><a name="[2c4]"></a>DS18B20ReadByte</STRONG> (ARM, 96 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS18B20ReadByte &rArr; DS18B20ReadBit
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadBit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadTemp
</UL>

<P><STRONG><a name="[2c5]"></a>DS18B20WriteBit</STRONG> (ARM, 216 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DS18B20WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20WriteByte
</UL>

<P><STRONG><a name="[2c6]"></a>DS18B20WriteByte</STRONG> (ARM, 76 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DS18B20WriteByte &rArr; DS18B20WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20WriteBit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadTemp
</UL>

<P><STRONG><a name="[2c7]"></a>DS18B20ReadTemp</STRONG> (ARM, 332 bytes, Stack size 40 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DS18B20ReadTemp &rArr; DS18B20WriteByte &rArr; DS18B20WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20WriteByte
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadByte
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20Reset
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10us
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[7f]"></a>Read</STRONG> (ARM, 248 bytes, Stack size 24 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Read &rArr; DS18B20ReadTemp &rArr; DS18B20WriteByte &rArr; DS18B20WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20ReadTemp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>Close</STRONG> (ARM, 168 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ds18b20.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>Init</STRONG> (ARM, 36 bytes, Stack size 0 bytes, huaiweigprs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>Read</STRONG> (ARM, 216 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>Huawei_CloseShow</STRONG> (ARM, 104 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_CloseShow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[2c9]"></a>ClearNoDisplay</STRONG> (ARM, 156 bytes, Stack size 16 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClearNoDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_SeeCGDCONT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_SEEIPCLOSE
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_CLCC
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_DNSR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_JugeETCPIP
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_IPDR
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_SeeDataRead
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_IMEI
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_ATD
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_Reg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_SQ
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_SeeCarrier
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_SeeTxtOrPdu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_GetMessage
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_GetCenterNumber
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_GetModermCard
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_GetModermState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChipID
</UL>

<P><STRONG><a name="[84]"></a>GetChipID</STRONG> (ARM, 172 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetChipID &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>Huawei_GetModermState</STRONG> (ARM, 236 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Huawei_GetModermState &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>Huawei_GetModermCard</STRONG> (ARM, 160 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Huawei_GetModermCard &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[2ca]"></a>SeekChar</STRONG> (ARM, 108 bytes, Stack size 8 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_SeeCGDCONT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_SEEIPCLOSE
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_CLCC
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_JugeETCPIP
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_IPDR
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_SeeDataRead
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_Reg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_SQ
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_GetMessage
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Huawei_GetCenterNumber
</UL>

<P><STRONG><a name="[87]"></a>Huawei_GetCenterNumber</STRONG> (ARM, 304 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Huawei_GetCenterNumber &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>Huawei_GetMessage</STRONG> (ARM, 644 bytes, Stack size 48 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Huawei_GetMessage &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>Huawei_SetTxtOrPdu</STRONG> (ARM, 220 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_SetTxtOrPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>Huawei_SeeTxtOrPdu</STRONG> (ARM, 212 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Huawei_SeeTxtOrPdu &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>Huawei_MsgSend</STRONG> (ARM, 152 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_MsgSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>Huawei_MsgSendData</STRONG> (ARM, 152 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_MsgSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>Huawei_SeeCarrier</STRONG> (ARM, 248 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Huawei_SeeCarrier &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>Huawei_SQ</STRONG> (ARM, 252 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Huawei_SQ &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>Huawei_DelMsg</STRONG> (ARM, 164 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_DelMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>Huawei_Set_Mem</STRONG> (ARM, 188 bytes, Stack size 48 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Huawei_Set_Mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>Huawei_MessSet</STRONG> (ARM, 124 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Huawei_MessSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>Huawei_Upadate</STRONG> (ARM, 112 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_Upadate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>Huawei_Reg</STRONG> (ARM, 256 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Huawei_Reg &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>Huawei_CLIP</STRONG> (ARM, 128 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_CLIP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>Huawei_ATD</STRONG> (ARM, 340 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Huawei_ATD &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>Huawei_Chup</STRONG> (ARM, 116 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_Chup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>Huawei_ATA</STRONG> (ARM, 244 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Huawei_ATA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>Huawei_IMEI</STRONG> (ARM, 180 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Huawei_IMEI &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>Huawei_CGDCONT</STRONG> (ARM, 240 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_CGDCONT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>Huawei_Etcpip</STRONG> (ARM, 396 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Huawei_Etcpip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>Huawei_IOMODE</STRONG> (ARM, 108 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_IOMODE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>Huawei_IPOPENX</STRONG> (ARM, 612 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Huawei_IPOPENX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>Huawei_IPSENDX</STRONG> (ARM, 388 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_IPSENDX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>Huawei_SeeDataRead</STRONG> (ARM, 268 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Huawei_SeeDataRead &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>Huawei_IPDR</STRONG> (ARM, 712 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Huawei_IPDR &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>Huawei_JugeETCPIP</STRONG> (ARM, 896 bytes, Stack size 48 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Huawei_JugeETCPIP &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>Huawei_DNSR</STRONG> (ARM, 248 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Huawei_DNSR &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>Huawei_IPR</STRONG> (ARM, 156 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_IPR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>Huawei_CLCC</STRONG> (ARM, 944 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Huawei_CLCC &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>Huawei_IPCLOSE</STRONG> (ARM, 208 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_IPCLOSE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>Huawei_LogOnTCPIP</STRONG> (ARM, 104 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_LogOnTCPIP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>Huawei_SEEIPCLOSE</STRONG> (ARM, 404 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Huawei_SEEIPCLOSE &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>Huawei_PowerDown</STRONG> (ARM, 72 bytes, Stack size 24 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Huawei_PowerDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>Huawei_SeeCGDCONT</STRONG> (ARM, 416 bytes, Stack size 40 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Huawei_SeeCGDCONT &rArr; ClearNoDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>Huawei_SendExtension</STRONG> (ARM, 152 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_SendExtension
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>Huawei_SetVolume</STRONG> (ARM, 112 bytes, Stack size 32 bytes, huaiweigprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Huawei_SetVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> huaiweigprs.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>Init</STRONG> (ARM, 36 bytes, Stack size 8 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprshard.o(.constdata)
</UL>
<P><STRONG><a name="[2d2]"></a>InitModerm</STRONG> (ARM, 76 bytes, Stack size 16 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitModerm
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUp
</UL>

<P><STRONG><a name="[2cb]"></a>ModermCom1</STRONG> (ARM, 932 bytes, Stack size 80 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ModermCom1
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>

<P><STRONG><a name="[1a]"></a>ModermCom</STRONG> (ARM, 108 bytes, Stack size 32 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ModermCom &rArr; ModermCom1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBpsAT
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBps
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseShow
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChipID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprshard.o(.text)
</UL>
<P><STRONG><a name="[2cd]"></a>ClearNoDisplay</STRONG> (ARM, 156 bytes, Stack size 16 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClearNoDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChipID
</UL>

<P><STRONG><a name="[2cc]"></a>GetChipID</STRONG> (ARM, 132 bytes, Stack size 16 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetChipID &rArr; ModermCom &rArr; ModermCom1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearNoDisplay
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookChipID
</UL>

<P><STRONG><a name="[2ce]"></a>CloseShow</STRONG> (ARM, 36 bytes, Stack size 8 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CloseShow &rArr; ModermCom &rArr; ModermCom1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookChipID
</UL>

<P><STRONG><a name="[2cf]"></a>SetBps</STRONG> (ARM, 88 bytes, Stack size 24 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SetBps &rArr; ModermCom &rArr; ModermCom1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookChipID
</UL>

<P><STRONG><a name="[2d0]"></a>GetBpsAT</STRONG> (ARM, 36 bytes, Stack size 8 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetBpsAT &rArr; ModermCom &rArr; ModermCom1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookChipID
</UL>

<P><STRONG><a name="[2d1]"></a>LookChipID</STRONG> (ARM, 388 bytes, Stack size 40 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LookChipID &rArr; SetBps &rArr; ModermCom &rArr; ModermCom1
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBpsAT
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBps
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseShow
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChipID
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerUp
</UL>

<P><STRONG><a name="[ac]"></a>PowerUp</STRONG> (ARM, 176 bytes, Stack size 8 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PowerUp &rArr; LookChipID &rArr; SetBps &rArr; ModermCom &rArr; ModermCom1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookChipID
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModerm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprshard.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>PowerDown</STRONG> (ARM, 84 bytes, Stack size 8 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprshard.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>Read</STRONG> (ARM, 72 bytes, Stack size 32 bytes, gprshard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprshard.o(.constdata)
</UL>
<P><STRONG><a name="[2d3]"></a>Init</STRONG> (ARM, 344 bytes, Stack size 16 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init1
</UL>

<P><STRONG><a name="[af]"></a>Init1</STRONG> (ARM, 16 bytes, Stack size 8 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init1 &rArr; Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> less.o(.constdata)
</UL>
<P><STRONG><a name="[2d5]"></a>ReadData</STRONG> (ARM, 48 bytes, Stack size 16 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreeData
</UL>

<P><STRONG><a name="[2d4]"></a>AgreeData</STRONG> (ARM, 432 bytes, Stack size 32 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AgreeData &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configuration
</UL>

<P><STRONG><a name="[2d7]"></a>WriteData</STRONG> (ARM, 48 bytes, Stack size 16 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[2d6]"></a>SendData</STRONG> (ARM, 200 bytes, Stack size 24 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendData &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configuration
</UL>

<P><STRONG><a name="[2d9]"></a>ClsData</STRONG> (ARM, 52 bytes, Stack size 8 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClsData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configuration
</UL>

<P><STRONG><a name="[2d8]"></a>Configuration</STRONG> (ARM, 472 bytes, Stack size 64 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Configuration &rArr; AgreeData &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsData
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreeData
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[2db]"></a>Lookfd</STRONG> (ARM, 56 bytes, Stack size 0 bytes, less.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[2da]"></a>Open</STRONG> (ARM, 316 bytes, Stack size 24 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Open &rArr; Configuration &rArr; AgreeData &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lookfd
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>

<P><STRONG><a name="[b0]"></a>Open1</STRONG> (ARM, 72 bytes, Stack size 24 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Open1 &rArr; Open &rArr; Configuration &rArr; AgreeData &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> less.o(.constdata)
</UL>
<P><STRONG><a name="[2dc]"></a>Close</STRONG> (ARM, 120 bytes, Stack size 16 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Close &rArr; Configuration &rArr; AgreeData &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
</UL>

<P><STRONG><a name="[b1]"></a>Close1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Close1 &rArr; Close &rArr; Configuration &rArr; AgreeData &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> less.o(.constdata)
</UL>
<P><STRONG><a name="[2de]"></a>LookID</STRONG> (ARM, 96 bytes, Stack size 0 bytes, less.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExplainState
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExplainData
</UL>

<P><STRONG><a name="[2dd]"></a>ExplainData</STRONG> (ARM, 236 bytes, Stack size 40 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ExplainData
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookID
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[2df]"></a>ExplainState</STRONG> (ARM, 348 bytes, Stack size 40 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ExplainState
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookID
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[2e1]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[2e0]"></a>Read</STRONG> (ARM, 624 bytes, Stack size 32 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Read &rArr; AgreeData &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExplainState
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExplainData
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsData
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreeData
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>

<P><STRONG><a name="[b2]"></a>Read1</STRONG> (ARM, 80 bytes, Stack size 24 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read1 &rArr; Read &rArr; AgreeData &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> less.o(.constdata)
</UL>
<P><STRONG><a name="[2e2]"></a>GetState</STRONG> (ARM, 104 bytes, Stack size 16 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState1
</UL>

<P><STRONG><a name="[b3]"></a>GetState1</STRONG> (ARM, 72 bytes, Stack size 24 bytes, less.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetState1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> less.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>Init</STRONG> (ARM, 144 bytes, Stack size 8 bytes, acc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acc.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>Open</STRONG> (ARM, 112 bytes, Stack size 16 bytes, acc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acc.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>Close</STRONG> (ARM, 92 bytes, Stack size 16 bytes, acc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acc.o(.constdata)
</UL>
<P><STRONG><a name="[2e3]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, acc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[b7]"></a>Read</STRONG> (ARM, 256 bytes, Stack size 32 bytes, acc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acc.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>Init</STRONG> (ARM, 104 bytes, Stack size 8 bytes, oil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oil.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>Open</STRONG> (ARM, 236 bytes, Stack size 32 bytes, oil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oil.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>Close</STRONG> (ARM, 92 bytes, Stack size 16 bytes, oil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oil.o(.constdata)
</UL>
<P><STRONG><a name="[2e4]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, oil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[bb]"></a>Read</STRONG> (ARM, 480 bytes, Stack size 40 bytes, oil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oil.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>Init</STRONG> (ARM, 132 bytes, Stack size 8 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>Open</STRONG> (ARM, 596 bytes, Stack size 32 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>Close</STRONG> (ARM, 216 bytes, Stack size 16 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>Read</STRONG> (ARM, 184 bytes, Stack size 24 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>GetState</STRONG> (ARM, 264 bytes, Stack size 24 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetState &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>GetSi</STRONG> (ARM, 92 bytes, Stack size 16 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetSi &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>Get</STRONG> (ARM, 164 bytes, Stack size 24 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Get &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>GetPar2ID</STRONG> (ARM, 160 bytes, Stack size 24 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetPar2ID &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>GetID2Par</STRONG> (ARM, 148 bytes, Stack size 16 bytes, sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetID2Par &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>Init</STRONG> (ARM, 232 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>Open</STRONG> (ARM, 140 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>Close</STRONG> (ARM, 152 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[2e6]"></a>SeekChar</STRONG> (ARM, 100 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_LocationTrue
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_GetTime
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Lat
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Long
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Speed
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Angle
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA_StarNumber
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA_Height
</UL>

<P><STRONG><a name="[2e5]"></a>Parse_GPGGA_Height</STRONG> (ARM, 232 bytes, Stack size 40 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Parse_GPGGA_Height &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA
</UL>

<P><STRONG><a name="[2e7]"></a>Parse_GPGGA_StarNumber</STRONG> (ARM, 196 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Parse_GPGGA_StarNumber &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA
</UL>

<P><STRONG><a name="[2e8]"></a>Parse_GPGGA</STRONG> (ARM, 92 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Parse_GPGGA &rArr; Parse_GPGGA_Height &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA_StarNumber
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA_Height
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCommInput
</UL>

<P><STRONG><a name="[2e9]"></a>Parse_GPRMC_Angle</STRONG> (ARM, 192 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Parse_GPRMC_Angle &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[2ea]"></a>Parse_GPRMC_Speed</STRONG> (ARM, 168 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Parse_GPRMC_Speed &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[2eb]"></a>Parse_GPRMC_Long</STRONG> (ARM, 356 bytes, Stack size 56 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Parse_GPRMC_Long &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[2ec]"></a>Parse_GPRMC_Lat</STRONG> (ARM, 340 bytes, Stack size 56 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Parse_GPRMC_Lat &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[2ed]"></a>Parse_GPRMC_GetTime</STRONG> (ARM, 356 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Parse_GPRMC_GetTime &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[2ee]"></a>Parse_GPRMC_LocationTrue</STRONG> (ARM, 112 bytes, Stack size 24 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Parse_GPRMC_LocationTrue &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[2ef]"></a>Parse_GPRMC</STRONG> (ARM, 320 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Parse_GPRMC &rArr; Parse_GPRMC_Lat &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_LocationTrue
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_GetTime
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Lat
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Long
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Speed
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCommInput
</UL>

<P><STRONG><a name="[2f0]"></a>JugeOrder</STRONG> (ARM, 520 bytes, Stack size 40 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = JugeOrder &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCommInput
</UL>

<P><STRONG><a name="[2f2]"></a>GpsCommInput</STRONG> (ARM, 272 bytes, Stack size 24 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GpsCommInput &rArr; Parse_GPRMC &rArr; Parse_GPRMC_Lat &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeOrder
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[c8]"></a>Read</STRONG> (ARM, 160 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Read &rArr; GpsCommInput &rArr; Parse_GPRMC &rArr; Parse_GPRMC_Lat &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCommInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>GetState</STRONG> (ARM, 84 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetState &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>Init</STRONG> (ARM, 84 bytes, Stack size 8 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>Open</STRONG> (ARM, 188 bytes, Stack size 24 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[2f5]"></a>CommType2App</STRONG> (ARM, 580 bytes, Stack size 32 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CommType2App
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agree
</UL>

<P><STRONG><a name="[2f3]"></a>AgreeData</STRONG> (ARM, 244 bytes, Stack size 32 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AgreeData
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agree
</UL>

<P><STRONG><a name="[2f4]"></a>Agree</STRONG> (ARM, 888 bytes, Stack size 520 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = Agree &rArr; AgreeData
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreeData
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommType2App
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[2f6]"></a>Read</STRONG> (ARM, 296 bytes, Stack size 40 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Read &rArr; Agree &rArr; AgreeData
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agree
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>

<P><STRONG><a name="[d6]"></a>Read1</STRONG> (ARM, 80 bytes, Stack size 24 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Read1 &rArr; Read &rArr; Agree &rArr; AgreeData
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>Close</STRONG> (ARM, 92 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[2f7]"></a>Send</STRONG> (ARM, 260 bytes, Stack size 32 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Send
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ParAnswer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ConInfor
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_HostSoft
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_InitOver
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_InitStart
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Phone
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_SysInfor
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DeliverCentr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Answer
</UL>

<P><STRONG><a name="[ca]"></a>Host_Answer</STRONG> (ARM, 60 bytes, Stack size 24 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Host_Answer &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>Host_DeliverCentr</STRONG> (ARM, 44 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Host_DeliverCentr &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>Host_SysInfor</STRONG> (ARM, 424 bytes, Stack size 40 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Host_SysInfor &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>Host_Phone</STRONG> (ARM, 132 bytes, Stack size 48 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Host_Phone &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>Host_InitStart</STRONG> (ARM, 40 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Host_InitStart &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>Host_InitOver</STRONG> (ARM, 40 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Host_InitOver &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>Host_HostSoft</STRONG> (ARM, 52 bytes, Stack size 24 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Host_HostSoft &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>Host_ConInfor</STRONG> (ARM, 152 bytes, Stack size 120 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Host_ConInfor &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[2f8]"></a>App2CommType</STRONG> (ARM, 732 bytes, Stack size 32 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App2CommType
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ParAnswer
</UL>

<P><STRONG><a name="[d2]"></a>Host_ParAnswer</STRONG> (ARM, 272 bytes, Stack size 544 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Host_ParAnswer &rArr; App2CommType
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CommType
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>Init</STRONG> (ARM, 192 bytes, Stack size 8 bytes, temperture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temperture.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>Open</STRONG> (ARM, 516 bytes, Stack size 24 bytes, temperture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temperture.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>Close</STRONG> (ARM, 144 bytes, Stack size 16 bytes, temperture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temperture.o(.constdata)
</UL>
<P><STRONG><a name="[2f9]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, temperture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[da]"></a>Read</STRONG> (ARM, 268 bytes, Stack size 32 bytes, temperture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temperture.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>GetState</STRONG> (ARM, 116 bytes, Stack size 16 bytes, temperture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetState &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temperture.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>Init</STRONG> (ARM, 152 bytes, Stack size 8 bytes, mileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mileage.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>Open</STRONG> (ARM, 260 bytes, Stack size 16 bytes, mileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mileage.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>Close</STRONG> (ARM, 116 bytes, Stack size 16 bytes, mileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mileage.o(.constdata)
</UL>
<P><STRONG><a name="[2fa]"></a>CalcMil</STRONG> (ARM, 1040 bytes, Stack size 152 bytes, mileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CalcMil &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[307]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, mileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[df]"></a>Read</STRONG> (ARM, 828 bytes, Stack size 64 bytes, mileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Read &rArr; CalcMil &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mileage.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>Init</STRONG> (ARM, 120 bytes, Stack size 8 bytes, gprstzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprstzxy.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>Open</STRONG> (ARM, 196 bytes, Stack size 16 bytes, gprstzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprstzxy.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>Close</STRONG> (ARM, 92 bytes, Stack size 16 bytes, gprstzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprstzxy.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>Read</STRONG> (ARM, 204 bytes, Stack size 32 bytes, gprstzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprstzxy.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>Init</STRONG> (ARM, 120 bytes, Stack size 8 bytes, uarttzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uarttzxy.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>Open</STRONG> (ARM, 268 bytes, Stack size 24 bytes, uarttzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uarttzxy.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>Close</STRONG> (ARM, 92 bytes, Stack size 16 bytes, uarttzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uarttzxy.o(.constdata)
</UL>
<P><STRONG><a name="[309]"></a>Agree</STRONG> (ARM, 256 bytes, Stack size 24 bytes, uarttzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Agree
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[30a]"></a>Send</STRONG> (ARM, 144 bytes, Stack size 24 bytes, uarttzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Send
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[e7]"></a>Read</STRONG> (ARM, 180 bytes, Stack size 32 bytes, uarttzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uarttzxy.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>Init</STRONG> (ARM, 132 bytes, Stack size 8 bytes, arealrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arealrm.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>Open</STRONG> (ARM, 356 bytes, Stack size 24 bytes, arealrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arealrm.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>Close</STRONG> (ARM, 124 bytes, Stack size 16 bytes, arealrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arealrm.o(.constdata)
</UL>
<P><STRONG><a name="[30b]"></a>CalcMil</STRONG> (ARM, 1016 bytes, Stack size 160 bytes, arealrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CalcMil &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeAreacirc
</UL>

<P><STRONG><a name="[30c]"></a>JugeAreacirc</STRONG> (ARM, 124 bytes, Stack size 48 bytes, arealrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = JugeAreacirc &rArr; CalcMil &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcMil
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[30d]"></a>JugeArearect</STRONG> (ARM, 116 bytes, Stack size 20 bytes, arealrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JugeArearect
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[eb]"></a>Read</STRONG> (ARM, 260 bytes, Stack size 40 bytes, arealrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Read &rArr; JugeAreacirc &rArr; CalcMil &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeArearect
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeAreacirc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arealrm.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>Init</STRONG> (ARM, 104 bytes, Stack size 8 bytes, help.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> help.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>Open</STRONG> (ARM, 112 bytes, Stack size 16 bytes, help.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> help.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>Close</STRONG> (ARM, 92 bytes, Stack size 16 bytes, help.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> help.o(.constdata)
</UL>
<P><STRONG><a name="[30e]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, help.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[ef]"></a>Read</STRONG> (ARM, 268 bytes, Stack size 32 bytes, help.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> help.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>Init</STRONG> (ARM, 124 bytes, Stack size 8 bytes, onoroff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onoroff.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>Open</STRONG> (ARM, 112 bytes, Stack size 16 bytes, onoroff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onoroff.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>Close</STRONG> (ARM, 92 bytes, Stack size 16 bytes, onoroff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onoroff.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>Read</STRONG> (ARM, 208 bytes, Stack size 24 bytes, onoroff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> onoroff.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>Init</STRONG> (ARM, 84 bytes, Stack size 8 bytes, adc1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc1.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>Open</STRONG> (ARM, 168 bytes, Stack size 32 bytes, adc1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc1.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>Close</STRONG> (ARM, 92 bytes, Stack size 16 bytes, adc1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc1.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>Read</STRONG> (ARM, 188 bytes, Stack size 32 bytes, adc1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc1.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>Init</STRONG> (ARM, 120 bytes, Stack size 8 bytes, smstzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smstzxy.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>Open</STRONG> (ARM, 252 bytes, Stack size 24 bytes, smstzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smstzxy.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>Close</STRONG> (ARM, 92 bytes, Stack size 16 bytes, smstzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smstzxy.o(.constdata)
</UL>
<P><STRONG><a name="[310]"></a>Agree</STRONG> (ARM, 752 bytes, Stack size 40 bytes, smstzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Agree
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[30f]"></a>Send</STRONG> (ARM, 408 bytes, Stack size 40 bytes, smstzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Send &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[fb]"></a>Read</STRONG> (ARM, 180 bytes, Stack size 32 bytes, smstzxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read &rArr; Send &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smstzxy.o(.constdata)
</UL>
<P><STRONG><a name="[312]"></a>ClsArray</STRONG> (ARM, 44 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileNameAgain
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[311]"></a>Init</STRONG> (ARM, 44 bytes, Stack size 8 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init1
</UL>

<P><STRONG><a name="[fc]"></a>Init1</STRONG> (ARM, 56 bytes, Stack size 8 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init1 &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[314]"></a>Crc</STRONG> (ARM, 116 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecode
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecode
</UL>

<P><STRONG><a name="[313]"></a>WriteRecode</STRONG> (ARM, 236 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecode
</UL>

<P><STRONG><a name="[319]"></a>MoveByte</STRONG> (ARM, 44 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPor
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileNameAgain
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfor
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>

<P><STRONG><a name="[315]"></a>ReadRecode</STRONG> (ARM, 484 bytes, Stack size 40 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecode
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeadTailPoint
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookSpace
</UL>

<P><STRONG><a name="[317]"></a>CompareBuf</STRONG> (ARM, 68 bytes, Stack size 4 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CompareBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileNameAgain
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookSpace
</UL>

<P><STRONG><a name="[316]"></a>LookSpace</STRONG> (ARM, 312 bytes, Stack size 40 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBuf
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecode
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>

<P><STRONG><a name="[31a]"></a>LookChip</STRONG> (ARM, 60 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>

<P><STRONG><a name="[318]"></a>CreateBin</STRONG> (ARM, 448 bytes, Stack size 80 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = CreateBin &rArr; LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookChip
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookSpace
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecode
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin1
</UL>

<P><STRONG><a name="[fd]"></a>CreateBin1</STRONG> (ARM, 76 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CreateBin1 &rArr; CreateBin &rArr; LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[31b]"></a>CreateRecoder</STRONG> (ARM, 548 bytes, Stack size 104 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CreateRecoder &rArr; LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookChip
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookSpace
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecode
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder1
</UL>

<P><STRONG><a name="[fe]"></a>CreateRecoder1</STRONG> (ARM, 92 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CreateRecoder1 &rArr; CreateRecoder &rArr; LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[31d]"></a>LookHeadTailFF</STRONG> (ARM, 224 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LookHeadTailFF
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeadTailPoint
</UL>

<P><STRONG><a name="[31c]"></a>GetHeadTailPoint</STRONG> (ARM, 312 bytes, Stack size 40 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetHeadTailPoint &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookHeadTailFF
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecode
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfor
</UL>

<P><STRONG><a name="[31e]"></a>GetFileInfor</STRONG> (ARM, 280 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetFileInfor &rArr; GetHeadTailPoint &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeadTailPoint
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[31f]"></a>LookFileNameAgain</STRONG> (ARM, 216 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LookFileNameAgain &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBuf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[321]"></a>LookFileBufSpace</STRONG> (ARM, 72 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[320]"></a>Open</STRONG> (ARM, 300 bytes, Stack size 72 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Open &rArr; GetFileInfor &rArr; GetHeadTailPoint &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileBufSpace
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileNameAgain
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfor
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookChip
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookSpace
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>

<P><STRONG><a name="[ff]"></a>Open1</STRONG> (ARM, 76 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Open1 &rArr; Open &rArr; GetFileInfor &rArr; GetHeadTailPoint &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[322]"></a>Close</STRONG> (ARM, 32 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
</UL>

<P><STRONG><a name="[100]"></a>Close1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[323]"></a>ReadBin</STRONG> (ARM, 232 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadBin
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBin1
</UL>

<P><STRONG><a name="[101]"></a>ReadBin1</STRONG> (ARM, 88 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadBin1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[324]"></a>WriteBin</STRONG> (ARM, 236 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteBin
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBin1
</UL>

<P><STRONG><a name="[102]"></a>WriteBin1</STRONG> (ARM, 88 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteBin1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[326]"></a>GetJlNum</STRONG> (ARM, 188 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum1
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
</UL>

<P><STRONG><a name="[325]"></a>ReadRecoder1</STRONG> (ARM, 1788 bytes, Stack size 48 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ReadRecoder1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBuf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder2
</UL>

<P><STRONG><a name="[103]"></a>ReadRecoder2</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ReadRecoder2 &rArr; ReadRecoder1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[327]"></a>fWriteHeadTail</STRONG> (ARM, 620 bytes, Stack size 40 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fWriteHeadTail &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookHeadTailFF
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecode
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHeadTailPoint
</UL>

<P><STRONG><a name="[329]"></a>UpdateHeadTailPoint</STRONG> (ARM, 336 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UpdateHeadTailPoint &rArr; fWriteHeadTail &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
</UL>

<P><STRONG><a name="[32a]"></a>WriteRecoder1</STRONG> (ARM, 1332 bytes, Stack size 64 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = WriteRecoder1 &rArr; UpdateHeadTailPoint &rArr; fWriteHeadTail &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHeadTailPoint
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder2
</UL>

<P><STRONG><a name="[104]"></a>WriteRecoder2</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = WriteRecoder2 &rArr; WriteRecoder1 &rArr; UpdateHeadTailPoint &rArr; fWriteHeadTail &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>GetJlNum1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetJlNum1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[32b]"></a>Seek</STRONG> (ARM, 12 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek1
</UL>

<P><STRONG><a name="[106]"></a>Seek1</STRONG> (ARM, 88 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Seek1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[32c]"></a>SeekSize</STRONG> (ARM, 32 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SeekSize
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSize1
</UL>

<P><STRONG><a name="[107]"></a>SeekSize1</STRONG> (ARM, 108 bytes, Stack size 64 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SeekSize1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>ReadHeadTail</STRONG> (ARM, 120 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadHeadTail &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>ReadPor</STRONG> (ARM, 84 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadPor &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>GetPointNum</STRONG> (ARM, 136 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[32d]"></a>ClsArray</STRONG> (ARM, 44 bytes, Stack size 0 bytes, _downfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanProperty1
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile1
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[10b]"></a>Init</STRONG> (ARM, 60 bytes, Stack size 8 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _downfile.o(.constdata)
</UL>
<P><STRONG><a name="[330]"></a>MoveByte</STRONG> (ARM, 44 bytes, Stack size 0 bytes, _downfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileName1
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileProperty1
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile1
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile1
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>

<P><STRONG><a name="[32f]"></a>Strsize</STRONG> (ARM, 56 bytes, Stack size 0 bytes, _downfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileName1
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile1
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>

<P><STRONG><a name="[32e]"></a>Open1</STRONG> (ARM, 328 bytes, Stack size 40 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Open1
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[10c]"></a>Open</STRONG> (ARM, 72 bytes, Stack size 24 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Open &rArr; Open1
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _downfile.o(.constdata)
</UL>
<P><STRONG><a name="[331]"></a>CreateFile1</STRONG> (ARM, 392 bytes, Stack size 256 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CreateFile1
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile
</UL>

<P><STRONG><a name="[10d]"></a>CreateFile</STRONG> (ARM, 72 bytes, Stack size 24 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CreateFile &rArr; CreateFile1
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateFile1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _downfile.o(.constdata)
</UL>
<P><STRONG><a name="[332]"></a>ReadFile1</STRONG> (ARM, 300 bytes, Stack size 264 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ReadFile1
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>

<P><STRONG><a name="[10e]"></a>ReadFile</STRONG> (ARM, 88 bytes, Stack size 32 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ReadFile &rArr; ReadFile1
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _downfile.o(.constdata)
</UL>
<P><STRONG><a name="[333]"></a>WriteFile1</STRONG> (ARM, 276 bytes, Stack size 240 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WriteFile1
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile
</UL>

<P><STRONG><a name="[10f]"></a>WriteFile</STRONG> (ARM, 80 bytes, Stack size 24 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WriteFile &rArr; WriteFile1
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFile1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _downfile.o(.constdata)
</UL>
<P><STRONG><a name="[334]"></a>Close1</STRONG> (ARM, 136 bytes, Stack size 8 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Close1
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[110]"></a>Close</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _downfile.o(.constdata)
</UL>
<P><STRONG><a name="[335]"></a>GetFileProperty1</STRONG> (ARM, 104 bytes, Stack size 232 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GetFileProperty1
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileProperty
</UL>

<P><STRONG><a name="[111]"></a>GetFileProperty</STRONG> (ARM, 72 bytes, Stack size 24 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GetFileProperty &rArr; GetFileProperty1
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileProperty1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _downfile.o(.constdata)
</UL>
<P><STRONG><a name="[336]"></a>SetFileLength1</STRONG> (ARM, 148 bytes, Stack size 232 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SetFileLength1
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileLength
</UL>

<P><STRONG><a name="[112]"></a>SetFileLength</STRONG> (ARM, 72 bytes, Stack size 24 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SetFileLength &rArr; SetFileLength1
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileLength1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _downfile.o(.constdata)
</UL>
<P><STRONG><a name="[337]"></a>SetFileName1</STRONG> (ARM, 192 bytes, Stack size 240 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SetFileName1
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileName
</UL>

<P><STRONG><a name="[113]"></a>SetFileName</STRONG> (ARM, 72 bytes, Stack size 24 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetFileName &rArr; SetFileName1
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFileName1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _downfile.o(.constdata)
</UL>
<P><STRONG><a name="[338]"></a>CleanProperty1</STRONG> (ARM, 128 bytes, Stack size 224 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CleanProperty1
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanProperty
</UL>

<P><STRONG><a name="[114]"></a>CleanProperty</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _downfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CleanProperty &rArr; CleanProperty1
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanProperty1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _downfile.o(.constdata)
</UL>
<P><STRONG><a name="[1b]"></a>Task</STRONG> (ARM, 392 bytes, Stack size 32 bytes, sensorcontr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Task &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensorcontr.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>Init</STRONG> (ARM, 156 bytes, Stack size 8 bytes, sensorcontr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensorcontr.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>Open</STRONG> (ARM, 248 bytes, Stack size 24 bytes, sensorcontr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensorcontr.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>Close</STRONG> (ARM, 80 bytes, Stack size 16 bytes, sensorcontr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensorcontr.o(.constdata)
</UL>
<P><STRONG><a name="[339]"></a>OperPhone</STRONG> (ARM, 616 bytes, Stack size 40 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OperPhone &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[33a]"></a>OperMessage</STRONG> (ARM, 712 bytes, Stack size 48 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OperMessage &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[33c]"></a>CloseIP</STRONG> (ARM, 724 bytes, Stack size 80 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CloseIP
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseIP1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSys
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpIP
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGprs
</UL>

<P><STRONG><a name="[33b]"></a>InitGprs</STRONG> (ARM, 476 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InitGprs &rArr; CloseIP
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseIP
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGprs1
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpIP
</UL>

<P><STRONG><a name="[33d]"></a>BackUpIP</STRONG> (ARM, 112 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BackUpIP &rArr; InitGprs &rArr; CloseIP
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGprs
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseIP
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpAPNAndIp
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpSys2
</UL>

<P><STRONG><a name="[344]"></a>InitPhone</STRONG> (ARM, 84 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitPhone
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPhone1
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpSys2
</UL>

<P><STRONG><a name="[343]"></a>InitMessage</STRONG> (ARM, 340 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMessage1
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpSys2
</UL>

<P><STRONG><a name="[342]"></a>InitSys</STRONG> (ARM, 336 bytes, Stack size 40 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitSys
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSys1
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpSys2
</UL>

<P><STRONG><a name="[340]"></a>ClosePhone</STRONG> (ARM, 20 bytes, Stack size 0 bytes, gprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePhone1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSys
</UL>

<P><STRONG><a name="[33f]"></a>CloseMessage</STRONG> (ARM, 84 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseMessage1
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSys
</UL>

<P><STRONG><a name="[33e]"></a>CloseSys</STRONG> (ARM, 60 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CloseSys &rArr; CloseIP
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseMessage
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePhone
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseIP
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSys1
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpSys2
</UL>

<P><STRONG><a name="[341]"></a>BackUpSys2</STRONG> (ARM, 228 bytes, Stack size 32 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BackUpSys2 &rArr; BackUpIP &rArr; InitGprs &rArr; CloseIP
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSys
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSys
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMessage
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPhone
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpIP
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpSys
</UL>

<P><STRONG><a name="[345]"></a>BackUpSys</STRONG> (ARM, 128 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BackUpSys &rArr; BackUpSys2 &rArr; BackUpIP &rArr; InitGprs &rArr; CloseIP
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpSys2
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[34a]"></a>JugeMessage</STRONG> (ARM, 132 bytes, Stack size 32 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JugeMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[348]"></a>SendIP</STRONG> (ARM, 224 bytes, Stack size 40 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendIP
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIP1
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperIPData
</UL>

<P><STRONG><a name="[347]"></a>GetTimeAdd</STRONG> (ARM, 212 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperIPData
</UL>

<P><STRONG><a name="[346]"></a>OperIPData</STRONG> (ARM, 1336 bytes, Stack size 80 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OperIPData &rArr; SendIP
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIP
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[349]"></a>JugeSys</STRONG> (ARM, 384 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JugeSys
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1c]"></a>Task</STRONG> (ARM, 408 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Task &rArr; BackUpSys &rArr; BackUpSys2 &rArr; BackUpIP &rArr; InitGprs &rArr; CloseIP
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeSys
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperIPData
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeMessage
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpSys
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperMessage
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OperPhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>Init</STRONG> (ARM, 404 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>InitSys1</STRONG> (ARM, 56 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitSys1 &rArr; InitSys
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>InitMessage1</STRONG> (ARM, 56 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitMessage1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>InitPhone1</STRONG> (ARM, 56 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitPhone1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>InitGprs1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = InitGprs1 &rArr; InitGprs &rArr; CloseIP
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGprs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[34b]"></a>OpenSys</STRONG> (ARM, 72 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenSys
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSys1
</UL>

<P><STRONG><a name="[11d]"></a>OpenSys1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpenSys1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[34c]"></a>OpenMessage</STRONG> (ARM, 72 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMessage1
</UL>

<P><STRONG><a name="[11e]"></a>OpenMessage1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpenMessage1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[34d]"></a>OpenIP</STRONG> (ARM, 572 bytes, Stack size 48 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpenIP
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenIP1
</UL>

<P><STRONG><a name="[11f]"></a>OpenIP1</STRONG> (ARM, 80 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OpenIP1 &rArr; OpenIP
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenIP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[34e]"></a>OpenPhone</STRONG> (ARM, 72 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenPhone
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPhone1
</UL>

<P><STRONG><a name="[120]"></a>OpenPhone1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpenPhone1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>CloseSys1</STRONG> (ARM, 56 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CloseSys1 &rArr; CloseSys &rArr; CloseIP
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>CloseIP1</STRONG> (ARM, 80 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CloseIP1 &rArr; CloseIP
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseIP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>CloseMessage1</STRONG> (ARM, 56 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CloseMessage1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>ClosePhone1</STRONG> (ARM, 56 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClosePhone1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[34f]"></a>GetSysState</STRONG> (ARM, 72 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSysState
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysState1
</UL>

<P><STRONG><a name="[12e]"></a>GetSysState1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetSysState1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[350]"></a>GetMessageState</STRONG> (ARM, 72 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetMessageState
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessageState1
</UL>

<P><STRONG><a name="[12f]"></a>GetMessageState1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetMessageState1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessageState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[351]"></a>GetPhoneState</STRONG> (ARM, 76 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPhoneState
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhoneState1
</UL>

<P><STRONG><a name="[130]"></a>GetPhoneState1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetPhoneState1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPhoneState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[352]"></a>GetIPState</STRONG> (ARM, 132 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetIPState
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIPState1
</UL>

<P><STRONG><a name="[131]"></a>GetIPState1</STRONG> (ARM, 72 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetIPState1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIPState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[353]"></a>GetIpPro</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetIpPro
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIpPro1
</UL>

<P><STRONG><a name="[133]"></a>GetIpPro1</STRONG> (ARM, 72 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetIpPro1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIpPro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[354]"></a>DNSRIP</STRONG> (ARM, 104 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DNSRIP
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSRIP1
</UL>

<P><STRONG><a name="[132]"></a>DNSRIP1</STRONG> (ARM, 72 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DNSRIP1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSRIP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[355]"></a>ReadMessage</STRONG> (ARM, 196 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMessage1
</UL>

<P><STRONG><a name="[125]"></a>ReadMessage1</STRONG> (ARM, 72 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadMessage1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[356]"></a>ReadIP</STRONG> (ARM, 152 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadIP
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIP1
</UL>

<P><STRONG><a name="[126]"></a>ReadIP1</STRONG> (ARM, 80 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadIP1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[357]"></a>ReadPhone</STRONG> (ARM, 124 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadPhone
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPhone1
</UL>

<P><STRONG><a name="[127]"></a>ReadPhone1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadPhone1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[358]"></a>AgreePhone</STRONG> (ARM, 80 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AgreePhone
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreePhone1
</UL>

<P><STRONG><a name="[128]"></a>AgreePhone1</STRONG> (ARM, 56 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AgreePhone1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreePhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[359]"></a>CloseCall</STRONG> (ARM, 52 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseCall
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseCall1
</UL>

<P><STRONG><a name="[129]"></a>CloseCall1</STRONG> (ARM, 56 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CloseCall1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[35a]"></a>SendMessage</STRONG> (ARM, 344 bytes, Stack size 40 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage1
</UL>

<P><STRONG><a name="[12a]"></a>SendMessage1</STRONG> (ARM, 72 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendMessage1 &rArr; SendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>SendIP1</STRONG> (ARM, 80 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendIP1 &rArr; SendIP
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[35b]"></a>SendPhone</STRONG> (ARM, 240 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendPhone
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPhone1
</UL>

<P><STRONG><a name="[12c]"></a>SendPhone1</STRONG> (ARM, 72 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendPhone1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[35c]"></a>SetVolume</STRONG> (ARM, 168 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume1
</UL>

<P><STRONG><a name="[12d]"></a>SetVolume1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetVolume1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>GetCurIPState</STRONG> (ARM, 104 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetCurIPState &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[35d]"></a>JugeIPData</STRONG> (ARM, 440 bytes, Stack size 24 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[35e]"></a>BackUpAPNAndIp</STRONG> (ARM, 128 bytes, Stack size 24 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpIP
</UL>

<P><STRONG><a name="[35f]"></a>JugeEvent</STRONG> (ARM, 520 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JugeEvent &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[360]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1d]"></a>Task</STRONG> (ARM, 156 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Task &rArr; JugeEvent &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>Init</STRONG> (ARM, 108 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[361]"></a>SeekSpace</STRONG> (ARM, 64 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[136]"></a>Open</STRONG> (ARM, 160 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>Close</STRONG> (ARM, 80 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>Read</STRONG> (ARM, 80 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>Enable</STRONG> (ARM, 108 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Enable &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>DisEnable</STRONG> (ARM, 108 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DisEnable &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>GetEnable</STRONG> (ARM, 112 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetEnable &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>GetPro</STRONG> (ARM, 116 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetPro &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>EditPro</STRONG> (ARM, 132 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EditPro &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[363]"></a>CheckSum</STRONG> (ARM, 60 bytes, Stack size 0 bytes, photo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPhoto
</UL>

<P><STRONG><a name="[362]"></a>ReadPhoto</STRONG> (ARM, 488 bytes, Stack size 48 bytes, photo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadPhoto &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Photo
</UL>

<P><STRONG><a name="[364]"></a>PhotoCommon</STRONG> (ARM, 456 bytes, Stack size 64 bytes, photo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PhotoCommon &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Photo
</UL>

<P><STRONG><a name="[365]"></a>Photo</STRONG> (ARM, 372 bytes, Stack size 552 bytes, photo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Photo &rArr; PhotoCommon &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoCommon
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPhoto
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1e]"></a>Task</STRONG> (ARM, 152 bytes, Stack size 8 bytes, photo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Task &rArr; Photo &rArr; PhotoCommon &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Photo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> photo.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>Init</STRONG> (ARM, 156 bytes, Stack size 8 bytes, photo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> photo.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>Open</STRONG> (ARM, 72 bytes, Stack size 16 bytes, photo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> photo.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>Close</STRONG> (ARM, 56 bytes, Stack size 8 bytes, photo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> photo.o(.constdata)
</UL>
<P><STRONG><a name="[366]"></a>JugeEvent</STRONG> (ARM, 184 bytes, Stack size 16 bytes, gpsandmileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = JugeEvent &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[368]"></a>CountMileage</STRONG> (ARM, 52 bytes, Stack size 16 bytes, gpsandmileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CountMileage
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[367]"></a>ReadGpsData</STRONG> (ARM, 132 bytes, Stack size 24 bytes, gpsandmileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadGpsData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1f]"></a>Task</STRONG> (ARM, 268 bytes, Stack size 16 bytes, gpsandmileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Task &rArr; JugeEvent &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGpsData
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountMileage
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpsandmileage.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>Init</STRONG> (ARM, 152 bytes, Stack size 8 bytes, gpsandmileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpsandmileage.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>Open</STRONG> (ARM, 216 bytes, Stack size 24 bytes, gpsandmileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpsandmileage.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>Close</STRONG> (ARM, 80 bytes, Stack size 16 bytes, gpsandmileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpsandmileage.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>Get</STRONG> (ARM, 80 bytes, Stack size 16 bytes, gpsandmileage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpsandmileage.o(.constdata)
</UL>
<P><STRONG><a name="[369]"></a>ClearQ</STRONG> (ARM, 88 bytes, Stack size 24 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ClearQ &rArr; OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[374]"></a>FtpClose</STRONG> (ARM, 156 bytes, Stack size 8 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FtpClose
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[376]"></a>RevFtpData</STRONG> (ARM, 124 bytes, Stack size 224 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RevFtpData
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[370]"></a>GetFileLength</STRONG> (ARM, 204 bytes, Stack size 40 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetFileLength
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpConfig
</UL>

<P><STRONG><a name="[36b]"></a>JudgeFtpAsk</STRONG> (ARM, 144 bytes, Stack size 24 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JudgeFtpAsk &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnFtpServer
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_SendCommand
</UL>

<P><STRONG><a name="[36c]"></a>FTP_SendCommand</STRONG> (ARM, 376 bytes, Stack size 88 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FTP_SendCommand &rArr; JudgeFtpAsk &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeFtpAsk
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpConfig
</UL>

<P><STRONG><a name="[36f]"></a>GetDataLinkPra</STRONG> (ARM, 544 bytes, Stack size 48 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetDataLinkPra
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpConfig
</UL>

<P><STRONG><a name="[36e]"></a>GetFileNameDir</STRONG> (ARM, 260 bytes, Stack size 32 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetFileNameDir
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpConfig
</UL>

<P><STRONG><a name="[36d]"></a>FtpConfig</STRONG> (ARM, 572 bytes, Stack size 520 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = FtpConfig &rArr; FTP_SendCommand &rArr; JudgeFtpAsk &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileNameDir
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataLinkPra
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_SendCommand
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileLength
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnFtpServer
</UL>

<P><STRONG><a name="[371]"></a>LogOnFtpServer</STRONG> (ARM, 244 bytes, Stack size 120 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = LogOnFtpServer &rArr; FtpConfig &rArr; FTP_SendCommand &rArr; JudgeFtpAsk &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpConfig
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeFtpAsk
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[375]"></a>FTP_File_Init</STRONG> (ARM, 844 bytes, Stack size 560 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = FTP_File_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[372]"></a>ClearSem</STRONG> (ARM, 84 bytes, Stack size 24 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ClearSem &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[20]"></a>Task</STRONG> (ARM, 712 bytes, Stack size 8 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = Task &rArr; LogOnFtpServer &rArr; FtpConfig &rArr; FTP_SendCommand &rArr; JudgeFtpAsk &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_File_Init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogOnFtpServer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RevFtpData
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpClose
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.text)
</UL>
<P><STRONG><a name="[147]"></a>Init</STRONG> (ARM, 300 bytes, Stack size 328 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>FTP_CtrReceive</STRONG> (ARM, 76 bytes, Stack size 16 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FTP_CtrReceive &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>FTP_DataReceive</STRONG> (ARM, 668 bytes, Stack size 568 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = FTP_DataReceive &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>GetState</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ftp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.constdata)
</UL>
<P><STRONG><a name="[377]"></a>Explain_Par</STRONG> (ARM, 2508 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Explain_Par &rArr; FileData_BackSet &rArr; BackFacFile
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileData_BackSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_SetPar
</UL>

<P><STRONG><a name="[379]"></a>Explain_WorkPar</STRONG> (ARM, 3808 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_WorkPar
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_SetWaringTerm
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_SetVidType
</UL>

<P><STRONG><a name="[170]"></a>Explain</STRONG> (ARM, 144 bytes, Stack size 24 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>Explain_Answer</STRONG> (ARM, 68 bytes, Stack size 4 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Explain_Answer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>Explain_Track</STRONG> (ARM, 88 bytes, Stack size 4 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Explain_Track
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>Explain_SetPar</STRONG> (ARM, 192 bytes, Stack size 40 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Explain_SetPar &rArr; Explain_Par &rArr; FileData_BackSet &rArr; BackFacFile
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_Par
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>Explain_AmendMenum</STRONG> (ARM, 240 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_AmendMenum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>Explain_LoaderTxt</STRONG> (ARM, 92 bytes, Stack size 24 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_LoaderTxt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>Explain_LoaderTxtMenum</STRONG> (ARM, 280 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_LoaderTxtMenum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>Explain_SetPhone</STRONG> (ARM, 276 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_SetPhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>Explain_CallAnswer</STRONG> (ARM, 92 bytes, Stack size 24 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_CallAnswer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>Explain_UpdateSoftWare</STRONG> (ARM, 432 bytes, Stack size 48 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Explain_UpdateSoftWare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>Explain_LookPar</STRONG> (ARM, 200 bytes, Stack size 16 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Explain_LookPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>Explain_Contrl</STRONG> (ARM, 124 bytes, Stack size 24 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_Contrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>Explain_ConfineCall</STRONG> (ARM, 104 bytes, Stack size 24 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_ConfineCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>Explain_ConfigCentrSever</STRONG> (ARM, 188 bytes, Stack size 24 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_ConfigCentrSever
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>Explain_LookJpg</STRONG> (ARM, 360 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_LookJpg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>Explain_JpgIng</STRONG> (ARM, 56 bytes, Stack size 4 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Explain_JpgIng
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>Explain_SetVidType</STRONG> (ARM, 232 bytes, Stack size 56 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Explain_SetVidType &rArr; Explain_WorkPar
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_WorkPar
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>Explain_TabelList</STRONG> (ARM, 700 bytes, Stack size 56 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Explain_TabelList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>Explain_WorkParTimer</STRONG> (ARM, 144 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_WorkParTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>Explain_WorkParSpace</STRONG> (ARM, 88 bytes, Stack size 4 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Explain_WorkParSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>Explain_LookLog</STRONG> (ARM, 108 bytes, Stack size 24 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_LookLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>Explain_SetWaringTerm</STRONG> (ARM, 208 bytes, Stack size 56 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Explain_SetWaringTerm &rArr; Explain_WorkPar
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_WorkPar
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>Explain_SetRound</STRONG> (ARM, 520 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_SetRound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>Explain_DelRound</STRONG> (ARM, 116 bytes, Stack size 16 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Explain_DelRound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>Explain_SetRectangle</STRONG> (ARM, 540 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_SetRectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>Explain_DelRectangle</STRONG> (ARM, 116 bytes, Stack size 16 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Explain_DelRectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>Explain_SetPolygon</STRONG> (ARM, 340 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_SetPolygon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>Explain_DelPolygon</STRONG> (ARM, 116 bytes, Stack size 16 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Explain_DelPolygon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>Explain_SetRoadMap</STRONG> (ARM, 384 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_SetRoadMap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>Explain_DelRoadMap</STRONG> (ARM, 116 bytes, Stack size 16 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Explain_DelRoadMap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>Explain_Reduce</STRONG> (ARM, 104 bytes, Stack size 4 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Explain_Reduce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>Explain_Driver</STRONG> (ARM, 272 bytes, Stack size 40 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Explain_Driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>Explain_Navigation</STRONG> (ARM, 384 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_Navigation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>Explain_HandTxt</STRONG> (ARM, 80 bytes, Stack size 24 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_HandTxt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>Explain_HandAttemper</STRONG> (ARM, 268 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_HandAttemper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>Explain_AmendForm</STRONG> (ARM, 200 bytes, Stack size 32 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Explain_AmendForm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>Explain_UpLoaderForm</STRONG> (ARM, 172 bytes, Stack size 24 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_UpLoaderForm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>Explain_UpLoaderFormSuc</STRONG> (ARM, 180 bytes, Stack size 24 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_UpLoaderFormSuc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>Explain_UpLoaderFormErro</STRONG> (ARM, 40 bytes, Stack size 4 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Explain_UpLoaderFormErro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>Explain_UpLoaderCan</STRONG> (ARM, 40 bytes, Stack size 4 bytes, tz_agreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Explain_UpLoaderCan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_agreen.o(.constdata)
</UL>
<P><STRONG><a name="[37a]"></a>Explain_Par</STRONG> (ARM, 6280 bytes, Stack size 40 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Explain_Par &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_LookPar
</UL>

<P><STRONG><a name="[37b]"></a>Explain_WorkPar</STRONG> (ARM, 3156 bytes, Stack size 32 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Explain_WorkPar &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UploaderJpg2
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_Waring
</UL>

<P><STRONG><a name="[37c]"></a>Explain_WorkPar1</STRONG> (ARM, 4280 bytes, Stack size 32 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Explain_WorkPar1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UploaderPar
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpPar
</UL>

<P><STRONG><a name="[37d]"></a>Explain_WorkPar2</STRONG> (ARM, 6960 bytes, Stack size 32 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Explain_WorkPar2 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpLoaderWarning
</UL>

<P><STRONG><a name="[387]"></a>Expain_VidType2LessAddree</STRONG> (ARM, 172 bytes, Stack size 0 bytes, tz_send.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_Waring
</UL>

<P><STRONG><a name="[384]"></a>Gps2CenGps_Timer</STRONG> (ARM, 76 bytes, Stack size 16 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gps2CenGps_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps
</UL>

<P><STRONG><a name="[37e]"></a>Gps2CenGps_Height</STRONG> (ARM, 100 bytes, Stack size 16 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gps2CenGps_Height
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps
</UL>

<P><STRONG><a name="[37f]"></a>Gps2CenGps_Angle</STRONG> (ARM, 36 bytes, Stack size 16 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps
</UL>

<P><STRONG><a name="[383]"></a>Gps2CenGps_Speed</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tz_send.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps
</UL>

<P><STRONG><a name="[382]"></a>Gps2CenGps_LongHem</STRONG> (ARM, 48 bytes, Stack size 0 bytes, tz_send.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps
</UL>

<P><STRONG><a name="[381]"></a>Gps2CenGps_Latitude</STRONG> (ARM, 48 bytes, Stack size 0 bytes, tz_send.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps
</UL>

<P><STRONG><a name="[380]"></a>Gps2CenGps</STRONG> (ARM, 92 bytes, Stack size 16 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps_Latitude
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps_LongHem
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps_Speed
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps_Angle
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps_Height
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_GetSeverComPar
</UL>

<P><STRONG><a name="[385]"></a>Gps2ReduceGps_Height</STRONG> (ARM, 116 bytes, Stack size 16 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gps2ReduceGps_Height &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpLoaderReduce
</UL>

<P><STRONG><a name="[388]"></a>Explain_state</STRONG> (ARM, 144 bytes, Stack size 16 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Explain_state
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpLoaderReduce
</UL>

<P><STRONG><a name="[386]"></a>Explain_UpPar</STRONG> (ARM, 176 bytes, Stack size 32 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Explain_UpPar &rArr; Explain_WorkPar1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_WorkPar1
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpLoaderReduce
</UL>

<P><STRONG><a name="[184]"></a>Explain</STRONG> (ARM, 160 bytes, Stack size 24 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>Explain_GetSeverComPar</STRONG> (ARM, 180 bytes, Stack size 40 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Explain_GetSeverComPar &rArr; Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2CenGps
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_NoSem
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpLoaderHandMess
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpLoaderDriver
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpLoaderReduce
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_OutRoadMap
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UploaderPar
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UploaderJpg2
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UploaderJpg1
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_Waring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>Explain_Answer</STRONG> (ARM, 68 bytes, Stack size 0 bytes, tz_send.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>Explain_Menum</STRONG> (ARM, 112 bytes, Stack size 24 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_Menum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>Explain_TxtMenum</STRONG> (ARM, 132 bytes, Stack size 24 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Explain_TxtMenum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>Explain_LookPar</STRONG> (ARM, 248 bytes, Stack size 32 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Explain_LookPar &rArr; Explain_Par &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_Par
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>Explain_UpdateSoftWare</STRONG> (ARM, 24 bytes, Stack size 0 bytes, tz_send.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>Explain_Waring</STRONG> (ARM, 644 bytes, Stack size 40 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Explain_Waring &rArr; Explain_GetSeverComPar &rArr; Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_GetSeverComPar
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Expain_VidType2LessAddree
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_WorkPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>Explain_UploaderJpg1</STRONG> (ARM, 200 bytes, Stack size 24 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Explain_UploaderJpg1 &rArr; Explain_GetSeverComPar &rArr; Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_GetSeverComPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>Explain_UploaderJpg2</STRONG> (ARM, 308 bytes, Stack size 32 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Explain_UploaderJpg2 &rArr; Explain_GetSeverComPar &rArr; Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_GetSeverComPar
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_WorkPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>Explain_UploaderPar</STRONG> (ARM, 212 bytes, Stack size 32 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Explain_UploaderPar &rArr; Explain_GetSeverComPar &rArr; Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_GetSeverComPar
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_WorkPar1
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpLoaderReduce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>Explain_UpLoaderWarning</STRONG> (ARM, 200 bytes, Stack size 40 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Explain_UpLoaderWarning &rArr; Explain_WorkPar2 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_WorkPar2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>Explain_OutRoadMap</STRONG> (ARM, 132 bytes, Stack size 32 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Explain_OutRoadMap &rArr; Explain_GetSeverComPar &rArr; Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_GetSeverComPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>Explain_UpLoaderReduce</STRONG> (ARM, 1732 bytes, Stack size 360 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Explain_UpLoaderReduce &rArr; Explain_UploaderPar &rArr; Explain_GetSeverComPar &rArr; Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UploaderPar
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_GetSeverComPar
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_UpPar
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_state
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps2ReduceGps_Height
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>Explain_UpLoaderDriver</STRONG> (ARM, 184 bytes, Stack size 32 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Explain_UpLoaderDriver &rArr; Explain_GetSeverComPar &rArr; Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_GetSeverComPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>Explain_UpLoaderHandMess</STRONG> (ARM, 360 bytes, Stack size 32 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Explain_UpLoaderHandMess &rArr; Explain_GetSeverComPar &rArr; Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_GetSeverComPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>Explain_NoSem</STRONG> (ARM, 312 bytes, Stack size 40 bytes, tz_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Explain_NoSem &rArr; Explain_GetSeverComPar &rArr; Gps2CenGps &rArr; Gps2CenGps_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explain_GetSeverComPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>Explain_UpLoaderFrom</STRONG> (ARM, 36 bytes, Stack size 0 bytes, tz_send.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>Explain_OverFromErro</STRONG> (ARM, 56 bytes, Stack size 0 bytes, tz_send.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>Explain_PriceData</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tz_send.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tz_send.o(.constdata)
</UL>
<P><STRONG><a name="[389]"></a>Read1</STRONG> (ARM, 532 bytes, Stack size 48 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read1
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[21]"></a>Task</STRONG> (ARM, 188 bytes, Stack size 8 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Task &rArr; Read1
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tzv2.1.o(.text)
</UL>
<P><STRONG><a name="[185]"></a>Init</STRONG> (ARM, 160 bytes, Stack size 8 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tzv2.1.o(.constdata)
</UL>
<P><STRONG><a name="[38a]"></a>Open1</STRONG> (ARM, 192 bytes, Stack size 24 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Open1
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[186]"></a>Open</STRONG> (ARM, 80 bytes, Stack size 24 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tzv2.1.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>Close</STRONG> (ARM, 80 bytes, Stack size 16 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tzv2.1.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>Read</STRONG> (ARM, 72 bytes, Stack size 24 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read &rArr; Read1
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tzv2.1.o(.constdata)
</UL>
<P><STRONG><a name="[38c]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSig
</UL>

<P><STRONG><a name="[38b]"></a>WriteSig</STRONG> (ARM, 1088 bytes, Stack size 80 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WriteSig &rArr; GetTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
</UL>

<P><STRONG><a name="[38d]"></a>Write1</STRONG> (ARM, 256 bytes, Stack size 40 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Write1 &rArr; WriteSig &rArr; GetTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSig
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[189]"></a>Write</STRONG> (ARM, 112 bytes, Stack size 24 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Write &rArr; Write1 &rArr; WriteSig &rArr; GetTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tzv2.1.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>GetPar2ID</STRONG> (ARM, 152 bytes, Stack size 24 bytes, tzv2.1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetPar2ID &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tzv2.1.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>Init</STRONG> (ARM, 244 bytes, Stack size 0 bytes, _nandflash512.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _nandflash512.o(.constdata)
</UL>
<P><STRONG><a name="[38f]"></a>ReadData</STRONG> (ARM, 104 bytes, Stack size 0 bytes, _nandflash512.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMwrPg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeBuf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeByte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMrdPg517
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadID
</UL>

<P><STRONG><a name="[38e]"></a>WriteData</STRONG> (ARM, 108 bytes, Stack size 0 bytes, _nandflash512.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMwrPg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dzflash
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadID
</UL>

<P><STRONG><a name="[18c]"></a>ReadID</STRONG> (ARM, 544 bytes, Stack size 16 bytes, _nandflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _nandflash512.o(.constdata)
</UL>
<P><STRONG><a name="[390]"></a>dzflash</STRONG> (ARM, 608 bytes, Stack size 24 bytes, _nandflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dzflash
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMwrPg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeBuf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeByte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMrdPg517
</UL>

<P><STRONG><a name="[192]"></a>FMrdPg517</STRONG> (ARM, 188 bytes, Stack size 32 bytes, _nandflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FMrdPg517 &rArr; dzflash
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dzflash
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookBad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _nandflash512.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>LookBad</STRONG> (ARM, 168 bytes, Stack size 24 bytes, _nandflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LookBad &rArr; FMrdPg517 &rArr; dzflash
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMrdPg517
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _nandflash512.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>JugeByte</STRONG> (ARM, 264 bytes, Stack size 32 bytes, _nandflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JugeByte &rArr; dzflash
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dzflash
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _nandflash512.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>JugeBuf</STRONG> (ARM, 268 bytes, Stack size 32 bytes, _nandflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JugeBuf &rArr; dzflash
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dzflash
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _nandflash512.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>Ease</STRONG> (ARM, 684 bytes, Stack size 16 bytes, _nandflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ease
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _nandflash512.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>FMwrPg</STRONG> (ARM, 340 bytes, Stack size 32 bytes, _nandflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FMwrPg &rArr; dzflash
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dzflash
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _nandflash512.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>Init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash512.o(.constdata)
</UL>
<P><STRONG><a name="[22]"></a>CE_High</STRONG> (ARM, 40 bytes, Stack size 0 bytes, _spiflash512.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spiflash512.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>CE_Low</STRONG> (ARM, 40 bytes, Stack size 0 bytes, _spiflash512.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spiflash512.o(.text)
</UL>
<P><STRONG><a name="[194]"></a>ReadID</STRONG> (ARM, 120 bytes, Stack size 16 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash512.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>JugeByte</STRONG> (ARM, 180 bytes, Stack size 40 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JugeByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash512.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>JugeBuf</STRONG> (ARM, 180 bytes, Stack size 40 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JugeBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash512.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>ReadStatus</STRONG> (ARM, 116 bytes, Stack size 8 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>

<P><STRONG><a name="[391]"></a>ReadStatusOutTime</STRONG> (ARM, 76 bytes, Stack size 16 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOpen
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStatus
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClose
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisable
</UL>

<P><STRONG><a name="[393]"></a>WriteDisable</STRONG> (ARM, 168 bytes, Stack size 24 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteDisable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClose
</UL>

<P><STRONG><a name="[394]"></a>WriteClose</STRONG> (ARM, 84 bytes, Stack size 16 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteClose &rArr; WriteDisable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisable
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
</UL>

<P><STRONG><a name="[395]"></a>WriteStatus</STRONG> (ARM, 172 bytes, Stack size 24 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteStatus &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOpen
</UL>

<P><STRONG><a name="[396]"></a>WriteEnable</STRONG> (ARM, 168 bytes, Stack size 24 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOpen
</UL>

<P><STRONG><a name="[397]"></a>WriteOpen</STRONG> (ARM, 176 bytes, Stack size 16 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStatus
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
</UL>

<P><STRONG><a name="[197]"></a>Ease</STRONG> (ARM, 156 bytes, Stack size 24 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Ease &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOpen
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash512.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>Write</STRONG> (ARM, 192 bytes, Stack size 40 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Write &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOpen
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash512.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>Read</STRONG> (ARM, 176 bytes, Stack size 40 bytes, _spiflash512.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash512.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>CreatBad</STRONG> (ARM, 220 bytes, Stack size 40 bytes, _flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = CreatBad
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _flash.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>FormatFlash</STRONG> (ARM, 512 bytes, Stack size 40 bytes, _flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = FormatFlash &rArr; CreatBad
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatBad
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _flash.o(.constdata)
</UL>
<P><STRONG><a name="[398]"></a>CompareBuf</STRONG> (ARM, 68 bytes, Stack size 4 bytes, _flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CompareBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[19a]"></a>Open</STRONG> (ARM, 240 bytes, Stack size 32 bytes, _flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Open &rArr; FormatFlash &rArr; CreatBad
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBuf
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatFlash
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _flash.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>JugeFlash</STRONG> (ARM, 188 bytes, Stack size 48 bytes, _flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = JugeFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _flash.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>WriteFlash</STRONG> (ARM, 248 bytes, Stack size 48 bytes, _flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = WriteFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _flash.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>ReadFlash</STRONG> (ARM, 192 bytes, Stack size 48 bytes, _flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ReadFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _flash.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>EaseFlash</STRONG> (ARM, 60 bytes, Stack size 16 bytes, _flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = EaseFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _flash.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>Open</STRONG> (ARM, 120 bytes, Stack size 8 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwflashlgc.o(.constdata)
</UL>
<P><STRONG><a name="[399]"></a>Lgc2Phy</STRONG> (ARM, 212 bytes, Stack size 24 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lgc2Phy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[1a2]"></a>Read</STRONG> (ARM, 356 bytes, Stack size 40 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Read &rArr; Lgc2Phy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lgc2Phy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwflashlgc.o(.constdata)
</UL>
<P><STRONG><a name="[39b]"></a>MoveByte</STRONG> (ARM, 44 bytes, Stack size 0 bytes, _rwflashlgc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBlock
</UL>

<P><STRONG><a name="[39a]"></a>CopyBlock</STRONG> (ARM, 584 bytes, Stack size 64 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CopyBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
</UL>

<P><STRONG><a name="[39c]"></a>WriteBlock</STRONG> (ARM, 540 bytes, Stack size 48 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = WriteBlock &rArr; CopyBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBlock
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lgc2Phy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[1a3]"></a>Write</STRONG> (ARM, 268 bytes, Stack size 32 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Write &rArr; WriteBlock &rArr; CopyBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwflashlgc.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>Ease</STRONG> (ARM, 212 bytes, Stack size 16 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Ease &rArr; Lgc2Phy
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lgc2Phy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwflashlgc.o(.constdata)
</UL>
<P><STRONG><a name="[39d]"></a>BackFacFile</STRONG> (ARM, 204 bytes, Stack size 16 bytes, _filedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BackFacFile
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileData_BackSet
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileData_CheckFile
</UL>

<P><STRONG><a name="[1a5]"></a>ReadFlow</STRONG> (ARM, 236 bytes, Stack size 32 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadFlow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[3a0]"></a>SendReduceData</STRONG> (ARM, 280 bytes, Stack size 104 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SendReduceData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow
</UL>

<P><STRONG><a name="[1a7]"></a>ReadDataFlow</STRONG> (ARM, 92 bytes, Stack size 16 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadDataFlow
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>ReadParTable</STRONG> (ARM, 100 bytes, Stack size 288 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ReadParTable &rArr; ReadDataFlow
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFlow
</UL>
<BR>[Address Reference Count : 2]<UL><LI> takedata.o(.constdata)
<LI> takedata.o(.text)
</UL>
<P><STRONG><a name="[39f]"></a>JugeReduceLen</STRONG> (ARM, 168 bytes, Stack size 600 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = JugeReduceLen &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow
</UL>

<P><STRONG><a name="[3a1]"></a>JugeReduceData</STRONG> (ARM, 220 bytes, Stack size 360 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = JugeReduceData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow
</UL>

<P><STRONG><a name="[1a6]"></a>WriteFlow</STRONG> (ARM, 672 bytes, Stack size 384 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = WriteFlow &rArr; JugeReduceLen &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeReduceData
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeReduceLen
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReduceData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>GetFlowWaringType</STRONG> (ARM, 100 bytes, Stack size 32 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetFlowWaringType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>ReadSpace</STRONG> (ARM, 92 bytes, Stack size 24 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>AddSpace</STRONG> (ARM, 332 bytes, Stack size 64 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AddSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>GetPhonesSize</STRONG> (ARM, 244 bytes, Stack size 536 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = GetPhonesSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>GetPhoneCut</STRONG> (ARM, 380 bytes, Stack size 552 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = GetPhoneCut
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>WritePhone</STRONG> (ARM, 204 bytes, Stack size 32 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WritePhone &rArr; OSMboxDel &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>ClearState</STRONG> (ARM, 168 bytes, Stack size 104 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ClearState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>GetState</STRONG> (ARM, 148 bytes, Stack size 104 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>SetState</STRONG> (ARM, 216 bytes, Stack size 104 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>GetAreaData</STRONG> (ARM, 360 bytes, Stack size 328 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GetAreaData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[3a2]"></a>JugeID</STRONG> (ARM, 72 bytes, Stack size 0 bytes, takedata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAear
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccessAear
</UL>

<P><STRONG><a name="[1b2]"></a>AccessAear</STRONG> (ARM, 484 bytes, Stack size 328 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AccessAear
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>DelAear</STRONG> (ARM, 276 bytes, Stack size 320 bytes, takedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DelAear
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> takedata.o(.constdata)
</UL>
<P><STRONG><a name="[3b4]"></a>GetPar</STRONG> (ARM, 5292 bytes, Stack size 408 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = GetPar
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookPar
</UL>

<P><STRONG><a name="[3a3]"></a>Send</STRONG> (ARM, 168 bytes, Stack size 24 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Send
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadJpg
</UL>

<P><STRONG><a name="[3a4]"></a>LoadJpg</STRONG> (ARM, 268 bytes, Stack size 120 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoadJpg &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[3a5]"></a>SendData</STRONG> (ARM, 304 bytes, Stack size 24 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SendData &rArr; LoadJpg &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadJpg
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow2
</UL>

<P><STRONG><a name="[3a7]"></a>WriteFlow1</STRONG> (ARM, 200 bytes, Stack size 128 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriteFlow1
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow2
</UL>

<P><STRONG><a name="[3a6]"></a>WriteFlow2</STRONG> (ARM, 228 bytes, Stack size 24 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WriteFlow2 &rArr; SendData &rArr; LoadJpg &rArr; Send
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow1
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[3a9]"></a>UpLoaderDriverExplain</STRONG> (ARM, 336 bytes, Stack size 376 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = UpLoaderDriverExplain
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemDriver
</UL>

<P><STRONG><a name="[3a8]"></a>NoSemDriver</STRONG> (ARM, 780 bytes, Stack size 56 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = NoSemDriver &rArr; UpLoaderDriverExplain
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoaderDriverExplain
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemSend1
</UL>

<P><STRONG><a name="[3aa]"></a>LoaderJpgData</STRONG> (ARM, 464 bytes, Stack size 320 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = LoaderJpgData
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoaderJpHistory
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemJpgData
</UL>

<P><STRONG><a name="[3ab]"></a>NoSemJpgData</STRONG> (ARM, 680 bytes, Stack size 152 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = NoSemJpgData &rArr; LoaderJpgData
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoaderJpgData
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemSend1
</UL>

<P><STRONG><a name="[3ad]"></a>UpLoaderReduce</STRONG> (ARM, 184 bytes, Stack size 96 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UpLoaderReduce
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoaderLog_Par
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemReduce
</UL>

<P><STRONG><a name="[3ac]"></a>NoSemReduce</STRONG> (ARM, 844 bytes, Stack size 160 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = NoSemReduce &rArr; UpLoaderReduce
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoaderReduce
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemSend1
</UL>

<P><STRONG><a name="[3af]"></a>WorkParDataExpalin</STRONG> (ARM, 148 bytes, Stack size 544 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = WorkParDataExpalin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoaderLog_Par
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemWorkPar
</UL>

<P><STRONG><a name="[3ae]"></a>NoSemWorkPar</STRONG> (ARM, 832 bytes, Stack size 160 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = NoSemWorkPar &rArr; WorkParDataExpalin
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkParDataExpalin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemSend1
</UL>

<P><STRONG><a name="[3b1]"></a>TrackDataExplain</STRONG> (ARM, 92 bytes, Stack size 288 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = TrackDataExplain
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoaderLog_Par
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemTrack
</UL>

<P><STRONG><a name="[3b0]"></a>NoSemTrack</STRONG> (ARM, 832 bytes, Stack size 160 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = NoSemTrack &rArr; TrackDataExplain
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackDataExplain
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemSend1
</UL>

<P><STRONG><a name="[3b2]"></a>NoSemSend1</STRONG> (ARM, 132 bytes, Stack size 16 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = NoSemSend1 &rArr; NoSemWorkPar &rArr; WorkParDataExpalin
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemTrack
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemWorkPar
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemReduce
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemJpgData
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[25]"></a>Task</STRONG> (ARM, 156 bytes, Stack size 8 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = Task &rArr; NoSemSend1 &rArr; NoSemWorkPar &rArr; WorkParDataExpalin
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemSend1
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow2
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.text)
</UL>
<P><STRONG><a name="[1c4]"></a>Init</STRONG> (ARM, 156 bytes, Stack size 8 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[3b3]"></a>SendLogin</STRONG> (ARM, 32 bytes, Stack size 8 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendLogin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlow
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoSemSend
</UL>

<P><STRONG><a name="[1c5]"></a>NoSemSend</STRONG> (ARM, 164 bytes, Stack size 16 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NoSemSend &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLogin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>WriteFlow</STRONG> (ARM, 216 bytes, Stack size 40 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteFlow &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLogin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>WriteCommand</STRONG> (ARM, 208 bytes, Stack size 40 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteCommand &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLogin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>Answer</STRONG> (ARM, 168 bytes, Stack size 48 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Answer &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>LogInfor</STRONG> (ARM, 56 bytes, Stack size 16 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LogInfor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>Orientation</STRONG> (ARM, 116 bytes, Stack size 296 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Orientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>Menum</STRONG> (ARM, 56 bytes, Stack size 16 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Menum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>TxtMenum</STRONG> (ARM, 56 bytes, Stack size 16 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TxtMenum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>LookPar</STRONG> (ARM, 156 bytes, Stack size 32 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LookPar &rArr; GetPar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>UpdateSoftWare</STRONG> (ARM, 120 bytes, Stack size 16 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateSoftWare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>Waring</STRONG> (ARM, 464 bytes, Stack size 304 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Waring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>UploaderJpg1</STRONG> (ARM, 396 bytes, Stack size 312 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = UploaderJpg1
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[3b5]"></a>UploaderJpg2Sig</STRONG> (ARM, 420 bytes, Stack size 312 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = UploaderJpg2Sig
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploaderJpg2
</UL>

<P><STRONG><a name="[1bc]"></a>UploaderJpg2</STRONG> (ARM, 448 bytes, Stack size 56 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = UploaderJpg2 &rArr; UploaderJpg2Sig
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploaderJpg2Sig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>UploaderPar</STRONG> (ARM, 148 bytes, Stack size 296 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = UploaderPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[3b6]"></a>UpLoaderJpHistory</STRONG> (ARM, 196 bytes, Stack size 48 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = UpLoaderJpHistory &rArr; LoaderJpgData
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoaderJpgData
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploaderLog
</UL>

<P><STRONG><a name="[3b7]"></a>UpLoaderLog_Par</STRONG> (ARM, 712 bytes, Stack size 72 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = UpLoaderLog_Par &rArr; WorkParDataExpalin
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackDataExplain
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkParDataExpalin
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoaderReduce
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploaderLog
</UL>

<P><STRONG><a name="[1be]"></a>UploaderLog</STRONG> (ARM, 64 bytes, Stack size 16 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = UploaderLog &rArr; UpLoaderLog_Par &rArr; WorkParDataExpalin
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoaderLog_Par
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoaderJpHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>UpLoaderWarning</STRONG> (ARM, 104 bytes, Stack size 24 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UpLoaderWarning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>OutRoadMap</STRONG> (ARM, 184 bytes, Stack size 328 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = OutRoadMap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>UpLoaderReduce1</STRONG> (ARM, 96 bytes, Stack size 24 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UpLoaderReduce1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>UpLoaderDriver</STRONG> (ARM, 348 bytes, Stack size 304 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UpLoaderDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>UpLoaderHandMess</STRONG> (ARM, 172 bytes, Stack size 24 bytes, appsendagreeon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UpLoaderHandMess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appsendagreeon.o(.constdata)
</UL>
<P><STRONG><a name="[3b8]"></a>SetPar</STRONG> (ARM, 5920 bytes, Stack size 400 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SetPar
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPar1
</UL>

<P><STRONG><a name="[1c9]"></a>AgreeData</STRONG> (ARM, 144 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AgreeData
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>Orientation</STRONG> (ARM, 80 bytes, Stack size 32 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Orientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>Track</STRONG> (ARM, 148 bytes, Stack size 120 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Track
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>SetPar1</STRONG> (ARM, 328 bytes, Stack size 24 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SetPar1 &rArr; SetPar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>UnlockWaring</STRONG> (ARM, 160 bytes, Stack size 120 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UnlockWaring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>AmendMenum</STRONG> (ARM, 316 bytes, Stack size 72 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = AmendMenum
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>LoaderTxt</STRONG> (ARM, 276 bytes, Stack size 256 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LoaderTxt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>LoaderTxtMenum</STRONG> (ARM, 52 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoaderTxtMenum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>SetPhone</STRONG> (ARM, 660 bytes, Stack size 88 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SetPhone
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>CallAnswer</STRONG> (ARM, 284 bytes, Stack size 64 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CallAnswer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>SoftWareState</STRONG> (ARM, 132 bytes, Stack size 24 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SoftWareState
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>DownLoaderOver</STRONG> (ARM, 172 bytes, Stack size 40 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DownLoaderOver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.text)
</UL>
<P><STRONG><a name="[1d3]"></a>UpdateSoftWare</STRONG> (ARM, 244 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UpdateSoftWare &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>LookPar</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LookPar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>Contrl</STRONG> (ARM, 436 bytes, Stack size 120 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Contrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>ConfineCall</STRONG> (ARM, 148 bytes, Stack size 120 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ConfineCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>ConfigCentrSever</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConfigCentrSever
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>Activation</STRONG> (ARM, 4 bytes, Stack size 0 bytes, appgprs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>LookJpg</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LookJpg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>JpgIng</STRONG> (ARM, 4 bytes, Stack size 0 bytes, appgprs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>SetVidType</STRONG> (ARM, 132 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetVidType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>TabelList</STRONG> (ARM, 4 bytes, Stack size 0 bytes, appgprs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[3b9]"></a>GetLessAdree</STRONG> (ARM, 456 bytes, Stack size 296 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GetLessAdree
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookWorkPar
</UL>

<P><STRONG><a name="[1dd]"></a>LookWorkPar</STRONG> (ARM, 264 bytes, Stack size 320 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = LookWorkPar &rArr; GetLessAdree
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLessAdree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>WorkParTimer</STRONG> (ARM, 80 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WorkParTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>WorkParSpace</STRONG> (ARM, 148 bytes, Stack size 120 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WorkParSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>LookLog</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LookLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>SetWaringTerm</STRONG> (ARM, 80 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetWaringTerm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>LookWaringTerm</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LookWaringTerm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>SetRound</STRONG> (ARM, 160 bytes, Stack size 24 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetRound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>DelRound</STRONG> (ARM, 112 bytes, Stack size 24 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DelRound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>SetRectangle</STRONG> (ARM, 156 bytes, Stack size 24 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetRectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>DelRectangle</STRONG> (ARM, 112 bytes, Stack size 24 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DelRectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>SetPolygon</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetPolygon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1e8]"></a>DelPolygon</STRONG> (ARM, 112 bytes, Stack size 24 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DelPolygon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>SetRoadMap</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetRoadMap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>DelRoadMap</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DelRoadMap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>Reduce</STRONG> (ARM, 140 bytes, Stack size 96 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Reduce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[3ba]"></a>GetDriver</STRONG> (ARM, 296 bytes, Stack size 272 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GetDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver
</UL>

<P><STRONG><a name="[1ec]"></a>Driver</STRONG> (ARM, 532 bytes, Stack size 88 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Driver &rArr; GetDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>Navigation</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Navigation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>HandTxt</STRONG> (ARM, 424 bytes, Stack size 272 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HandTxt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>HandAttemper</STRONG> (ARM, 596 bytes, Stack size 304 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HandAttemper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>AmendForm</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AmendForm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>UpLoaderForm</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpLoaderForm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>UpLoaderFormSuc</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpLoaderFormSuc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>UpLoaderFormErro</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpLoaderFormErro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>UpLoaderCan</STRONG> (ARM, 48 bytes, Stack size 16 bytes, appgprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpLoaderCan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appgprs.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>Init</STRONG> (ARM, 1100 bytes, Stack size 464 bytes, opensensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> opensensor.o(.constdata)
</UL>
<P><STRONG><a name="[3bc]"></a>GetTimeAdd</STRONG> (ARM, 488 bytes, Stack size 40 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
</UL>

<P><STRONG><a name="[3bb]"></a>GetData</STRONG> (ARM, 628 bytes, Stack size 240 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GetData &rArr; GetTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccOper
</UL>

<P><STRONG><a name="[3c1]"></a>JugeTimerPar</STRONG> (ARM, 196 bytes, Stack size 16 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JugeTimerPar
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccOper
</UL>

<P><STRONG><a name="[3c0]"></a>AccClose</STRONG> (ARM, 588 bytes, Stack size 16 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AccClose
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccOper
</UL>

<P><STRONG><a name="[3be]"></a>AccTimer</STRONG> (ARM, 120 bytes, Stack size 16 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AccTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccOpen
</UL>

<P><STRONG><a name="[3bd]"></a>AccOpen</STRONG> (ARM, 236 bytes, Stack size 16 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AccOpen &rArr; AccTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccOper
</UL>

<P><STRONG><a name="[3bf]"></a>AccStateChange</STRONG> (ARM, 324 bytes, Stack size 120 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AccStateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccOper
</UL>

<P><STRONG><a name="[1f6]"></a>AccOper</STRONG> (ARM, 232 bytes, Stack size 16 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = AccOper &rArr; GetData &rArr; GetTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccStateChange
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccOpen
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccClose
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeTimerPar
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accoper.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>OpenGps</STRONG> (ARM, 28 bytes, Stack size 8 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenGps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accoper.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>OpenGprs</STRONG> (ARM, 28 bytes, Stack size 8 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenGprs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accoper.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>CloseGps</STRONG> (ARM, 28 bytes, Stack size 8 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseGps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accoper.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>CloseGprs</STRONG> (ARM, 28 bytes, Stack size 8 bytes, accoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseGprs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accoper.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>Init</STRONG> (ARM, 216 bytes, Stack size 32 bytes, appagreedatasensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appagreedatasensor.o(.constdata)
</UL>
<P><STRONG><a name="[3c8]"></a>HelpWaring</STRONG> (ARM, 328 bytes, Stack size 120 bytes, appagreedatasensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HelpWaring
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
</UL>

<P><STRONG><a name="[3c4]"></a>JugeVo</STRONG> (ARM, 536 bytes, Stack size 120 bytes, appagreedatasensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = JugeVo
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoCheck
</UL>

<P><STRONG><a name="[3c3]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, appagreedatasensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoCheck
</UL>

<P><STRONG><a name="[3c2]"></a>VoCheck</STRONG> (ARM, 96 bytes, Stack size 24 bytes, appagreedatasensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VoCheck &rArr; JugeVo
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeVo
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
</UL>

<P><STRONG><a name="[3c7]"></a>Jugeuint16</STRONG> (ARM, 84 bytes, Stack size 0 bytes, appagreedatasensor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
</UL>

<P><STRONG><a name="[3c6]"></a>Jugeint32</STRONG> (ARM, 84 bytes, Stack size 0 bytes, appagreedatasensor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
</UL>

<P><STRONG><a name="[3c5]"></a>Jugeuint8</STRONG> (ARM, 84 bytes, Stack size 0 bytes, appagreedatasensor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
</UL>

<P><STRONG><a name="[1fc]"></a>GetData</STRONG> (ARM, 252 bytes, Stack size 24 bytes, appagreedatasensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GetData &rArr; VoCheck &rArr; JugeVo
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jugeuint8
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jugeint32
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jugeuint16
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoCheck
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HelpWaring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appagreedatasensor.o(.constdata)
</UL>
<P><STRONG><a name="[1fd]"></a>InitSpace</STRONG> (ARM, 356 bytes, Stack size 128 bytes, space.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = InitSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> space.o(.constdata)
</UL>
<P><STRONG><a name="[3ca]"></a>JugeSpeed</STRONG> (ARM, 608 bytes, Stack size 120 bytes, space.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = JugeSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGps
</UL>

<P><STRONG><a name="[3c9]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, space.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGps
</UL>

<P><STRONG><a name="[1fe]"></a>GetGps</STRONG> (ARM, 520 bytes, Stack size 64 bytes, space.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetGps &rArr; JugeSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Space_WorkParSpace
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Space_Track
</UL>
<BR>[Address Reference Count : 1]<UL><LI> space.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>Space_Track</STRONG> (ARM, 196 bytes, Stack size 120 bytes, space.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Space_Track &rArr; GetGps &rArr; JugeSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> space.o(.constdata)
</UL>
<P><STRONG><a name="[200]"></a>Space_WorkParSpace</STRONG> (ARM, 196 bytes, Stack size 120 bytes, space.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Space_WorkParSpace &rArr; GetGps &rArr; JugeSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> space.o(.constdata)
</UL>
<P><STRONG><a name="[3cc]"></a>Warning</STRONG> (ARM, 388 bytes, Stack size 24 bytes, jugeoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Warning
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeAppair
</UL>

<P><STRONG><a name="[3cb]"></a>JugeAppair</STRONG> (ARM, 304 bytes, Stack size 352 bytes, jugeoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = JugeAppair &rArr; Warning
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Warning
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>

<P><STRONG><a name="[201]"></a>Juge</STRONG> (ARM, 176 bytes, Stack size 16 bytes, jugeoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Juge &rArr; JugeAppair &rArr; Warning
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeAppair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jugeoper.o(.constdata)
</UL>
<P><STRONG><a name="[3d1]"></a>JugeGpsState</STRONG> (ARM, 176 bytes, Stack size 16 bytes, warningupate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JugeGpsState
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[3cf]"></a>LoadWaringJugeWorkParState</STRONG> (ARM, 148 bytes, Stack size 0 bytes, warningupate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeWorkPar
</UL>

<P><STRONG><a name="[3ce]"></a>LoadWaringJugeWorkPar</STRONG> (ARM, 80 bytes, Stack size 0 bytes, warningupate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeWorkPar
</UL>

<P><STRONG><a name="[3d0]"></a>SendWarning</STRONG> (ARM, 240 bytes, Stack size 16 bytes, warningupate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendWarning
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeWorkPar
</UL>

<P><STRONG><a name="[3cd]"></a>JugeWorkPar</STRONG> (ARM, 300 bytes, Stack size 320 bytes, warningupate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = JugeWorkPar &rArr; SendWarning
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWarning
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadWaringJugeWorkPar
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadWaringJugeWorkParState
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[28]"></a>Task</STRONG> (ARM, 28 bytes, Stack size 0 bytes, warningupate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Task &rArr; JugeWorkPar &rArr; SendWarning
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeWorkPar
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeGpsState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> warningupate.o(.text)
</UL>
<P><STRONG><a name="[202]"></a>Init</STRONG> (ARM, 40 bytes, Stack size 8 bytes, warningupate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> warningupate.o(.constdata)
</UL>
<P><STRONG><a name="[209]"></a>Init</STRONG> (ARM, 60 bytes, Stack size 8 bytes, displayoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displayoper.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>GetData</STRONG> (ARM, 156 bytes, Stack size 24 bytes, displayoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displayoper.o(.constdata)
</UL>
<P><STRONG><a name="[3d2]"></a>Answer</STRONG> (ARM, 116 bytes, Stack size 32 bytes, displayoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Answer
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voic
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPar
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Order_Phone
</UL>

<P><STRONG><a name="[203]"></a>Order_Phone</STRONG> (ARM, 440 bytes, Stack size 40 bytes, displayoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Order_Phone &rArr; Answer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displayoper.o(.constdata)
</UL>
<P><STRONG><a name="[3d3]"></a>GetCentrIP</STRONG> (ARM, 144 bytes, Stack size 112 bytes, displayoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetCentrIP
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeePar
</UL>

<P><STRONG><a name="[204]"></a>SeePar</STRONG> (ARM, 844 bytes, Stack size 992 bytes, displayoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = SeePar &rArr; GetCentrIP
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCentrIP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displayoper.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>SetPar</STRONG> (ARM, 692 bytes, Stack size 552 bytes, displayoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = SetPar &rArr; Answer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displayoper.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>Log</STRONG> (ARM, 576 bytes, Stack size 88 bytes, displayoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Log
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displayoper.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>Voic</STRONG> (ARM, 80 bytes, Stack size 16 bytes, displayoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Voic &rArr; Answer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displayoper.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>LCDRef</STRONG> (ARM, 632 bytes, Stack size 200 bytes, displayoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LCDRef
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displayoper.o(.constdata)
</UL>
<P><STRONG><a name="[20b]"></a>Init</STRONG> (ARM, 216 bytes, Stack size 40 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messageandphone.o(.constdata)
</UL>
<P><STRONG><a name="[3d4]"></a>AgreePhone</STRONG> (ARM, 216 bytes, Stack size 48 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AgreePhone
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptFunMostPhone
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptFunNewPhone
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptFunHupWork
</UL>

<P><STRONG><a name="[20d]"></a>ptFunHupWork</STRONG> (ARM, 28 bytes, Stack size 8 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ptFunHupWork &rArr; AgreePhone
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreePhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messageandphone.o(.constdata)
</UL>
<P><STRONG><a name="[20f]"></a>NewMessage</STRONG> (ARM, 588 bytes, Stack size 488 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = NewMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messageandphone.o(.constdata)
</UL>
<P><STRONG><a name="[3d8]"></a>JugePhone</STRONG> (ARM, 208 bytes, Stack size 120 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = JugePhone
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptFunNewPhone
</UL>

<P><STRONG><a name="[3d7]"></a>JugeDriver</STRONG> (ARM, 1540 bytes, Stack size 432 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = JugeDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptFunNewPhone
</UL>

<P><STRONG><a name="[3d6]"></a>ConsPhone</STRONG> (ARM, 452 bytes, Stack size 160 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ConsPhone
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptFunNewPhone
</UL>

<P><STRONG><a name="[3d5]"></a>BasicPhone</STRONG> (ARM, 244 bytes, Stack size 48 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BasicPhone
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptFunNewPhone
</UL>

<P><STRONG><a name="[20c]"></a>ptFunNewPhone</STRONG> (ARM, 404 bytes, Stack size 16 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ptFunNewPhone &rArr; JugeDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BasicPhone
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsPhone
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeDriver
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugePhone
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreePhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messageandphone.o(.constdata)
</UL>
<P><STRONG><a name="[20e]"></a>ptFunMostPhone</STRONG> (ARM, 116 bytes, Stack size 8 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ptFunMostPhone &rArr; AgreePhone
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AgreePhone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messageandphone.o(.constdata)
</UL>
<P><STRONG><a name="[210]"></a>CloseCall</STRONG> (ARM, 56 bytes, Stack size 16 bytes, messageandphone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CloseCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messageandphone.o(.constdata)
</UL>
<P><STRONG><a name="[3d9]"></a>OpenSms</STRONG> (ARM, 296 bytes, Stack size 344 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = OpenSms &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[3e3]"></a>CreartAgreeOn</STRONG> (ARM, 272 bytes, Stack size 448 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = CreartAgreeOn
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
</UL>

<P><STRONG><a name="[3e2]"></a>CreatDev</STRONG> (ARM, 168 bytes, Stack size 32 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CreatDev
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
</UL>

<P><STRONG><a name="[3e1]"></a>OpenSev</STRONG> (ARM, 320 bytes, Stack size 520 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = OpenSev
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
</UL>

<P><STRONG><a name="[3db]"></a>GetTimeAdd</STRONG> (ARM, 244 bytes, Stack size 24 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevPar
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevParSigle
</UL>

<P><STRONG><a name="[3da]"></a>GetSevParSigle</STRONG> (ARM, 568 bytes, Stack size 168 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GetSevParSigle &rArr; GetTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevPar
</UL>

<P><STRONG><a name="[3dc]"></a>GetSevPar</STRONG> (ARM, 212 bytes, Stack size 72 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GetSevPar &rArr; GetSevParSigle &rArr; GetTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevParSigle
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
</UL>

<P><STRONG><a name="[3de]"></a>LoginUDP</STRONG> (ARM, 224 bytes, Stack size 112 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LoginUDP
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Login
</UL>

<P><STRONG><a name="[3dd]"></a>Dev_Login</STRONG> (ARM, 112 bytes, Stack size 376 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Dev_Login &rArr; LoginUDP
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoginUDP
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
</UL>

<P><STRONG><a name="[3e0]"></a>Dev_APN</STRONG> (ARM, 164 bytes, Stack size 432 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Dev_APN
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
</UL>

<P><STRONG><a name="[3df]"></a>Login</STRONG> (ARM, 212 bytes, Stack size 64 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Login &rArr; OpenSev
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_APN
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Login
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevPar
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSev
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreatDev
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreartAgreeOn
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[3e4]"></a>CloseSms</STRONG> (ARM, 88 bytes, Stack size 8 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseSms
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[29]"></a>Task</STRONG> (ARM, 652 bytes, Stack size 8 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Task &rArr; Login &rArr; OpenSev
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseSms
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenSms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logonserver.o(.text)
</UL>
<P><STRONG><a name="[211]"></a>Init</STRONG> (ARM, 204 bytes, Stack size 8 bytes, logonserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logonserver.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>Init</STRONG> (ARM, 212 bytes, Stack size 8 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSMboxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openandclose.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>OpenGps</STRONG> (ARM, 116 bytes, Stack size 24 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OpenGps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openandclose.o(.constdata)
</UL>
<P><STRONG><a name="[217]"></a>CloseGps</STRONG> (ARM, 140 bytes, Stack size 8 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseGps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openandclose.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>LogSucOper</STRONG> (ARM, 160 bytes, Stack size 8 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LogSucOper &rArr; OpenGprs &rArr; ClearSem &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGprs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openandclose.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>OpenGprsNo</STRONG> (ARM, 64 bytes, Stack size 8 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OpenGprsNo &rArr; OpenGprs &rArr; ClearSem &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGprs
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeLogin
</UL>
<BR>[Address Reference Count : 2]<UL><LI> openandclose.o(.constdata)
<LI> openandclose.o(.text)
</UL>
<P><STRONG><a name="[3e5]"></a>ClearSem</STRONG> (ARM, 88 bytes, Stack size 16 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearSem &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseGprs
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGprs
</UL>

<P><STRONG><a name="[218]"></a>OpenGprs</STRONG> (ARM, 192 bytes, Stack size 8 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OpenGprs &rArr; ClearSem &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGprsNo
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogSucOper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openandclose.o(.constdata)
</UL>
<P><STRONG><a name="[219]"></a>CloseGprs</STRONG> (ARM, 128 bytes, Stack size 8 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CloseGprs &rArr; ClearSem &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openandclose.o(.constdata)
</UL>
<P><STRONG><a name="[212]"></a>ClearTimer</STRONG> (ARM, 20 bytes, Stack size 0 bytes, openandclose.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> openandclose.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>OpenUart</STRONG> (ARM, 108 bytes, Stack size 40 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpenUart &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openandclose.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>ChargeLogin</STRONG> (ARM, 48 bytes, Stack size 16 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ChargeLogin &rArr; OpenGprsNo &rArr; OpenGprs &rArr; ClearSem &rArr; OSMboxPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenGprsNo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openandclose.o(.constdata)
</UL>
<P><STRONG><a name="[214]"></a>ChargeLoadDev</STRONG> (ARM, 56 bytes, Stack size 16 bytes, openandclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChargeLoadDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openandclose.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>Task</STRONG> (ARM, 876 bytes, Stack size 8 bytes, updatesoftware.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Task &rArr; OSQPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> updatesoftware.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>Init</STRONG> (ARM, 104 bytes, Stack size 8 bytes, updatesoftware.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> updatesoftware.o(.data)
</UL>
<P><STRONG><a name="[3e7]"></a>MODEM_Dly100ms</STRONG> (ARM, 128 bytes, Stack size 4 bytes, _init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MODEM_Dly100ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLed
</UL>

<P><STRONG><a name="[3e6]"></a>CheckLed</STRONG> (ARM, 452 bytes, Stack size 8 bytes, _init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckLed &rArr; MODEM_Dly100ms
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_Dly100ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[2d]"></a>Init</STRONG> (ARM, 440 bytes, Stack size 16 bytes, _init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Init &rArr; FileData_CheckFile &rArr; BackFacFile
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileData_CheckFile
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _init.o(.text)
</UL>
<P><STRONG><a name="[3f4]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[3f3]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[3f2]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[3f5]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[41b]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[411]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[42a]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[420]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3f0]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
