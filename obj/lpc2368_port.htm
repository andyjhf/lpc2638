<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\lpc2368_port.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\lpc2368_port.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 942]: Last Updated: Mon Aug 03 11:36:36 2009
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
CreateRecoder1 &rArr; CreateRecoder &rArr; LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c80e08]">Reset_Handler</a>
 <LI><a href="#[c80e50]">__user_initial_stackheap</a>
 <LI><a href="#[c817d8]">IRQ_Handler</a>
 <LI><a href="#[c81ea0]">Timer0_Handler</a>
 <LI><a href="#[c81e58]">Uart0_Handler</a>
 <LI><a href="#[c81e10]">Uart1_Handler</a>
 <LI><a href="#[c81dc8]">Uart2_Handler</a>
 <LI><a href="#[c81d80]">Uart3_Handler</a>
 <LI><a href="#[c81f30]">CAN_Handler</a>
 <LI><a href="#[c80dc0]">SoftwareInterrupt</a>
 <LI><a href="#[c81748]">OSIntCtxSw</a>
 <LI><a href="#[c7ef50]">__OSStartHighRdy</a>
 <LI><a href="#[c81048]">Undef_Handler</a>
 <LI><a href="#[c81000]">PAbt_Handler</a>
 <LI><a href="#[c80fb8]">DAbt_Handler</a>
 <LI><a href="#[c80f70]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c81048]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c81048]">Undef_Handler</a><BR>
 <LI><a href="#[c81000]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c81000]">PAbt_Handler</a><BR>
 <LI><a href="#[c80fb8]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c80fb8]">DAbt_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1051000]">Init</a>
 <LI><a href="#[1050ee0]">Open</a>
 <LI><a href="#[1050e08]">Close</a>
 <LI><a href="#[1050c58]">Write</a>
 <LI><a href="#[1050d30]">Read</a>
 <LI><a href="#[c80e08]">Reset_Handler</a>
 <LI><a href="#[c81048]">Undef_Handler</a>
 <LI><a href="#[c80dc0]">SoftwareInterrupt</a>
 <LI><a href="#[c81000]">PAbt_Handler</a>
 <LI><a href="#[c80fb8]">DAbt_Handler</a>
 <LI><a href="#[c80f70]">FIQ_Handler</a>
 <LI><a href="#[15068c0]">__main</a>
 <LI><a href="#[1502d48]">__ARM_get_argv</a>
 <LI><a href="#[c81ea0]">Timer0_Handler</a>
 <LI><a href="#[c81e58]">Uart0_Handler</a>
 <LI><a href="#[c81e10]">Uart1_Handler</a>
 <LI><a href="#[c81dc8]">Uart2_Handler</a>
 <LI><a href="#[c81d80]">Uart3_Handler</a>
 <LI><a href="#[c81f30]">CAN_Handler</a>
 <LI><a href="#[1047718]">CE_High</a>
 <LI><a href="#[10476d0]">CE_Low</a>
 <LI><a href="#[1398770]">main</a>
 <LI><a href="#[1503ab0]">__I_use_semihosting</a>
 <LI><a href="#[c81748]">OSIntCtxSw</a>
 <LI><a href="#[c81748]">OSIntCtxSw</a>
 <LI><a href="#[c7ef50]">__OSStartHighRdy</a>
 <LI><a href="#[c757a8]">nand_calculate_ecc</a>
 <LI><a href="#[c75760]">nand_correct_data</a>
 <LI><a href="#[c75718]">Crc</a>
 <LI><a href="#[c756d0]">CheckSum</a>
 <LI><a href="#[c75688]">CheckAdd</a>
 <LI><a href="#[10562e0]">Asc2Bcd</a>
 <LI><a href="#[1056298]">Bcd2Asc</a>
 <LI><a href="#[1056250]">Asc2Algorism</a>
 <LI><a href="#[1056208]">Algorism2Asc</a>
 <LI><a href="#[1056178]">Asc2HexBuf</a>
 <LI><a href="#[10560e8]">HexBuf2Asc</a>
 <LI><a href="#[10560a0]">Asc2Hex</a>
 <LI><a href="#[1056058]">Hex2Asc</a>
 <LI><a href="#[1055ea8]">Asc2Float</a>
 <LI><a href="#[1056010]">Bcd2Hex</a>
 <LI><a href="#[1055fc8]">Hex2Bcd</a>
 <LI><a href="#[1055f80]">JugeAscBcd</a>
 <LI><a href="#[1055ef0]">JugeAscHex</a>
 <LI><a href="#[1055e60]">JugeAscFloat</a>
 <LI><a href="#[1055f38]">JugeHexBcd</a>
 <LI><a href="#[1055e18]">ClsArray</a>
 <LI><a href="#[1055dd0]">MoveByte</a>
 <LI><a href="#[1055d88]">CompareBuf</a>
 <LI><a href="#[1055d40]">CompareVa</a>
 <LI><a href="#[1055cf8]">Strsize</a>
 <LI><a href="#[1055c68]">Strsize16</a>
 <LI><a href="#[1055cb0]">StrATChar</a>
 <LI><a href="#[1055c20]">LookStr</a>
 <LI><a href="#[1055b48]">LookEnable</a>
 <LI><a href="#[1055bd8]">LookStrInLength</a>
 <LI><a href="#[1055b90]">LookStrDown</a>
 <LI><a href="#[1055b00]">LookShowChar</a>
 <LI><a href="#[1055ab8]">MemSpace</a>
 <LI><a href="#[10559e0]">JugeBufType</a>
 <LI><a href="#[1055878]">PhoPdu</a>
 <LI><a href="#[1055908]">gsmEncode7bit</a>
 <LI><a href="#[10558c0]">PduNumber</a>
 <LI><a href="#[1055758]">ExpPdu</a>
 <LI><a href="#[1055830]">Bit72Bit8</a>
 <LI><a href="#[1055710]">GetCsq</a>
 <LI><a href="#[1055950]">StrToUni</a>
 <LI><a href="#[10557a0]">UniToStr</a>
 <LI><a href="#[1055a28]">INT322IPAsc</a>
 <LI><a href="#[1055a70]">IPAsc2INT32</a>
 <LI><a href="#[1053050]">Juge</a>
 <LI><a href="#[1052ea0]">Next</a>
 <LI><a href="#[1052d38]">Back</a>
 <LI><a href="#[1052cf0]">GetWeek</a>
 <LI><a href="#[104e6c8]">Init</a>
 <LI><a href="#[104e680]">Open</a>
 <LI><a href="#[104e638]">Close</a>
 <LI><a href="#[104e290]">Read</a>
 <LI><a href="#[104ba28]">Init</a>
 <LI><a href="#[104b998]">Read</a>
 <LI><a href="#[104b908]">Write</a>
 <LI><a href="#[1049980]">Open</a>
 <LI><a href="#[10498f0]">Start</a>
 <LI><a href="#[10498a8]">RwSpi</a>
 <LI><a href="#[1049860]">Write</a>
 <LI><a href="#[1049818]">Read</a>
 <LI><a href="#[1049788]">JugeByte</a>
 <LI><a href="#[10497d0]">JugeBuf</a>
 <LI><a href="#[1049740]">End</a>
 <LI><a href="#[10496f8]">Close</a>
 <LI><a href="#[1047760]">Init1</a>
 <LI><a href="#[1047208]">Open1</a>
 <LI><a href="#[10471c0]">Close1</a>
 <LI><a href="#[1047130]">Read1</a>
 <LI><a href="#[1047058]">Write1</a>
 <LI><a href="#[1046f80]">Ease1</a>
 <LI><a href="#[1046ef0]">Juge1</a>
 <LI><a href="#[1046ea8]">CreartBad1</a>
 <LI><a href="#[1044f70]">Init</a>
 <LI><a href="#[1044dc0]">Open</a>
 <LI><a href="#[1044c58]">Close</a>
 <LI><a href="#[10449d0]">Read</a>
 <LI><a href="#[1044868]">Write</a>
 <LI><a href="#[11eac48]">Init</a>
 <LI><a href="#[11eac00]">OpenMessage</a>
 <LI><a href="#[11eabb8]">ReadMessage</a>
 <LI><a href="#[11eab70]">ReadPhone</a>
 <LI><a href="#[11eaa50]">SendMessage</a>
 <LI><a href="#[11eaa08]">CloseMessage</a>
 <LI><a href="#[11ea978]">CallPhone</a>
 <LI><a href="#[11ea8e8]">HangPhone</a>
 <LI><a href="#[11ea858]">AnswerPhone</a>
 <LI><a href="#[11ea810]">InitTCPIP</a>
 <LI><a href="#[11ea780]">OpenUDPTCP</a>
 <LI><a href="#[11ea738]">CloseUDPTCP</a>
 <LI><a href="#[11eb350]">SendTCPUDP</a>
 <LI><a href="#[11ea618]">ReadIpData</a>
 <LI><a href="#[11ea660]">DNSRIP</a>
 <LI><a href="#[11ea5d0]">EditUDPTCPPro</a>
 <LI><a href="#[11ea588]">GetUDPTCPPro</a>
 <LI><a href="#[11ea540]">Enable</a>
 <LI><a href="#[11ea4f8]">DisEnable</a>
 <LI><a href="#[11ea4b0]">GetEnable</a>
 <LI><a href="#[11ea468]">GetPro</a>
 <LI><a href="#[11ea420]">EditCen</a>
 <LI><a href="#[11e6e40]">Init</a>
 <LI><a href="#[11e6db0]">Open</a>
 <LI><a href="#[11e6d68]">Close</a>
 <LI><a href="#[11e6d20]">Read</a>
 <LI><a href="#[11e6cd8]">PowerOpen</a>
 <LI><a href="#[11e6c90]">PowerClose</a>
 <LI><a href="#[12df748]">Init</a>
 <LI><a href="#[12df6b8]">Open</a>
 <LI><a href="#[12df670]">Close</a>
 <LI><a href="#[12df628]">Read</a>
 <LI><a href="#[12df5e0]">Enable</a>
 <LI><a href="#[12df598]">DisEnable</a>
 <LI><a href="#[12df550]">GetEnable</a>
 <LI><a href="#[12df508]">GetPro</a>
 <LI><a href="#[12df4c0]">EditPro</a>
 <LI><a href="#[12da2e0]">Init</a>
 <LI><a href="#[12da1c0]">GetState</a>
 <LI><a href="#[12da298]">FTP_CtrReceive</a>
 <LI><a href="#[12d78f8]">Init1</a>
 <LI><a href="#[12d7670]">CreateBin1</a>
 <LI><a href="#[12d75e0]">CreateRecoder1</a>
 <LI><a href="#[12d73e8]">Open1</a>
 <LI><a href="#[12d7358]">Close1</a>
 <LI><a href="#[12d72c8]">ReadBin1</a>
 <LI><a href="#[12d7238]">WriteBin1</a>
 <LI><a href="#[12d7160]">ReadRecoder2</a>
 <LI><a href="#[12d7040]">WriteRecoder2</a>
 <LI><a href="#[12d6ff8]">GetJlNum1</a>
 <LI><a href="#[12d6f68]">Seek1</a>
 <LI><a href="#[12d6ed8]">SeekSize1</a>
 <LI><a href="#[12d6e90]">ReadHeadTail</a>
 <LI><a href="#[12d6e48]">ReadPor</a>
 <LI><a href="#[12d49c0]">Open</a>
 <LI><a href="#[12d4930]">Read</a>
 <LI><a href="#[12d4858]">Write</a>
 <LI><a href="#[12d4810]">Ease</a>
 <LI><a href="#[1468168]">GpsSem</a>
 <LI><a href="#[1468120]">GpsNoSem</a>
 <LI><a href="#[14680d8]">GpsErro</a>
 <LI><a href="#[1051000]">Init</a>
 <LI><a href="#[1050ee0]">Open</a>
 <LI><a href="#[1050e08]">Close</a>
 <LI><a href="#[1050c58]">Write</a>
 <LI><a href="#[1050d30]">Read</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c80e08]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; TargetResetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c82200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15068c0]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14ff448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[1506600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[14ff448]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[15068c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[14ff400]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1506600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[14ff3b8]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14ff640]"></a>__decompress</STRONG> (ARM, 68 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[14ff5f8]"></a>__decompress0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[14ff178]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1504a00]"></a>__ARM_argv_veneer</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lib_init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[c822d8]"></a>ConfigurePLL</STRONG> (ARM, 304 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c82200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[c82290]"></a>GPIOResetInit</STRONG> (ARM, 120 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c82200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[c82248]"></a>init_VIC</STRONG> (ARM, 88 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c82200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[c82200]"></a>TargetResetInit</STRONG> (ARM, 92 bytes, Stack size 4 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TargetResetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c82248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VIC
<LI><a href="#[c82290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOResetInit
<LI><a href="#[c822d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigurePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[c80e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[c821b8]"></a>Install_IRQ</STRONG> (ARM, 92 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Install_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c82008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Setup
</UL>

<P><STRONG><a name="[c82170]"></a>init_port</STRONG> (ARM, 40 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c81fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[c82128]"></a>IRQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c817d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[c820e0]"></a>FIQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c80f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[c82098]"></a>Timer0_Exception</STRONG> (ARM, 36 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer0_Exception &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c81ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c81ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
</UL>

<P><STRONG><a name="[c82050]"></a>Timer0Init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c81fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[c82008]"></a>VIC_Setup</STRONG> (ARM, 108 bytes, Stack size 4 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VIC_Setup &rArr; Install_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c821b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Install_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c81fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[c81fc0]"></a>TargetInit</STRONG> (ARM, 44 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TargetInit &rArr; VIC_Setup &rArr; Install_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c82008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Setup
<LI><a href="#[c82050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
<LI><a href="#[c82170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_port
<LI><a href="#[c82bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWTD
<LI><a href="#[1508718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1398770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c81f78]"></a>WatchDog</STRONG> (ARM, 72 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7f300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
<LI><a href="#[104e320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeOrder
<LI><a href="#[1050ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write0
<LI><a href="#[11e6e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsTask
<LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
<LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
<LI><a href="#[12da328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Downloard_Task
<LI><a href="#[12df790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[c80e50]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1505fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c7f618]"></a>OSTaskStkInit</STRONG> (ARM, 232 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c77708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c7d4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[c7f5d0]"></a>SWI_Exception</STRONG> (ARM, 336 bytes, Stack size 4 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SWI_Exception
</UL>
<BR>[Called By]<UL><LI><a href="#[c80dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInterrupt
</UL>

<P><STRONG><a name="[c7f588]"></a>OSStartHighRdy</STRONG> (ARM, 16 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7d730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[c7f540]"></a>OSInitHookBegin</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c7f4f8]"></a>OSInitHookEnd</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c7f4b0]"></a>OSTaskCreateHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[c7f468]"></a>OSTaskDelHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c776c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[c7f420]"></a>OSTaskSwHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7ef50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OSStartHighRdy
<LI><a href="#[c81748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>

<P><STRONG><a name="[c7f3d8]"></a>OSTaskStatHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[c7f390]"></a>OSTCBInitHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[c7f348]"></a>OSTimeTickHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c81ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[c7f300]"></a>OSTaskIdleHook</STRONG> (ARM, 16 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c81f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[c7d8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[c7d928]"></a>OS_TaskStat</STRONG> (ARM, 220 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c7f3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[c7d8e0]"></a>OS_TaskIdle</STRONG> (ARM, 48 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7f300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[c7d898]"></a>OSInit</STRONG> (ARM, 56 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[c7d3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[c7d418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[c7e4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[c7e4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[c7e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[c7e588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[c7e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[c7e618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[c7f4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[c7f540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[1398770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7d850]"></a>OSIntEnter</STRONG> (ARM, 56 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[c81700]"></a>OSIntExit</STRONG> (ARM, 240 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIntExit
</UL>
<BR>[Called By]<UL><LI><a href="#[c817d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
<LI><a href="#[c81d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Handler
<LI><a href="#[c81dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Handler
<LI><a href="#[c81e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Handler
<LI><a href="#[c81e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Handler
<LI><a href="#[c81ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
<LI><a href="#[c81f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Handler
</UL>

<P><STRONG><a name="[c7d808]"></a>OSSchedLock</STRONG> (ARM, 72 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[c7d7c0]"></a>OS_Sched</STRONG> (ARM, 168 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c76930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[c775a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[c77630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[c776c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c77708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c77750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c783e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[c79000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[c79048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[c79090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c790d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c79168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[c7b820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[c7b868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[c7b8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[c7b8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[c7c568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[c7c5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c7c5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c7d4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c7d778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[c7d778]"></a>OSSchedUnlock</STRONG> (ARM, 124 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c7d730]"></a>OSStart</STRONG> (ARM, 132 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSStart &rArr; OSStartHighRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7f588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[1398770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7d6e8]"></a>OSStatInit</STRONG> (ARM, 84 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[c81ee8]"></a>OSTimeTick</STRONG> (ARM, 212 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c7f348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c82098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Exception
</UL>

<P><STRONG><a name="[c7d6a0]"></a>OSVersion</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[c7d658]"></a>OS_Dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c776c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[c7d610]"></a>OS_EventTaskRdy</STRONG> (ARM, 188 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c783e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[c79000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[c79048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[c79090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c79168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[c7b820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[c7b868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[c7b8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
</UL>

<P><STRONG><a name="[c7d5c8]"></a>OS_EventTaskWait</STRONG> (ARM, 188 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c790d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c7b8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[c7d580]"></a>OS_EventTO</STRONG> (ARM, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c790d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c7b8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
</UL>

<P><STRONG><a name="[c7d538]"></a>OS_EventWaitListInit</STRONG> (ARM, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c791b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[c7b940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>

<P><STRONG><a name="[c7d4f0]"></a>OS_TCBInit</STRONG> (ARM, 336 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7f390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[c7f4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c77708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c7d4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[c7c6d0]"></a>OSFlagAccept</STRONG> (ARM, 440 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)

<P><STRONG><a name="[c7c688]"></a>OSFlagCreate</STRONG> (ARM, 144 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)

<P><STRONG><a name="[c7c640]"></a>OS_FlagUnlink</STRONG> (ARM, 84 bytes, Stack size 4 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c776c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c7c5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c7cb08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[c7c5f8]"></a>OSFlagDel</STRONG> (ARM, 344 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7cb08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c7c5b0]"></a>OSFlagPend</STRONG> (ARM, 816 bytes, Stack size 64 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7c640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[c7cac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c7c568]"></a>OSFlagPost</STRONG> (ARM, 496 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7cb08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c7c520]"></a>OSFlagQuery</STRONG> (ARM, 96 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)

<P><STRONG><a name="[c7d418]"></a>OS_FlagInit</STRONG> (ARM, 76 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c7b988]"></a>OSMboxAccept</STRONG> (ARM, 76 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)

<P><STRONG><a name="[c7b940]"></a>OSMboxCreate</STRONG> (ARM, 128 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSMboxCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1044f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1051000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[12da2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[c7b8f8]"></a>OSMboxDel</STRONG> (ARM, 344 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c7b8b0]"></a>OSMboxPend</STRONG> (ARM, 316 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
<LI><a href="#[c7d5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[12da328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Downloard_Task
</UL>

<P><STRONG><a name="[c7b868]"></a>OSMboxPost</STRONG> (ARM, 156 bytes, Stack size 16 bytes, os_mbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[12da298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_CtrReceive
<LI><a href="#[139a0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitContrl
</UL>

<P><STRONG><a name="[c7b820]"></a>OSMboxPostOpt</STRONG> (ARM, 204 bytes, Stack size 16 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c7b7d8]"></a>OSMboxQuery</STRONG> (ARM, 116 bytes, Stack size 24 bytes, os_mbox.o(.text), UNUSED)

<P><STRONG><a name="[c7ac88]"></a>OSMemCreate</STRONG> (ARM, 252 bytes, Stack size 40 bytes, os_mem.o(.text), UNUSED)

<P><STRONG><a name="[c7ac40]"></a>OSMemGet</STRONG> (ARM, 120 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)

<P><STRONG><a name="[c7abf8]"></a>OSMemPut</STRONG> (ARM, 116 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)

<P><STRONG><a name="[c7abb0]"></a>OSMemQuery</STRONG> (ARM, 120 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)

<P><STRONG><a name="[c7d3d0]"></a>OS_MemInit</STRONG> (ARM, 112 bytes, Stack size 0 bytes, os_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c791f8]"></a>OSQAccept</STRONG> (ARM, 140 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)

<P><STRONG><a name="[c791b0]"></a>OSQCreate</STRONG> (ARM, 240 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>

<P><STRONG><a name="[c79168]"></a>OSQDel</STRONG> (ARM, 392 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c79120]"></a>OSQFlush</STRONG> (ARM, 92 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)

<P><STRONG><a name="[c790d8]"></a>OSQPend</STRONG> (ARM, 364 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
<LI><a href="#[c7d5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c79090]"></a>OSQPost</STRONG> (ARM, 216 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c79048]"></a>OSQPostFront</STRONG> (ARM, 220 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c79000]"></a>OSQPostOpt</STRONG> (ARM, 320 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c78fb8]"></a>OSQQuery</STRONG> (ARM, 164 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)

<P><STRONG><a name="[c7d388]"></a>OS_QInit</STRONG> (ARM, 68 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c78470]"></a>OSSemAccept</STRONG> (ARM, 88 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)

<P><STRONG><a name="[c78428]"></a>OSSemCreate</STRONG> (ARM, 128 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1044f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1047760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init1
<LI><a href="#[1049980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[104ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[104e6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1051000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[11e6e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[11eac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[12d78f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init1
<LI><a href="#[12df748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[c783e0]"></a>OSSemDel</STRONG> (ARM, 344 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c78398]"></a>OSSemPend</STRONG> (ARM, 272 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTO
<LI><a href="#[c7d5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1044e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[1044e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[1044e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open2
<LI><a href="#[1044ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open3
<LI><a href="#[1044f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[1046ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreartBad1
<LI><a href="#[1046ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge1
<LI><a href="#[1046f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease1
<LI><a href="#[1047058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
<LI><a href="#[1047130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[10471c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[1047208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[10498f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
<LI><a href="#[104b908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[104b998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[104e290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[104e638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[104e680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[1050f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[1050f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[1050fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[11e6c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerClose
<LI><a href="#[11e6cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOpen
<LI><a href="#[11e6d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[11e6d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[11e6db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[11e6e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsTask
<LI><a href="#[11ea468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPro
<LI><a href="#[11ea4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnable
<LI><a href="#[11ea4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEnable
<LI><a href="#[11ea540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[11ea588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUDPTCPPro
<LI><a href="#[11ea5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EditUDPTCPPro
<LI><a href="#[11ea618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIpData
<LI><a href="#[11ea660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSRIP
<LI><a href="#[11ea738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseUDPTCP
<LI><a href="#[11ea780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUDPTCP
<LI><a href="#[11ea810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTCPIP
<LI><a href="#[11ea858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerPhone
<LI><a href="#[11ea8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HangPhone
<LI><a href="#[11ea978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallPhone
<LI><a href="#[11eaa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseMessage
<LI><a href="#[11eaa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[11eab70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPhone
<LI><a href="#[11eabb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMessage
<LI><a href="#[11eac00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMessage
<LI><a href="#[11eac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
<LI><a href="#[11eb278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
<LI><a href="#[11eb2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartAffair
<LI><a href="#[11eb350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTCPUDP
<LI><a href="#[12d6e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPor
<LI><a href="#[12d6e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHeadTail
<LI><a href="#[12d6ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSize1
<LI><a href="#[12d6f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek1
<LI><a href="#[12d6ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum1
<LI><a href="#[12d7040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder2
<LI><a href="#[12d7160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder2
<LI><a href="#[12d7238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBin1
<LI><a href="#[12d72c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBin1
<LI><a href="#[12d7358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[12d73e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[12d75e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder1
<LI><a href="#[12d7670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin1
<LI><a href="#[12df4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EditPro
<LI><a href="#[12df508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPro
<LI><a href="#[12df550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnable
<LI><a href="#[12df598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEnable
<LI><a href="#[12df5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[12df628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[12df670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[12df6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[12df820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
<LI><a href="#[139cb50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gps_Data
</UL>

<P><STRONG><a name="[c78350]"></a>OSSemPost</STRONG> (ARM, 152 bytes, Stack size 8 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c81478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Exception
<LI><a href="#[c814c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Exception
<LI><a href="#[c81508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Exception
<LI><a href="#[c81550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Exception
<LI><a href="#[c81790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Exception
<LI><a href="#[1044ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[1044ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[1044d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close2
<LI><a href="#[1044d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close3
<LI><a href="#[1046ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreartBad1
<LI><a href="#[1046ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge1
<LI><a href="#[1046f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease1
<LI><a href="#[1047058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
<LI><a href="#[1047130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[10471c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[1047208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[1049740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;End
<LI><a href="#[104b908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[104b998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[104e290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[104e638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[104e680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[1050e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[1050e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[11e6c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerClose
<LI><a href="#[11e6cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOpen
<LI><a href="#[11e6d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[11e6d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[11e6db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[11e6e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsTask
<LI><a href="#[11ea468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPro
<LI><a href="#[11ea4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnable
<LI><a href="#[11ea4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEnable
<LI><a href="#[11ea540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[11ea588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUDPTCPPro
<LI><a href="#[11ea5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EditUDPTCPPro
<LI><a href="#[11ea618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIpData
<LI><a href="#[11ea660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSRIP
<LI><a href="#[11ea738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseUDPTCP
<LI><a href="#[11ea780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUDPTCP
<LI><a href="#[11ea810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTCPIP
<LI><a href="#[11ea858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerPhone
<LI><a href="#[11ea8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HangPhone
<LI><a href="#[11ea978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallPhone
<LI><a href="#[11eaa08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseMessage
<LI><a href="#[11eaa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
<LI><a href="#[11eab70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPhone
<LI><a href="#[11eabb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMessage
<LI><a href="#[11eac00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMessage
<LI><a href="#[11eac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
<LI><a href="#[11eb278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
<LI><a href="#[11eb2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartAffair
<LI><a href="#[11eb350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTCPUDP
<LI><a href="#[12d6e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPor
<LI><a href="#[12d6e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHeadTail
<LI><a href="#[12d6ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSize1
<LI><a href="#[12d6f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek1
<LI><a href="#[12d6ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum1
<LI><a href="#[12d7040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder2
<LI><a href="#[12d7160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder2
<LI><a href="#[12d7238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBin1
<LI><a href="#[12d72c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBin1
<LI><a href="#[12d7358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[12d73e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[12d75e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder1
<LI><a href="#[12d7670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin1
<LI><a href="#[12df4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EditPro
<LI><a href="#[12df508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPro
<LI><a href="#[12df550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnable
<LI><a href="#[12df598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisEnable
<LI><a href="#[12df5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[12df628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[12df670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
<LI><a href="#[12df6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[12df820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
<LI><a href="#[139cb50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gps_Data
</UL>

<P><STRONG><a name="[c78308]"></a>OSSemQuery</STRONG> (ARM, 116 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSSemQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[1044f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[1050fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>

<P><STRONG><a name="[c77750]"></a>OSTaskChangePrio</STRONG> (ARM, 460 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c77708]"></a>OSTaskCreate</STRONG> (ARM, 236 bytes, Stack size 40 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c7f618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11e6e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[11eac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[12da2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[12df748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[1398770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7d4a8]"></a>OSTaskCreateExt</STRONG> (ARM, 288 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c7f618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1507fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[c7e618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[c776c0]"></a>OSTaskDel</STRONG> (ARM, 508 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7c640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[c7d658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c7f468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[c77678]"></a>OSTaskDelReq</STRONG> (ARM, 140 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)

<P><STRONG><a name="[c77630]"></a>OSTaskResume</STRONG> (ARM, 192 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c775e8]"></a>OSTaskStkChk</STRONG> (ARM, 192 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)

<P><STRONG><a name="[c775a0]"></a>OSTaskSuspend</STRONG> (ARM, 240 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c77558]"></a>OSTaskQuery</STRONG> (ARM, 120 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1508280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[c7d460]"></a>OSTimeDly</STRONG> (ARM, 140 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c76978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[c7d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[c7d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[11e6e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsTask
<LI><a href="#[11eac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
<LI><a href="#[11ead20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermPowerDown
<LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
<LI><a href="#[12da328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Downloard_Task
<LI><a href="#[12df790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[139a078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[139cb50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gps_Data
</UL>

<P><STRONG><a name="[c76978]"></a>OSTimeDlyHMSM</STRONG> (ARM, 232 bytes, Stack size 32 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[c76930]"></a>OSTimeDlyResume</STRONG> (ARM, 184 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c768e8]"></a>OSTimeGet</STRONG> (ARM, 32 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)

<P><STRONG><a name="[c768a0]"></a>OSTimeSet</STRONG> (ARM, 32 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)

<P><STRONG><a name="[c81790]"></a>CAN_Exception</STRONG> (ARM, 404 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c81f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Handler
</UL>

<P><STRONG><a name="[c81550]"></a>UART0_Exception</STRONG> (ARM, 244 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART0_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c81e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Handler
</UL>

<P><STRONG><a name="[c81508]"></a>UART1_Exception</STRONG> (ARM, 244 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART1_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c81e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Handler
</UL>

<P><STRONG><a name="[c814c0]"></a>UART2_Exception</STRONG> (ARM, 244 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART2_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c81dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Handler
</UL>

<P><STRONG><a name="[c81478]"></a>UART3_Exception</STRONG> (ARM, 244 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART3_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c81d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Handler
</UL>

<P><STRONG><a name="[12d1750]"></a>Trans_Gps</STRONG> (ARM, 140 bytes, Stack size 16 bytes, _datatrans.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d24d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Timer
<LI><a href="#[12d2518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Latitude
<LI><a href="#[12d2560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_LongHem
<LI><a href="#[12d25a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Location
<LI><a href="#[12d25f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Speed
<LI><a href="#[12d2638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Angle
<LI><a href="#[12d2680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Year
<LI><a href="#[12d26c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_State
</UL>
<BR>[Called By]<UL><LI><a href="#[139cb50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gps_Data
</UL>

<P><STRONG><a name="[12d1708]"></a>Trans_Gps_Hand</STRONG> (ARM, 176 bytes, Stack size 16 bytes, _datatrans.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d24d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Timer
<LI><a href="#[12d2518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Latitude
<LI><a href="#[12d2560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_LongHem
<LI><a href="#[12d25a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Location
<LI><a href="#[12d25f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Speed
<LI><a href="#[12d2638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Angle
<LI><a href="#[12d2680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Year
<LI><a href="#[12d26c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_State
</UL>
<BR>[Called By]<UL><LI><a href="#[139cb08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Gps_DataHand
</UL>

<P><STRONG><a name="[139cc28]"></a>CheckFile</STRONG> (ARM, 104 bytes, Stack size 8 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[139e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_Basic
<LI><a href="#[139e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_CanID
<LI><a href="#[139e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_Parameter
<LI><a href="#[139e698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_Acc
<LI><a href="#[139e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_UpLoader
<LI><a href="#[139e7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_MessageState
<LI><a href="#[139e800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_Message
<LI><a href="#[139e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_GpsMessage
<LI><a href="#[139e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sys_State
<LI><a href="#[1508430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[139a078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[139cbe0]"></a>InitCenPhone</STRONG> (ARM, 192 bytes, Stack size 184 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139a078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[139cb98]"></a>BackInit</STRONG> (ARM, 44 bytes, Stack size 8 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackCan
<LI><a href="#[139e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackPareameter
<LI><a href="#[139e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackAccTimer
<LI><a href="#[139e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpLoader
<LI><a href="#[139e890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sys_State
</UL>

<P><STRONG><a name="[139cb50]"></a>Get_Gps_Data</STRONG> (ARM, 588 bytes, Stack size 56 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[12d1750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps
</UL>

<P><STRONG><a name="[139cb08]"></a>Get_Gps_DataHand</STRONG> (ARM, 60 bytes, Stack size 40 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d1708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Hand
</UL>

<P><STRONG><a name="[139cac0]"></a>GetPhone</STRONG> (ARM, 480 bytes, Stack size 112 bytes, _filedata.o(.text), UNUSED)

<P><STRONG><a name="[139ca78]"></a>SendMessage</STRONG> (ARM, 416 bytes, Stack size 248 bytes, _filedata.o(.text), UNUSED)

<P><STRONG><a name="[1398770]"></a>main</STRONG> (ARM, 48 bytes, Stack size 8 bytes, _init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c7d730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[c81fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kernel.o(.text)
</UL>
<P><STRONG><a name="[1398728]"></a>GpsInit</STRONG> (ARM, 52 bytes, Stack size 24 bytes, gpsevent.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139a0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitContrl
</UL>

<P><STRONG><a name="[1508718]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[c81fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit (via Veneer)
<LI><a href="#[15086d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[15086d0]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[1508718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1508688]"></a>rand</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[1508430]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1505600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d2518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Latitude
<LI><a href="#[12d2560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_LongHem
<LI><a href="#[12d25f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Speed
<LI><a href="#[12d2638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Angle
<LI><a href="#[12d7118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[1508280]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c77558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[1508238]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15081f0]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15081a8]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1507fc0]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7d4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[12d7628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[12d76b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>

<P><STRONG><a name="[1507f78]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1507f30]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1507ee8]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1505648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1507d10]"></a>strlen</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[104e320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeOrder (via Veneer)
<LI><a href="#[12d2518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Latitude (via Veneer)
<LI><a href="#[12d2560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_LongHem (via Veneer)
<LI><a href="#[12d25f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Speed (via Veneer)
<LI><a href="#[12d2638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Angle (via Veneer)
<LI><a href="#[12d7430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open (via Veneer)
<LI><a href="#[12d74c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileNameAgain (via Veneer)
<LI><a href="#[12d7628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder (via Veneer)
<LI><a href="#[12d76b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin (via Veneer)
</UL>

<P><STRONG><a name="[1507b58]"></a>memchr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104e320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeOrder (via Veneer)
<LI><a href="#[1055ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Float (via Veneer)
</UL>

<P><STRONG><a name="[15078d0]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[1507888]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1047250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[1052cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
<LI><a href="#[1053008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[1055fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[12d7088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
<LI><a href="#[12d70d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHeadTailPoint
<LI><a href="#[12d71a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
<LI><a href="#[12d7628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
</UL>

<P><STRONG><a name="[1506b90]"></a>__use_two_region_memory</STRONG> (ARM, 4 bytes, Stack size 0 bytes, stkheap2.o(.text), UNUSED)

<P><STRONG><a name="[1506b48]"></a>__rt_stackheap_init</STRONG> (ARM, 36 bytes, Stack size 16 bytes, stkheap2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_stackheap_init &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1505848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_storage
<LI><a href="#[1505fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[1506600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1506b00]"></a>__rt_heap_extend</STRONG> (ARM, 24 bytes, Stack size 8 bytes, stkheap2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1506a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[1506600]"></a>__rt_entry</STRONG> (ARM, 76 bytes, Stack size 16 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1503de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[1503f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
<LI><a href="#[1504df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
<LI><a href="#[1506b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14ff400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[15068c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[15065b8]"></a>__rt_exit</STRONG> (ARM, 20 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_exit &rArr; __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[1504928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1504df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[1506570]"></a>__rt_abort</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kernel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1505448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1505fd8]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c80e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1505170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1506b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[1505848]"></a>__rt_stackheap_storage</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_stackheap_storage_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1506b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[1505690]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1505648]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1507ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1505600]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1508430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1505448]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1506570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_abort
</UL>

<P><STRONG><a name="[15051b8]"></a>__user_libspace</STRONG> (ARM, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1505170]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1505fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1505128]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1504df0]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exit &rArr; __rt_exit &rArr; __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[1504d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[15065b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1506600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1504970]"></a>__rt_lib_init</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1502b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
<LI><a href="#[15036f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[1504340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signal_init (Weak Reference)
<LI><a href="#[15043d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (Weak Reference)
<LI><a href="#[1504418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_user_alloc (Weak Reference)
<LI><a href="#[1504460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (Weak Reference)
<LI><a href="#[15044a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getenv_init (Weak Reference)
<LI><a href="#[15044f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time (Weak Reference)
<LI><a href="#[1504538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (Weak Reference)
<LI><a href="#[1504580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary (Weak Reference)
<LI><a href="#[15045c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (Weak Reference)
<LI><a href="#[1504610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate (Weak Reference)
<LI><a href="#[1504658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap_init (Weak Reference)
<LI><a href="#[15046a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clock_init (Weak Reference)
<LI><a href="#[15046e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atexit_init (Weak Reference)
<LI><a href="#[1504778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_ (Weak Reference)
<LI><a href="#[15047c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloca_initialize (Weak Reference)
<LI><a href="#[1504808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_DescSize (Weak Reference)
<LI><a href="#[1504850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_init (Weak Reference)
<LI><a href="#[1504a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer (via Veneer)
<LI><a href="#[15086d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1506600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
</UL>

<P><STRONG><a name="[1504928]"></a>__rt_lib_shutdown</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[15042b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio (Weak Reference)
<LI><a href="#[15042f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_user_alloc (Weak Reference)
<LI><a href="#[1504730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[15065b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>

<P><STRONG><a name="[1503f58]"></a>_platform_post_stackheap_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, boardinit2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1506600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1503de8]"></a>_platform_post_lib_init</STRONG> (ARM, 16 bytes, Stack size 8 bytes, boardinit3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1506600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1503ab0]"></a>__I_use_semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[1503a68]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15036f8]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[1502d48]"></a>__ARM_get_argv</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, no_argv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_get_argv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_init.o(.emb_text)
</UL>
<P><STRONG><a name="[1502420]"></a>__rt_fp_status_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1502b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1507840]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[15077f8]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[1507918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[1507960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[15079a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[c76978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[c7d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[1044e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[1044e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[1044e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open2
<LI><a href="#[1044ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open3
<LI><a href="#[1047010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreartBad
<LI><a href="#[10470a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[104b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[1056208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Algorism2Asc
<LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
<LI><a href="#[12d2638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Angle
<LI><a href="#[12d4810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
<LI><a href="#[12d4858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[12d48a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[12d4930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[12d7088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
<LI><a href="#[12d70d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHeadTailPoint
<LI><a href="#[12d71a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
<LI><a href="#[12d76b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>

<P><STRONG><a name="[c817d8]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c81700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c82128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
</UL>

<P><STRONG><a name="[c81ea0]"></a>Timer0_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer0_Handler &rArr; Timer0_Exception &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c81700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c82098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[c81e58]"></a>Uart0_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart0_Handler &rArr; UART0_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c81550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Exception
<LI><a href="#[c81700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[c81e10]"></a>Uart1_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart1_Handler &rArr; UART1_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c81508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Exception
<LI><a href="#[c81700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[c81dc8]"></a>Uart2_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart2_Handler &rArr; UART2_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c814c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Exception
<LI><a href="#[c81700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[c81d80]"></a>Uart3_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Uart3_Handler &rArr; UART3_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c81478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Exception
<LI><a href="#[c81700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[c81f30]"></a>CAN_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = CAN_Handler &rArr; CAN_Exception &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c81700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c81790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[c80dc0]"></a>SoftwareInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = SoftwareInterrupt &rArr; SWI_Exception
</UL>
<BR>[Calls]<UL><LI><a href="#[c7f5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c81748]"></a>OSIntCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[c7f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_a.o(subr)
<LI> irq.o(IRQ)
</UL>
<P><STRONG><a name="[c7ef50]"></a>__OSStartHighRdy</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[c7f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[1502b70]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1502420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[1502b28]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c82bd8]"></a>InitWTD</STRONG> (ARM, 24 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c81fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[c81048]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c81048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c81048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c81000]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c81000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c81000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c80fb8]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c80fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c80fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c80f70]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c820e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c7e618]"></a>OS_InitTaskStat</STRONG> (ARM, 68 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c7e5d0]"></a>OS_InitTaskIdle</STRONG> (ARM, 68 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c7e588]"></a>OS_InitEventList</STRONG> (ARM, 80 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c7e540]"></a>OS_InitTCBList</STRONG> (ARM, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c7e4f8]"></a>OS_InitRdyList</STRONG> (ARM, 88 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c7e4b0]"></a>OS_InitMisc</STRONG> (ARM, 88 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7d898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c7cb08]"></a>OS_FlagTaskRdy</STRONG> (ARM, 140 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7c640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[c7c568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[c7c5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[c7cac0]"></a>OS_FlagBlock</STRONG> (ARM, 220 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7c5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[c757f0]"></a>nand_trans_result</STRONG> (ARM, 168 bytes, Stack size 16 bytes, _arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nand_trans_result
</UL>
<BR>[Called By]<UL><LI><a href="#[c757a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_calculate_ecc
</UL>

<P><STRONG><a name="[c757a8]"></a>nand_calculate_ecc</STRONG> (ARM, 176 bytes, Stack size 32 bytes, _arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nand_calculate_ecc &rArr; nand_trans_result
</UL>
<BR>[Calls]<UL><LI><a href="#[c757f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_trans_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[c75760]"></a>nand_correct_data</STRONG> (ARM, 452 bytes, Stack size 36 bytes, _arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nand_correct_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[c75718]"></a>Crc</STRONG> (ARM, 112 bytes, Stack size 8 bytes, _arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Crc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[c756d0]"></a>CheckSum</STRONG> (ARM, 44 bytes, Stack size 0 bytes, _arithmetic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[c75688]"></a>CheckAdd</STRONG> (ARM, 48 bytes, Stack size 0 bytes, _arithmetic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _arithmetic.o(.constdata)
</UL>
<P><STRONG><a name="[10562e0]"></a>Asc2Bcd</STRONG> (ARM, 76 bytes, Stack size 8 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Asc2Bcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1056298]"></a>Bcd2Asc</STRONG> (ARM, 80 bytes, Stack size 8 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bcd2Asc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1056250]"></a>Asc2Algorism</STRONG> (ARM, 100 bytes, Stack size 12 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Asc2Algorism
</UL>
<BR>[Called By]<UL><LI><a href="#[1055a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAsc2INT32
<LI><a href="#[1055ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1056208]"></a>Algorism2Asc</STRONG> (ARM, 176 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Algorism2Asc
</UL>
<BR>[Calls]<UL><LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1055a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT322IPAsc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[10561c0]"></a>Asc2HexSig</STRONG> (ARM, 96 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1056178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2HexBuf
</UL>

<P><STRONG><a name="[1056178]"></a>Asc2HexBuf</STRONG> (ARM, 112 bytes, Stack size 16 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Asc2HexBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10561c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2HexSig
</UL>
<BR>[Called By]<UL><LI><a href="#[1055758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpPdu
<LI><a href="#[10560a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1056130]"></a>Hex2AscSig</STRONG> (ARM, 52 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1056058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Asc
<LI><a href="#[10560e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexBuf2Asc
</UL>

<P><STRONG><a name="[10560e8]"></a>HexBuf2Asc</STRONG> (ARM, 88 bytes, Stack size 12 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HexBuf2Asc
</UL>
<BR>[Calls]<UL><LI><a href="#[1056130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2AscSig
</UL>
<BR>[Called By]<UL><LI><a href="#[1055878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[10560a0]"></a>Asc2Hex</STRONG> (ARM, 100 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Asc2Hex &rArr; Asc2HexBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1056178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2HexBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1056058]"></a>Hex2Asc</STRONG> (ARM, 220 bytes, Stack size 20 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Hex2Asc
</UL>
<BR>[Calls]<UL><LI><a href="#[1056130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2AscSig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1056010]"></a>Bcd2Hex</STRONG> (ARM, 68 bytes, Stack size 8 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bcd2Hex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055fc8]"></a>Hex2Bcd</STRONG> (ARM, 108 bytes, Stack size 24 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1507888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055f80]"></a>JugeAscBcd</STRONG> (ARM, 68 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055f38]"></a>JugeHexBcd</STRONG> (ARM, 80 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055ef0]"></a>JugeAscHex</STRONG> (ARM, 132 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055ea8]"></a>Asc2Float</STRONG> (ARM, 160 bytes, Stack size 40 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Asc2Float &rArr; Asc2Algorism
</UL>
<BR>[Calls]<UL><LI><a href="#[1056250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Algorism
<LI><a href="#[1507b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055e60]"></a>JugeAscFloat</STRONG> (ARM, 116 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055e18]"></a>ClsArray</STRONG> (ARM, 40 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1055758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpPdu
<LI><a href="#[1055ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055dd0]"></a>MoveByte</STRONG> (ARM, 52 bytes, Stack size 8 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MoveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1055758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055d88]"></a>CompareBuf</STRONG> (ARM, 76 bytes, Stack size 12 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CompareBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055d40]"></a>CompareVa</STRONG> (ARM, 208 bytes, Stack size 8 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompareVa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055cf8]"></a>Strsize</STRONG> (ARM, 52 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1055878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
<LI><a href="#[10559e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeBufType
<LI><a href="#[1055a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAsc2INT32
<LI><a href="#[1055ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemSpace
<LI><a href="#[1055b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookStrDown
<LI><a href="#[1055bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookStrInLength
<LI><a href="#[1055c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookStr
<LI><a href="#[1055cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrATChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055cb0]"></a>StrATChar</STRONG> (ARM, 92 bytes, Stack size 12 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StrATChar
</UL>
<BR>[Calls]<UL><LI><a href="#[1055cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055c68]"></a>Strsize16</STRONG> (ARM, 56 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1055878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055c20]"></a>LookStr</STRONG> (ARM, 156 bytes, Stack size 24 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LookStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1055cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
</UL>
<BR>[Called By]<UL><LI><a href="#[1055a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAsc2INT32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055bd8]"></a>LookStrInLength</STRONG> (ARM, 148 bytes, Stack size 24 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LookStrInLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1055cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055b90]"></a>LookStrDown</STRONG> (ARM, 192 bytes, Stack size 28 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LookStrDown
</UL>
<BR>[Calls]<UL><LI><a href="#[1055cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055b48]"></a>LookEnable</STRONG> (ARM, 132 bytes, Stack size 16 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LookEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055b00]"></a>LookShowChar</STRONG> (ARM, 64 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055ab8]"></a>MemSpace</STRONG> (ARM, 108 bytes, Stack size 20 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MemSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[1055cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
<LI><a href="#[1055e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055a70]"></a>IPAsc2INT32</STRONG> (ARM, 232 bytes, Stack size 28 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IPAsc2INT32 &rArr; LookStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1055c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookStr
<LI><a href="#[1055cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
<LI><a href="#[1056250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2Algorism
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055a28]"></a>INT322IPAsc</STRONG> (ARM, 164 bytes, Stack size 24 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = INT322IPAsc &rArr; Algorism2Asc
</UL>
<BR>[Calls]<UL><LI><a href="#[1056208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Algorism2Asc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[10559e0]"></a>JugeBufType</STRONG> (ARM, 128 bytes, Stack size 16 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JugeBufType
</UL>
<BR>[Calls]<UL><LI><a href="#[1055cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
</UL>
<BR>[Called By]<UL><LI><a href="#[1055878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055998]"></a>BinarySearchStr</STRONG> (ARM, 208 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BinarySearchStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1055950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToUni
</UL>

<P><STRONG><a name="[1055950]"></a>StrToUni</STRONG> (ARM, 212 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = StrToUni &rArr; BinarySearchStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1055998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearchStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1055878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055908]"></a>gsmEncode7bit</STRONG> (ARM, 144 bytes, Stack size 16 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gsmEncode7bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1055878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[10558c0]"></a>PduNumber</STRONG> (ARM, 84 bytes, Stack size 4 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PduNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1055878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhoPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055878]"></a>PhoPdu</STRONG> (ARM, 628 bytes, Stack size 176 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PhoPdu &rArr; StrToUni &rArr; BinarySearchStr
</UL>
<BR>[Calls]<UL><LI><a href="#[10558c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PduNumber
<LI><a href="#[1055908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsmEncode7bit
<LI><a href="#[1055950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToUni
<LI><a href="#[10559e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeBufType
<LI><a href="#[1055c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize16
<LI><a href="#[1055cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strsize
<LI><a href="#[10560e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexBuf2Asc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055830]"></a>Bit72Bit8</STRONG> (ARM, 532 bytes, Stack size 12 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bit72Bit8
</UL>
<BR>[Called By]<UL><LI><a href="#[1055758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[10557e8]"></a>BinarySearchUni</STRONG> (ARM, 200 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BinarySearchUni
</UL>
<BR>[Called By]<UL><LI><a href="#[10557a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniToStr
</UL>

<P><STRONG><a name="[10557a0]"></a>UniToStr</STRONG> (ARM, 216 bytes, Stack size 32 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UniToStr &rArr; BinarySearchUni
</UL>
<BR>[Calls]<UL><LI><a href="#[10557e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinarySearchUni
</UL>
<BR>[Called By]<UL><LI><a href="#[1055758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExpPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055758]"></a>ExpPdu</STRONG> (ARM, 528 bytes, Stack size 40 bytes, _ascnumber.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ExpPdu &rArr; UniToStr &rArr; BinarySearchUni
</UL>
<BR>[Calls]<UL><LI><a href="#[10557a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniToStr
<LI><a href="#[1055830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bit72Bit8
<LI><a href="#[1055dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[1055e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[1056178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Asc2HexBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[1055710]"></a>GetCsq</STRONG> (ARM, 100 bytes, Stack size 0 bytes, _ascnumber.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _ascnumber.o(.constdata)
</UL>
<P><STRONG><a name="[10531b8]"></a>JugeSecond</STRONG> (ARM, 28 bytes, Stack size 0 bytes, _date.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1053050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>

<P><STRONG><a name="[1053170]"></a>JugeMinute</STRONG> (ARM, 28 bytes, Stack size 0 bytes, _date.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1053050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>

<P><STRONG><a name="[1053128]"></a>JugeHour</STRONG> (ARM, 28 bytes, Stack size 0 bytes, _date.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1053050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>

<P><STRONG><a name="[10530e0]"></a>Bcd2Hex</STRONG> (ARM, 68 bytes, Stack size 8 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1052d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSecond
<LI><a href="#[1052dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMinute
<LI><a href="#[1052e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHour
<LI><a href="#[1052e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDate
<LI><a href="#[1052ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextSecond
<LI><a href="#[1052f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMinute
<LI><a href="#[1052f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextHour
<LI><a href="#[1052fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextDate
<LI><a href="#[1053098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeDate
</UL>

<P><STRONG><a name="[1053098]"></a>JugeDate</STRONG> (ARM, 396 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JugeDate &rArr; Bcd2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[10530e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1052cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
<LI><a href="#[1053050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>

<P><STRONG><a name="[1053050]"></a>Juge</STRONG> (ARM, 296 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Juge &rArr; JugeDate &rArr; Bcd2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[1053098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeDate
<LI><a href="#[1053128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeHour
<LI><a href="#[1053170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeMinute
<LI><a href="#[10531b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[1052d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[1052ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _date.o(.constdata)
</UL>
<P><STRONG><a name="[1053008]"></a>Hex2Bcd</STRONG> (ARM, 108 bytes, Stack size 24 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1507888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1052d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSecond
<LI><a href="#[1052dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMinute
<LI><a href="#[1052e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHour
<LI><a href="#[1052e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDate
<LI><a href="#[1052ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextSecond
<LI><a href="#[1052f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMinute
<LI><a href="#[1052f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextHour
<LI><a href="#[1052fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextDate
</UL>

<P><STRONG><a name="[1052fc0]"></a>NextDate</STRONG> (ARM, 408 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1053008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[10530e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1052cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeek
<LI><a href="#[1052ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next
<LI><a href="#[1052f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextHour
</UL>

<P><STRONG><a name="[1052f78]"></a>NextHour</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NextHour &rArr; NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1052fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextDate
<LI><a href="#[1053008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[10530e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1052ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next
<LI><a href="#[1052f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMinute
</UL>

<P><STRONG><a name="[1052f30]"></a>NextMinute</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NextMinute &rArr; NextHour &rArr; NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1052f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextHour
<LI><a href="#[1053008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[10530e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1052ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next
<LI><a href="#[1052ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextSecond
</UL>

<P><STRONG><a name="[1052ee8]"></a>NextSecond</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NextSecond &rArr; NextMinute &rArr; NextHour &rArr; NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1052f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMinute
<LI><a href="#[1053008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[10530e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1052ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next
</UL>

<P><STRONG><a name="[1052ea0]"></a>Next</STRONG> (ARM, 120 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Next &rArr; NextSecond &rArr; NextMinute &rArr; NextHour &rArr; NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1052ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextSecond
<LI><a href="#[1052f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextMinute
<LI><a href="#[1052f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextHour
<LI><a href="#[1052fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextDate
<LI><a href="#[1053050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _date.o(.constdata)
</UL>
<P><STRONG><a name="[1052e58]"></a>BackDate</STRONG> (ARM, 380 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BackDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1053008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[10530e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1052d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[1052e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHour
</UL>

<P><STRONG><a name="[1052e10]"></a>BackHour</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BackHour &rArr; BackDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1052e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDate
<LI><a href="#[1053008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[10530e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1052d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[1052dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMinute
</UL>

<P><STRONG><a name="[1052dc8]"></a>BackMinute</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BackMinute &rArr; BackHour &rArr; BackDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1052e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHour
<LI><a href="#[1053008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[10530e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1052d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[1052d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSecond
</UL>

<P><STRONG><a name="[1052d80]"></a>BackSecond</STRONG> (ARM, 96 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BackSecond &rArr; BackMinute &rArr; BackHour &rArr; BackDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1052dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMinute
<LI><a href="#[1053008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[10530e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1052d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
</UL>

<P><STRONG><a name="[1052d38]"></a>Back</STRONG> (ARM, 120 bytes, Stack size 16 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Back &rArr; BackSecond &rArr; BackMinute &rArr; BackHour &rArr; BackDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1052d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackSecond
<LI><a href="#[1052dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackMinute
<LI><a href="#[1052e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHour
<LI><a href="#[1052e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDate
<LI><a href="#[1053050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _date.o(.constdata)
</UL>
<P><STRONG><a name="[1052cf0]"></a>GetWeek</STRONG> (ARM, 284 bytes, Stack size 24 bytes, _date.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetWeek &rArr; NextDate &rArr; Hex2Bcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1052fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextDate
<LI><a href="#[1053098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeDate
<LI><a href="#[1507888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _date.o(.constdata)
</UL>
<P><STRONG><a name="[1051000]"></a>Init</STRONG> (ARM, 204 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c7b940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _can.o(.data)
</UL>
<P><STRONG><a name="[1050fb8]"></a>ClearSem</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[1050e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[1050e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[1050f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[1050f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>

<P><STRONG><a name="[1050f70]"></a>Open1</STRONG> (ARM, 192 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Open1 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1050fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1050ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[1050f28]"></a>Open0</STRONG> (ARM, 192 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Open0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1050fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1050ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[1050ee0]"></a>Open</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Open &rArr; Open0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[1050f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[1050f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _can.o(.data)
</UL>
<P><STRONG><a name="[1050e98]"></a>Close1</STRONG> (ARM, 84 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close1 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1050fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1050e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[1050e50]"></a>Close0</STRONG> (ARM, 84 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1050fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1050e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[1050e08]"></a>Close</STRONG> (ARM, 52 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Close &rArr; Close0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[1050e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[1050e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _can.o(.data)
</UL>
<P><STRONG><a name="[1050dc0]"></a>Read1</STRONG> (ARM, 188 bytes, Stack size 0 bytes, _can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1050d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[1050d78]"></a>Read0</STRONG> (ARM, 188 bytes, Stack size 0 bytes, _can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1050d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[1050d30]"></a>Read</STRONG> (ARM, 64 bytes, Stack size 8 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1050d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read0
<LI><a href="#[1050dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _can.o(.data)
</UL>
<P><STRONG><a name="[1050ce8]"></a>Write1</STRONG> (ARM, 112 bytes, Stack size 0 bytes, _can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1050c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[1050ca0]"></a>Write0</STRONG> (ARM, 124 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write0
</UL>
<BR>[Calls]<UL><LI><a href="#[c81f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
</UL>
<BR>[Called By]<UL><LI><a href="#[1050c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[1050c58]"></a>Write</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Write &rArr; Write0
</UL>
<BR>[Calls]<UL><LI><a href="#[1050ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write0
<LI><a href="#[1050ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _can.o(.data)
</UL>
<P><STRONG><a name="[104e6c8]"></a>Init</STRONG> (ARM, 180 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[104e680]"></a>Open</STRONG> (ARM, 116 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[104e638]"></a>Close</STRONG> (ARM, 148 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[104e5f0]"></a>SeekChar</STRONG> (ARM, 96 bytes, Stack size 8 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[104e3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_LocationTrue
<LI><a href="#[104e3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_GetTime
<LI><a href="#[104e440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Lat
<LI><a href="#[104e488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Long
<LI><a href="#[104e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Speed
<LI><a href="#[104e518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Angle
<LI><a href="#[104e5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA_StarNumber
</UL>

<P><STRONG><a name="[104e5a8]"></a>Parse_GPGGA_StarNumber</STRONG> (ARM, 196 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Parse_GPGGA_StarNumber &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[104e5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[104e560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA
</UL>

<P><STRONG><a name="[104e560]"></a>Parse_GPGGA</STRONG> (ARM, 40 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Parse_GPGGA &rArr; Parse_GPGGA_StarNumber &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[104e5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA_StarNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[104e2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCommInput
</UL>

<P><STRONG><a name="[104e518]"></a>Parse_GPRMC_Angle</STRONG> (ARM, 192 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Parse_GPRMC_Angle &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[104e5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[104e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[104e4d0]"></a>Parse_GPRMC_Speed</STRONG> (ARM, 192 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Parse_GPRMC_Speed &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[104e5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[104e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[104e488]"></a>Parse_GPRMC_Long</STRONG> (ARM, 296 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Parse_GPRMC_Long &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[104e5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[104e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[104e440]"></a>Parse_GPRMC_Lat</STRONG> (ARM, 280 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Parse_GPRMC_Lat &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[104e5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[104e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[104e3f8]"></a>Parse_GPRMC_GetTime</STRONG> (ARM, 356 bytes, Stack size 32 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Parse_GPRMC_GetTime &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[104e5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[104e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[104e3b0]"></a>Parse_GPRMC_LocationTrue</STRONG> (ARM, 112 bytes, Stack size 20 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Parse_GPRMC_LocationTrue &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[104e5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[104e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
</UL>

<P><STRONG><a name="[104e368]"></a>Parse_GPRMC</STRONG> (ARM, 320 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Parse_GPRMC &rArr; Parse_GPRMC_GetTime &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[104e3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_LocationTrue
<LI><a href="#[104e3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_GetTime
<LI><a href="#[104e440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Lat
<LI><a href="#[104e488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Long
<LI><a href="#[104e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Speed
<LI><a href="#[104e518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[104e2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCommInput
</UL>

<P><STRONG><a name="[104e320]"></a>JugeOrder</STRONG> (ARM, 512 bytes, Stack size 40 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = JugeOrder &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[c81f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[1507b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr (via Veneer)
<LI><a href="#[1507d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[104e2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCommInput
</UL>

<P><STRONG><a name="[104e2d8]"></a>GpsCommInput</STRONG> (ARM, 112 bytes, Stack size 24 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GpsCommInput &rArr; Parse_GPRMC &rArr; Parse_GPRMC_GetTime &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[104e320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeOrder
<LI><a href="#[104e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPRMC
<LI><a href="#[104e560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_GPGGA
</UL>
<BR>[Called By]<UL><LI><a href="#[104e290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[104e290]"></a>Read</STRONG> (ARM, 84 bytes, Stack size 16 bytes, gps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Read &rArr; GpsCommInput &rArr; Parse_GPRMC &rArr; Parse_GPRMC_GetTime &rArr; SeekChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[104e2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsCommInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.constdata)
</UL>
<P><STRONG><a name="[104bab8]"></a>RTCInit</STRONG> (ARM, 80 bytes, Stack size 0 bytes, _rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104ba70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init1
</UL>

<P><STRONG><a name="[104ba70]"></a>Init1</STRONG> (ARM, 20 bytes, Stack size 4 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Init1
</UL>
<BR>[Calls]<UL><LI><a href="#[104bab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[104ba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[104ba28]"></a>Init</STRONG> (ARM, 80 bytes, Stack size 8 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[104ba70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rtc.o(.constdata)
</UL>
<P><STRONG><a name="[104b9e0]"></a>Read1</STRONG> (ARM, 188 bytes, Stack size 24 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Read1
</UL>
<BR>[Calls]<UL><LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[104b950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
<LI><a href="#[104b998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[104b998]"></a>Read</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[104b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rtc.o(.constdata)
</UL>
<P><STRONG><a name="[104b950]"></a>Write1</STRONG> (ARM, 180 bytes, Stack size 24 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Write1 &rArr; Read1
</UL>
<BR>[Calls]<UL><LI><a href="#[104b9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>
<BR>[Called By]<UL><LI><a href="#[104b908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[104b908]"></a>Write</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Write &rArr; Write1 &rArr; Read1
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[104b950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rtc.o(.constdata)
</UL>
<P><STRONG><a name="[1049980]"></a>Open</STRONG> (ARM, 148 bytes, Stack size 8 bytes, _spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Open &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[1049938]"></a>DelaySpi</STRONG> (ARM, 28 bytes, Stack size 0 bytes, _spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10498f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
</UL>

<P><STRONG><a name="[10498f0]"></a>Start</STRONG> (ARM, 116 bytes, Stack size 16 bytes, _spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Start &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1049938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelaySpi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[10498a8]"></a>RwSpi</STRONG> (ARM, 180 bytes, Stack size 4 bytes, _spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RwSpi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[1049860]"></a>Write</STRONG> (ARM, 144 bytes, Stack size 4 bytes, _spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[1049818]"></a>Read</STRONG> (ARM, 172 bytes, Stack size 0 bytes, _spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[10497d0]"></a>JugeBuf</STRONG> (ARM, 188 bytes, Stack size 0 bytes, _spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[1049788]"></a>JugeByte</STRONG> (ARM, 172 bytes, Stack size 0 bytes, _spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[1049740]"></a>End</STRONG> (ARM, 84 bytes, Stack size 8 bytes, _spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = End &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[10496f8]"></a>Close</STRONG> (ARM, 32 bytes, Stack size 0 bytes, _spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spi.o(.constdata)
</UL>
<P><STRONG><a name="[1047760]"></a>Init1</STRONG> (ARM, 56 bytes, Stack size 8 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init1 &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[1047718]"></a>CE_High</STRONG> (ARM, 40 bytes, Stack size 0 bytes, _spiflash.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spiflash.o(.text)
</UL>
<P><STRONG><a name="[10476d0]"></a>CE_Low</STRONG> (ARM, 40 bytes, Stack size 0 bytes, _spiflash.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _spiflash.o(.text)
</UL>
<P><STRONG><a name="[1047688]"></a>ReadSpiFlash</STRONG> (ARM, 164 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadSpiFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1047010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreartBad
<LI><a href="#[1047178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[1047250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[1047640]"></a>ReadStatus</STRONG> (ARM, 116 bytes, Stack size 8 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10475f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>

<P><STRONG><a name="[10475f8]"></a>ReadStatusOutTime</STRONG> (ARM, 72 bytes, Stack size 16 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1047640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1047490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOpen
<LI><a href="#[10474d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[1047520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStatus
<LI><a href="#[1047568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClose
<LI><a href="#[10475b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisable
</UL>

<P><STRONG><a name="[10475b0]"></a>WriteDisable</STRONG> (ARM, 164 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteDisable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10475f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1047568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClose
</UL>

<P><STRONG><a name="[1047568]"></a>WriteClose</STRONG> (ARM, 80 bytes, Stack size 16 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteClose &rArr; WriteDisable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10475b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDisable
<LI><a href="#[10475f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>
<BR>[Called By]<UL><LI><a href="#[10473b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSpiFlash
<LI><a href="#[1047448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiFlash
</UL>

<P><STRONG><a name="[1047520]"></a>WriteStatus</STRONG> (ARM, 172 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteStatus &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10475f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1047490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOpen
</UL>

<P><STRONG><a name="[10474d8]"></a>WriteEnable</STRONG> (ARM, 164 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10475f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1047490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOpen
</UL>

<P><STRONG><a name="[1047490]"></a>WriteOpen</STRONG> (ARM, 160 bytes, Stack size 16 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10474d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEnable
<LI><a href="#[1047520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStatus
<LI><a href="#[10475f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatusOutTime
</UL>
<BR>[Called By]<UL><LI><a href="#[10473b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSpiFlash
<LI><a href="#[1047448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiFlash
</UL>

<P><STRONG><a name="[1047448]"></a>WriteSpiFlash</STRONG> (ARM, 180 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WriteSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1047490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOpen
<LI><a href="#[1047568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClose
</UL>
<BR>[Called By]<UL><LI><a href="#[10470a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[1047370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFlash
</UL>

<P><STRONG><a name="[1047400]"></a>JugeByteSpiFlash</STRONG> (ARM, 168 bytes, Stack size 32 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JugeByteSpiFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1046f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
<LI><a href="#[1047370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFlash
</UL>

<P><STRONG><a name="[10473b8]"></a>EraseSpiFlash</STRONG> (ARM, 148 bytes, Stack size 16 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EraseSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1047490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOpen
<LI><a href="#[1047568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteClose
</UL>
<BR>[Called By]<UL><LI><a href="#[1046fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
<LI><a href="#[1047370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFlash
</UL>

<P><STRONG><a name="[1047370]"></a>InitFlash</STRONG> (ARM, 220 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitFlash &rArr; WriteSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10473b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSpiFlash
<LI><a href="#[1047400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeByteSpiFlash
<LI><a href="#[1047448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1047250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[1047328]"></a>MoveByte</STRONG> (ARM, 36 bytes, Stack size 0 bytes, _spiflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1047250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[10472e0]"></a>CompareBuf</STRONG> (ARM, 64 bytes, Stack size 4 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CompareBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1047250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[1047298]"></a>GetIDSpiFlash</STRONG> (ARM, 120 bytes, Stack size 16 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetIDSpiFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1047250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[1047250]"></a>Open</STRONG> (ARM, 388 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Open &rArr; InitFlash &rArr; WriteSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1047298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIDSpiFlash
<LI><a href="#[10472e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBuf
<LI><a href="#[1047328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[1047370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFlash
<LI><a href="#[1047688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpiFlash
<LI><a href="#[1507888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1047208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>

<P><STRONG><a name="[1047208]"></a>Open1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Open1 &rArr; Open &rArr; InitFlash &rArr; WriteSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1047250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[10471c0]"></a>Close1</STRONG> (ARM, 48 bytes, Stack size 8 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Close1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[1047178]"></a>Read</STRONG> (ARM, 76 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read &rArr; ReadSpiFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[1047688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpiFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1047130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>

<P><STRONG><a name="[1047130]"></a>Read1</STRONG> (ARM, 88 bytes, Stack size 32 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Read1 &rArr; Read &rArr; ReadSpiFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1047178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[10470e8]"></a>JugeBufSpiFlash</STRONG> (ARM, 244 bytes, Stack size 32 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JugeBufSpiFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[10470a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[10470a0]"></a>Write</STRONG> (ARM, 188 bytes, Stack size 32 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Write &rArr; WriteSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10470e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeBufSpiFlash
<LI><a href="#[1047448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiFlash
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1047010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreartBad
<LI><a href="#[1047058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
</UL>

<P><STRONG><a name="[1047058]"></a>Write1</STRONG> (ARM, 88 bytes, Stack size 32 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Write1 &rArr; Write &rArr; WriteSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[10470a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[1047010]"></a>CreartBad</STRONG> (ARM, 244 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = CreartBad &rArr; Write &rArr; WriteSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10470a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[1047688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpiFlash
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1046ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreartBad1
<LI><a href="#[1046fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
</UL>

<P><STRONG><a name="[1046fc8]"></a>Ease</STRONG> (ARM, 88 bytes, Stack size 16 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Ease &rArr; CreartBad &rArr; Write &rArr; WriteSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1047010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreartBad
<LI><a href="#[10473b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSpiFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1046f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease1
</UL>

<P><STRONG><a name="[1046f80]"></a>Ease1</STRONG> (ARM, 72 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Ease1 &rArr; Ease &rArr; CreartBad &rArr; Write &rArr; WriteSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1046fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[1046f38]"></a>Juge</STRONG> (ARM, 76 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Juge &rArr; JugeByteSpiFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[1047400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeByteSpiFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1046ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge1
</UL>

<P><STRONG><a name="[1046ef0]"></a>Juge1</STRONG> (ARM, 88 bytes, Stack size 32 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Juge1 &rArr; Juge &rArr; JugeByteSpiFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1046f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Juge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[1046ea8]"></a>CreartBad1</STRONG> (ARM, 72 bytes, Stack size 24 bytes, _spiflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = CreartBad1 &rArr; CreartBad &rArr; Write &rArr; WriteSpiFlash &rArr; WriteOpen &rArr; WriteEnable &rArr; ReadStatusOutTime &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1047010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreartBad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _spiflash.o(.constdata)
</UL>
<P><STRONG><a name="[1044f70]"></a>Init</STRONG> (ARM, 380 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c7b940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _uart.o(.constdata)
</UL>
<P><STRONG><a name="[1044f28]"></a>ClearSem</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[1044ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[1044ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[1044d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close2
<LI><a href="#[1044d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close3
<LI><a href="#[1044e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[1044e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[1044e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open2
<LI><a href="#[1044ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open3
</UL>

<P><STRONG><a name="[1044ee0]"></a>Open3</STRONG> (ARM, 536 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Open3 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1044f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1044dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[1044e98]"></a>Open2</STRONG> (ARM, 536 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Open2 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1044f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1044dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[1044e50]"></a>Open1</STRONG> (ARM, 548 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Open1 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1044f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1044dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[1044e08]"></a>Open0</STRONG> (ARM, 556 bytes, Stack size 24 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Open0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1044f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1044dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[1044dc0]"></a>Open</STRONG> (ARM, 104 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Open &rArr; Open0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[1044e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open0
<LI><a href="#[1044e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
<LI><a href="#[1044e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open2
<LI><a href="#[1044ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _uart.o(.constdata)
</UL>
<P><STRONG><a name="[1044d78]"></a>Close3</STRONG> (ARM, 96 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close3 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1044f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1044c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[1044d30]"></a>Close2</STRONG> (ARM, 92 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close2 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1044f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1044c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[1044ce8]"></a>Close1</STRONG> (ARM, 92 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close1 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1044f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1044c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[1044ca0]"></a>Close0</STRONG> (ARM, 92 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Close0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1044f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1044c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>

<P><STRONG><a name="[1044c58]"></a>Close</STRONG> (ARM, 84 bytes, Stack size 8 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Close &rArr; Close0 &rArr; ClearSem &rArr; OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[1044ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close0
<LI><a href="#[1044ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
<LI><a href="#[1044d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close2
<LI><a href="#[1044d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _uart.o(.constdata)
</UL>
<P><STRONG><a name="[1044c10]"></a>Receive3Byte</STRONG> (ARM, 120 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1044bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read3
</UL>

<P><STRONG><a name="[1044bc8]"></a>Read3</STRONG> (ARM, 80 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read3
</UL>
<BR>[Calls]<UL><LI><a href="#[1044c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive3Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[10449d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[1044b80]"></a>Receive2Byte</STRONG> (ARM, 120 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1044b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read2
</UL>

<P><STRONG><a name="[1044b38]"></a>Read2</STRONG> (ARM, 204 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read2
</UL>
<BR>[Calls]<UL><LI><a href="#[1044b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[10449d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[1044af0]"></a>Receive1Byte</STRONG> (ARM, 120 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1044aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
</UL>

<P><STRONG><a name="[1044aa8]"></a>Read1</STRONG> (ARM, 80 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read1
</UL>
<BR>[Calls]<UL><LI><a href="#[1044af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[10449d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[1044a60]"></a>Receive0Byte</STRONG> (ARM, 120 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1044a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read0
</UL>

<P><STRONG><a name="[1044a18]"></a>Read0</STRONG> (ARM, 80 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read0
</UL>
<BR>[Calls]<UL><LI><a href="#[1044a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive0Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[10449d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[10449d0]"></a>Read</STRONG> (ARM, 124 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Read &rArr; Read0
</UL>
<BR>[Calls]<UL><LI><a href="#[1044a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read0
<LI><a href="#[1044aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read1
<LI><a href="#[1044b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read2
<LI><a href="#[1044bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _uart.o(.constdata)
</UL>
<P><STRONG><a name="[1044988]"></a>Write3</STRONG> (ARM, 68 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1044868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[1044940]"></a>Write2</STRONG> (ARM, 68 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1044868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[10448f8]"></a>Write1</STRONG> (ARM, 68 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1044868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[10448b0]"></a>Write0</STRONG> (ARM, 68 bytes, Stack size 0 bytes, _uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1044868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[1044868]"></a>Write</STRONG> (ARM, 124 bytes, Stack size 16 bytes, _uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10448b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write0
<LI><a href="#[10448f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write1
<LI><a href="#[1044940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write2
<LI><a href="#[1044988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _uart.o(.constdata)
</UL>
<P><STRONG><a name="[11eb668]"></a>LookOrder</STRONG> (ARM, 68 bytes, Stack size 0 bytes, gprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>

<P><STRONG><a name="[11eb620]"></a>ModermCom</STRONG> (ARM, 564 bytes, Stack size 48 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c81f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[11eb668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookOrder
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11ea348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSync
<LI><a href="#[11ea390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChipID
<LI><a href="#[11ea3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModermCard
<LI><a href="#[11ea6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpIPState
<LI><a href="#[11ea6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSR_Conversion
<LI><a href="#[11ea8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer_Phone
<LI><a href="#[11ea930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingUp
<LI><a href="#[11ea9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call_Phone
<LI><a href="#[11eaae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxtOrPdu
<LI><a href="#[11eab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[11ead68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseShow
<LI><a href="#[11eadb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIPR
<LI><a href="#[11eadf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mem
<LI><a href="#[11eae40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCLIP
<LI><a href="#[11eae88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Message
<LI><a href="#[11eaed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpadateSet
<LI><a href="#[11eaf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTCPUDP
<LI><a href="#[11eaff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModermState
<LI><a href="#[11eb038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeeCLCC
<LI><a href="#[11eb080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Net
<LI><a href="#[11eb0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;See_De_Moderm_Com_SQ
<LI><a href="#[11eb110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeeCarrier
<LI><a href="#[11eb158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMEI
<LI><a href="#[11eb1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCenterNumber
<LI><a href="#[11eb230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUdpTcp
<LI><a href="#[11eb398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPData
<LI><a href="#[11eb3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLink
<LI><a href="#[11eb428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLink
<LI><a href="#[11eb548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[11eb5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelMsg
</UL>

<P><STRONG><a name="[11eb5d8]"></a>DelMsg</STRONG> (ARM, 260 bytes, Stack size 48 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eb4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySim
</UL>

<P><STRONG><a name="[11eb590]"></a>SeekChar</STRONG> (ARM, 96 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SeekChar
</UL>
<BR>[Called By]<UL><LI><a href="#[11eb1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCenterNumber
<LI><a href="#[11eb548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
</UL>

<P><STRONG><a name="[11eb548]"></a>GetMessage</STRONG> (ARM, 588 bytes, Stack size 56 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eb500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMessageCen
</UL>

<P><STRONG><a name="[11eb500]"></a>ReadMessageCen</STRONG> (ARM, 204 bytes, Stack size 32 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[11eb4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySim
</UL>

<P><STRONG><a name="[11eb4b8]"></a>QuerySim</STRONG> (ARM, 584 bytes, Stack size 40 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMessageCen
<LI><a href="#[11eb5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[11eac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[11eb470]"></a>Ip2Char</STRONG> (ARM, 296 bytes, Stack size 40 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ip2Char
</UL>
<BR>[Called By]<UL><LI><a href="#[11eb428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLink
</UL>

<P><STRONG><a name="[11eb428]"></a>OpenLink</STRONG> (ARM, 160 bytes, Stack size 88 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OpenLink &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ip2Char
<LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11ea5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EditUDPTCPPro
<LI><a href="#[11ea780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUDPTCP
<LI><a href="#[11eaf18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReOpenLink
<LI><a href="#[11eb2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartAffair
</UL>

<P><STRONG><a name="[11eb3e0]"></a>CloseLink</STRONG> (ARM, 188 bytes, Stack size 40 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = CloseLink &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11ea5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EditUDPTCPPro
<LI><a href="#[11ea738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseUDPTCP
<LI><a href="#[11eb2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartAffair
</UL>

<P><STRONG><a name="[11eb398]"></a>SendIPData</STRONG> (ARM, 216 bytes, Stack size 56 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SendIPData &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eb350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTCPUDP
</UL>

<P><STRONG><a name="[11eb350]"></a>SendTCPUDP</STRONG> (ARM, 148 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SendTCPUDP &rArr; SendIPData &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11eb398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPData
</UL>
<BR>[Called By]<UL><LI><a href="#[11eb2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartAffair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11eb308]"></a>GetTimeAdd</STRONG> (ARM, 188 bytes, Stack size 24 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11eb2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartAffair
</UL>

<P><STRONG><a name="[11eb2c0]"></a>HeartAffair</STRONG> (ARM, 744 bytes, Stack size 24 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11eb308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
<LI><a href="#[11eb350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendTCPUDP
<LI><a href="#[11eb3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLink
<LI><a href="#[11eb428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLink
</UL>
<BR>[Called By]<UL><LI><a href="#[11eac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[11eb278]"></a>JugeEvent</STRONG> (ARM, 436 bytes, Stack size 24 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[11eb1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCPIP
</UL>

<P><STRONG><a name="[11eb230]"></a>ReadUdpTcp</STRONG> (ARM, 532 bytes, Stack size 40 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eb1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCPIP
</UL>

<P><STRONG><a name="[11eb1e8]"></a>ReceiveTCPIP</STRONG> (ARM, 236 bytes, Stack size 24 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadUdpTcp
<LI><a href="#[11eb278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[11eac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[11eb1a0]"></a>GetCenterNumber</STRONG> (ARM, 380 bytes, Stack size 64 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GetCenterNumber &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekChar
<LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
<LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
</UL>

<P><STRONG><a name="[11eb158]"></a>GetIMEI</STRONG> (ARM, 280 bytes, Stack size 72 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = GetIMEI &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
<LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
</UL>

<P><STRONG><a name="[11eb110]"></a>SeeCarrier</STRONG> (ARM, 260 bytes, Stack size 56 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SeeCarrier &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
<LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
</UL>

<P><STRONG><a name="[11eb0c8]"></a>See_De_Moderm_Com_SQ</STRONG> (ARM, 268 bytes, Stack size 64 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
</UL>

<P><STRONG><a name="[11eb080]"></a>Res_Net</STRONG> (ARM, 228 bytes, Stack size 64 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
</UL>

<P><STRONG><a name="[11eb038]"></a>SeeCLCC</STRONG> (ARM, 256 bytes, Stack size 120 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
</UL>

<P><STRONG><a name="[11eaff0]"></a>GetModermState</STRONG> (ARM, 184 bytes, Stack size 64 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = GetModermState &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
<LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
</UL>

<P><STRONG><a name="[11eafa8]"></a>ModelState</STRONG> (ARM, 1284 bytes, Stack size 88 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c81f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[11eaff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModermState
<LI><a href="#[11eb038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeeCLCC
<LI><a href="#[11eb080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Net
<LI><a href="#[11eb0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;See_De_Moderm_Com_SQ
<LI><a href="#[11eb110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeeCarrier
<LI><a href="#[11eb158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMEI
<LI><a href="#[11eb1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCenterNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[11eac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[11eaf60]"></a>InitTCPUDP</STRONG> (ARM, 740 bytes, Stack size 56 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = InitTCPUDP &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11ea810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTCPIP
<LI><a href="#[11eaf18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReOpenLink
</UL>

<P><STRONG><a name="[11eaf18]"></a>ReOpenLink</STRONG> (ARM, 156 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ReOpenLink &rArr; OpenLink &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eaf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTCPUDP
<LI><a href="#[11eb428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLink
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
</UL>

<P><STRONG><a name="[11eaed0]"></a>UpadateSet</STRONG> (ARM, 164 bytes, Stack size 32 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = UpadateSet &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
</UL>

<P><STRONG><a name="[11eae88]"></a>Set_Message</STRONG> (ARM, 132 bytes, Stack size 40 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Set_Message &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
</UL>

<P><STRONG><a name="[11eae40]"></a>SetCLIP</STRONG> (ARM, 140 bytes, Stack size 56 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SetCLIP &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
</UL>

<P><STRONG><a name="[11eadf8]"></a>Set_Mem</STRONG> (ARM, 132 bytes, Stack size 48 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Set_Mem &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
</UL>

<P><STRONG><a name="[11eadb0]"></a>SetIPR</STRONG> (ARM, 164 bytes, Stack size 56 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SetIPR &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
</UL>

<P><STRONG><a name="[11ead68]"></a>CloseShow</STRONG> (ARM, 136 bytes, Stack size 32 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = CloseShow &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
</UL>

<P><STRONG><a name="[11ead20]"></a>ModermPowerDown</STRONG> (ARM, 92 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModermPowerDown &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
</UL>

<P><STRONG><a name="[11eacd8]"></a>InitModel</STRONG> (ARM, 596 bytes, Stack size 32 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = InitModel &rArr; ReOpenLink &rArr; OpenLink &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[11ead20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermPowerDown
<LI><a href="#[11ead68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseShow
<LI><a href="#[11eadb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIPR
<LI><a href="#[11eadf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mem
<LI><a href="#[11eae40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCLIP
<LI><a href="#[11eae88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Message
<LI><a href="#[11eaed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpadateSet
<LI><a href="#[11eaf18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReOpenLink
<LI><a href="#[11eaff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModermState
<LI><a href="#[11eb110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeeCarrier
<LI><a href="#[11eb158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIMEI
<LI><a href="#[11eb1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCenterNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[11eac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[11eac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[11eac90]"></a>Task</STRONG> (ARM, 348 bytes, Stack size 24 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
<LI><a href="#[11eafa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelState
<LI><a href="#[11eb1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveTCPIP
<LI><a href="#[11eb2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartAffair
<LI><a href="#[11eb4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuerySim
</UL>

<P><STRONG><a name="[11eac48]"></a>Init</STRONG> (ARM, 364 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Init &rArr; InitModel &rArr; ReOpenLink &rArr; OpenLink &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c77708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[11eacd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11eac00]"></a>OpenMessage</STRONG> (ARM, 244 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OpenMessage &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11eabb8]"></a>ReadMessage</STRONG> (ARM, 208 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadMessage &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11eab70]"></a>ReadPhone</STRONG> (ARM, 104 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadPhone &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11eab28]"></a>MsgSend</STRONG> (ARM, 428 bytes, Stack size 72 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = MsgSend &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eaa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessageCen
</UL>

<P><STRONG><a name="[11eaae0]"></a>SetTxtOrPdu</STRONG> (ARM, 144 bytes, Stack size 56 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SetTxtOrPdu &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11eaa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessageCen
</UL>

<P><STRONG><a name="[11eaa98]"></a>SendMessageCen</STRONG> (ARM, 92 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SendMessageCen &rArr; MsgSend &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eaae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxtOrPdu
<LI><a href="#[11eab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
</UL>
<BR>[Called By]<UL><LI><a href="#[11eaa50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessage
</UL>

<P><STRONG><a name="[11eaa50]"></a>SendMessage</STRONG> (ARM, 80 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SendMessage &rArr; SendMessageCen &rArr; MsgSend &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11eaa98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMessageCen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11eaa08]"></a>CloseMessage</STRONG> (ARM, 112 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CloseMessage &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea9c0]"></a>Call_Phone</STRONG> (ARM, 228 bytes, Stack size 64 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Call_Phone &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11ea978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallPhone
</UL>

<P><STRONG><a name="[11ea978]"></a>CallPhone</STRONG> (ARM, 92 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = CallPhone &rArr; Call_Phone &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11ea9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call_Phone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea930]"></a>RingUp</STRONG> (ARM, 92 bytes, Stack size 40 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = RingUp &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11ea8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HangPhone
</UL>

<P><STRONG><a name="[11ea8e8]"></a>HangPhone</STRONG> (ARM, 84 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = HangPhone &rArr; RingUp &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11ea930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea8a0]"></a>Answer_Phone</STRONG> (ARM, 140 bytes, Stack size 56 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Answer_Phone &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11ea858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerPhone
</UL>

<P><STRONG><a name="[11ea858]"></a>AnswerPhone</STRONG> (ARM, 84 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = AnswerPhone &rArr; Answer_Phone &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11ea8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Answer_Phone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea810]"></a>InitTCPIP</STRONG> (ARM, 92 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = InitTCPIP &rArr; InitTCPUDP &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11eaf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTCPUDP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea7c8]"></a>SeekSpace</STRONG> (ARM, 124 bytes, Stack size 0 bytes, gprs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11ea780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUDPTCP
</UL>

<P><STRONG><a name="[11ea780]"></a>OpenUDPTCP</STRONG> (ARM, 296 bytes, Stack size 32 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OpenUDPTCP &rArr; OpenLink &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11ea7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSpace
<LI><a href="#[11eb428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea738]"></a>CloseUDPTCP</STRONG> (ARM, 148 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = CloseUDPTCP &rArr; CloseLink &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11eb3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea6f0]"></a>DNSR_Conversion</STRONG> (ARM, 336 bytes, Stack size 88 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = DNSR_Conversion &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11ea660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSRIP
</UL>

<P><STRONG><a name="[11ea6a8]"></a>TcpIPState</STRONG> (ARM, 196 bytes, Stack size 120 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = TcpIPState &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>
<BR>[Called By]<UL><LI><a href="#[11ea660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSRIP
</UL>

<P><STRONG><a name="[11ea660]"></a>DNSRIP</STRONG> (ARM, 208 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DNSRIP &rArr; TcpIPState &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11ea6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpIPState
<LI><a href="#[11ea6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSR_Conversion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea618]"></a>ReadIpData</STRONG> (ARM, 220 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadIpData &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea5d0]"></a>EditUDPTCPPro</STRONG> (ARM, 288 bytes, Stack size 24 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EditUDPTCPPro &rArr; OpenLink &rArr; ModermCom
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11eb3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLink
<LI><a href="#[11eb428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea588]"></a>GetUDPTCPPro</STRONG> (ARM, 96 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetUDPTCPPro &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea540]"></a>Enable</STRONG> (ARM, 60 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Enable &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea4f8]"></a>DisEnable</STRONG> (ARM, 60 bytes, Stack size 8 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisEnable &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea4b0]"></a>GetEnable</STRONG> (ARM, 64 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetEnable &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea468]"></a>GetPro</STRONG> (ARM, 80 bytes, Stack size 16 bytes, gprs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetPro &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea420]"></a>EditCen</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gprs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gprs.o(.constdata)
</UL>
<P><STRONG><a name="[11ea3d8]"></a>GetModermCard</STRONG> (ARM, 140 bytes, Stack size 96 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>

<P><STRONG><a name="[11ea390]"></a>GetChipID</STRONG> (ARM, 244 bytes, Stack size 64 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>

<P><STRONG><a name="[11ea348]"></a>EnableSync</STRONG> (ARM, 136 bytes, Stack size 32 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermCom
</UL>

<P><STRONG><a name="[11ea300]"></a>MODEM_Dly100ms</STRONG> (ARM, 128 bytes, Stack size 4 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11ea2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModermPowerUp
</UL>

<P><STRONG><a name="[11ea2b8]"></a>ModermPowerUp</STRONG> (ARM, 152 bytes, Stack size 4 bytes, gprs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11ea300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_Dly100ms
</UL>

<P><STRONG><a name="[11e6ed0]"></a>JugeAffair</STRONG> (ARM, 560 bytes, Stack size 24 bytes, gpstask.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e6e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsTask
</UL>

<P><STRONG><a name="[11e6e88]"></a>GpsTask</STRONG> (ARM, 132 bytes, Stack size 16 bytes, gpstask.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c81f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[11e6ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeAffair
</UL>

<P><STRONG><a name="[11e6e40]"></a>Init</STRONG> (ARM, 336 bytes, Stack size 24 bytes, gpstask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpstask.o(.constdata)
</UL>
<P><STRONG><a name="[11e6df8]"></a>SeekSpace</STRONG> (ARM, 56 bytes, Stack size 0 bytes, gpstask.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e6db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[11e6db0]"></a>Open</STRONG> (ARM, 208 bytes, Stack size 24 bytes, gpstask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[11e6df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpstask.o(.constdata)
</UL>
<P><STRONG><a name="[11e6d68]"></a>Close</STRONG> (ARM, 100 bytes, Stack size 16 bytes, gpstask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpstask.o(.constdata)
</UL>
<P><STRONG><a name="[11e6d20]"></a>Read</STRONG> (ARM, 80 bytes, Stack size 16 bytes, gpstask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpstask.o(.constdata)
</UL>
<P><STRONG><a name="[11e6cd8]"></a>PowerOpen</STRONG> (ARM, 120 bytes, Stack size 8 bytes, gpstask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PowerOpen &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpstask.o(.constdata)
</UL>
<P><STRONG><a name="[11e6c90]"></a>PowerClose</STRONG> (ARM, 184 bytes, Stack size 8 bytes, gpstask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PowerClose &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpstask.o(.constdata)
</UL>
<P><STRONG><a name="[12df820]"></a>JugeEvent</STRONG> (ARM, 304 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[12df790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[12df7d8]"></a>GetTimeAdd</STRONG> (ARM, 188 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12df790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[12df790]"></a>Task</STRONG> (ARM, 268 bytes, Stack size 32 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c81f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[12df7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeAdd
<LI><a href="#[12df820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JugeEvent
</UL>

<P><STRONG><a name="[12df748]"></a>Init</STRONG> (ARM, 124 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[12df700]"></a>SeekSpace</STRONG> (ARM, 60 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12df6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[12df6b8]"></a>Open</STRONG> (ARM, 332 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Open &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12df700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[12df670]"></a>Close</STRONG> (ARM, 80 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[12df628]"></a>Read</STRONG> (ARM, 80 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[12df5e0]"></a>Enable</STRONG> (ARM, 108 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Enable &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[12df598]"></a>DisEnable</STRONG> (ARM, 108 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DisEnable &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[12df550]"></a>GetEnable</STRONG> (ARM, 112 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetEnable &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[12df508]"></a>GetPro</STRONG> (ARM, 116 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetPro &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[12df4c0]"></a>EditPro</STRONG> (ARM, 132 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EditPro &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.constdata)
</UL>
<P><STRONG><a name="[12da370]"></a>FtpTaskInit</STRONG> (ARM, 692 bytes, Stack size 160 bytes, ftp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12da328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTP_Downloard_Task
</UL>

<P><STRONG><a name="[12da328]"></a>FTP_Downloard_Task</STRONG> (ARM, 392 bytes, Stack size 80 bytes, ftp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7b8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c81f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[12da370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpTaskInit
</UL>

<P><STRONG><a name="[12da2e0]"></a>Init</STRONG> (ARM, 116 bytes, Stack size 8 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c77708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c7b940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.constdata)
</UL>
<P><STRONG><a name="[12da298]"></a>FTP_CtrReceive</STRONG> (ARM, 44 bytes, Stack size 24 bytes, ftp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FTP_CtrReceive &rArr; OSMboxPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7b868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.constdata)
</UL>
<P><STRONG><a name="[12da1c0]"></a>GetState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ftp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ftp.o(.constdata)
</UL>
<P><STRONG><a name="[12d7988]"></a>ClsArray</STRONG> (ARM, 36 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d7088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
<LI><a href="#[12d7118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[12d71a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
<LI><a href="#[12d7430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[12d74c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileNameAgain
<LI><a href="#[12d7628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[12d76b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
<LI><a href="#[12d7940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[12d7940]"></a>Init</STRONG> (ARM, 44 bytes, Stack size 8 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
</UL>
<BR>[Called By]<UL><LI><a href="#[12d78f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init1
</UL>

<P><STRONG><a name="[12d78f8]"></a>Init1</STRONG> (ARM, 40 bytes, Stack size 8 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init1 &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c78428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[12d7940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d78b0]"></a>Crc</STRONG> (ARM, 112 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[12d77d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecode
<LI><a href="#[12d7868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecode
</UL>

<P><STRONG><a name="[12d7868]"></a>WriteRecode</STRONG> (ARM, 236 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d78b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[12d7628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[12d76b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
<LI><a href="#[12d77d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecode
</UL>

<P><STRONG><a name="[12d7820]"></a>MoveByte</STRONG> (ARM, 36 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d6e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPor
<LI><a href="#[12d7088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
<LI><a href="#[12d71a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
<LI><a href="#[12d7430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[12d74c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileNameAgain
<LI><a href="#[12d7508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfor
<LI><a href="#[12d7628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[12d76b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>

<P><STRONG><a name="[12d77d8]"></a>ReadRecode</STRONG> (ARM, 484 bytes, Stack size 40 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecode
<LI><a href="#[12d78b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeadTailPoint
<LI><a href="#[12d7748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookSpace
</UL>

<P><STRONG><a name="[12d7790]"></a>CompareBuf</STRONG> (ARM, 64 bytes, Stack size 4 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CompareBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d71a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
<LI><a href="#[12d74c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileNameAgain
<LI><a href="#[12d7748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookSpace
</UL>

<P><STRONG><a name="[12d7748]"></a>LookSpace</STRONG> (ARM, 312 bytes, Stack size 56 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBuf
<LI><a href="#[12d77d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecode
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
<LI><a href="#[12d7628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[12d76b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>

<P><STRONG><a name="[12d7700]"></a>LookChip</STRONG> (ARM, 56 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d7628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
<LI><a href="#[12d76b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>

<P><STRONG><a name="[12d76b8]"></a>CreateBin</STRONG> (ARM, 472 bytes, Stack size 80 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CreateBin &rArr; LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookChip
<LI><a href="#[12d7748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookSpace
<LI><a href="#[12d7820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[12d7868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecode
<LI><a href="#[12d7988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1507d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[1507fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin1
</UL>

<P><STRONG><a name="[12d7670]"></a>CreateBin1</STRONG> (ARM, 76 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = CreateBin1 &rArr; CreateBin &rArr; LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d76b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d7628]"></a>CreateRecoder</STRONG> (ARM, 600 bytes, Stack size 112 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CreateRecoder &rArr; LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookChip
<LI><a href="#[12d7748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookSpace
<LI><a href="#[12d7820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[12d7868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecode
<LI><a href="#[12d7988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[1507888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1507d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[1507fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d75e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder1
</UL>

<P><STRONG><a name="[12d75e0]"></a>CreateRecoder1</STRONG> (ARM, 92 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CreateRecoder1 &rArr; CreateRecoder &rArr; LookSpace &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d7628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRecoder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d7598]"></a>LookHeadTailFF</STRONG> (ARM, 220 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LookHeadTailFF
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[12d7550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeadTailPoint
</UL>

<P><STRONG><a name="[12d7550]"></a>GetHeadTailPoint</STRONG> (ARM, 312 bytes, Stack size 40 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetHeadTailPoint &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookHeadTailFF
<LI><a href="#[12d77d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecode
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfor
</UL>

<P><STRONG><a name="[12d7508]"></a>GetFileInfor</STRONG> (ARM, 280 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetFileInfor &rArr; GetHeadTailPoint &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeadTailPoint
<LI><a href="#[12d7820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[12d74c0]"></a>LookFileNameAgain</STRONG> (ARM, 212 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LookFileNameAgain &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBuf
<LI><a href="#[12d7820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[12d7988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[1507d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[12d7478]"></a>LookFileBufSpace</STRONG> (ARM, 68 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d7430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>

<P><STRONG><a name="[12d7430]"></a>Open</STRONG> (ARM, 268 bytes, Stack size 72 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Open &rArr; GetFileInfor &rArr; GetHeadTailPoint &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileBufSpace
<LI><a href="#[12d74c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookFileNameAgain
<LI><a href="#[12d7508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFileInfor
<LI><a href="#[12d7748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookSpace
<LI><a href="#[12d7820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[12d7988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[1507d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d73e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open1
</UL>

<P><STRONG><a name="[12d73e8]"></a>Open1</STRONG> (ARM, 76 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Open1 &rArr; Open &rArr; GetFileInfor &rArr; GetHeadTailPoint &rArr; ReadRecode &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d7430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d73a0]"></a>Close</STRONG> (ARM, 32 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d7358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close1
</UL>

<P><STRONG><a name="[12d7358]"></a>Close1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Close1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d73a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d7310]"></a>ReadBin</STRONG> (ARM, 232 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadBin
</UL>
<BR>[Called By]<UL><LI><a href="#[12d72c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBin1
</UL>

<P><STRONG><a name="[12d72c8]"></a>ReadBin1</STRONG> (ARM, 88 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadBin1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d7310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d7280]"></a>WriteBin</STRONG> (ARM, 236 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteBin
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBin1
</UL>

<P><STRONG><a name="[12d7238]"></a>WriteBin1</STRONG> (ARM, 88 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteBin1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d7280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d71f0]"></a>GetJlNum</STRONG> (ARM, 188 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d6ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum1
<LI><a href="#[12d7088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
<LI><a href="#[12d71a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
</UL>

<P><STRONG><a name="[12d71a8]"></a>ReadRecoder1</STRONG> (ARM, 1768 bytes, Stack size 48 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ReadRecoder1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12d71f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum
<LI><a href="#[12d7790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareBuf
<LI><a href="#[12d7820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[12d7988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1507888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder2
</UL>

<P><STRONG><a name="[12d7160]"></a>ReadRecoder2</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ReadRecoder2 &rArr; ReadRecoder1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d71a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecoder1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d7118]"></a>fWriteHeadTail</STRONG> (ARM, 620 bytes, Stack size 40 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fWriteHeadTail &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LookHeadTailFF
<LI><a href="#[12d7868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecode
<LI><a href="#[12d78b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc
<LI><a href="#[12d7988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[1508430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d70d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHeadTailPoint
</UL>

<P><STRONG><a name="[12d70d0]"></a>UpdateHeadTailPoint</STRONG> (ARM, 332 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UpdateHeadTailPoint &rArr; fWriteHeadTail &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d7118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fWriteHeadTail
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1507888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
</UL>

<P><STRONG><a name="[12d7088]"></a>WriteRecoder1</STRONG> (ARM, 1356 bytes, Stack size 56 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = WriteRecoder1 &rArr; UpdateHeadTailPoint &rArr; fWriteHeadTail &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[12d70d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHeadTailPoint
<LI><a href="#[12d71f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum
<LI><a href="#[12d7820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[12d7988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClsArray
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1507888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d7040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder2
</UL>

<P><STRONG><a name="[12d7040]"></a>WriteRecoder2</STRONG> (ARM, 84 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WriteRecoder2 &rArr; WriteRecoder1 &rArr; UpdateHeadTailPoint &rArr; fWriteHeadTail &rArr; WriteRecode &rArr; Crc
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d7088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRecoder1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d6ff8]"></a>GetJlNum1</STRONG> (ARM, 64 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetJlNum1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d71f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJlNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d6fb0]"></a>Seek</STRONG> (ARM, 12 bytes, Stack size 0 bytes, _rwfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d6f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek1
</UL>

<P><STRONG><a name="[12d6f68]"></a>Seek1</STRONG> (ARM, 88 bytes, Stack size 32 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Seek1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d6fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d6f20]"></a>SeekSize</STRONG> (ARM, 36 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SeekSize
</UL>
<BR>[Called By]<UL><LI><a href="#[12d6ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSize1
</UL>

<P><STRONG><a name="[12d6ed8]"></a>SeekSize1</STRONG> (ARM, 108 bytes, Stack size 64 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SeekSize1 &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d6f20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d6e90]"></a>ReadHeadTail</STRONG> (ARM, 120 bytes, Stack size 24 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadHeadTail &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d6e48]"></a>ReadPor</STRONG> (ARM, 84 bytes, Stack size 16 bytes, _rwfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadPor &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[c78350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c78398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[12d7820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwfile.o(.constdata)
</UL>
<P><STRONG><a name="[12d49c0]"></a>Open</STRONG> (ARM, 156 bytes, Stack size 16 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwflashlgc.o(.constdata)
</UL>
<P><STRONG><a name="[12d4978]"></a>Lgc2Phy</STRONG> (ARM, 120 bytes, Stack size 4 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Lgc2Phy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d4810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ease
<LI><a href="#[12d48a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[12d4930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[12d4930]"></a>Read</STRONG> (ARM, 364 bytes, Stack size 40 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = Read &rArr; Lgc2Phy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d4978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lgc2Phy
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwflashlgc.o(.constdata)
</UL>
<P><STRONG><a name="[12d48e8]"></a>MoveByte</STRONG> (ARM, 36 bytes, Stack size 0 bytes, _rwflashlgc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d48a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
</UL>

<P><STRONG><a name="[12d48a0]"></a>WriteBlock</STRONG> (ARM, 676 bytes, Stack size 40 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = WriteBlock &rArr; Lgc2Phy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d48e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByte
<LI><a href="#[12d4978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lgc2Phy
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d4858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[12d4858]"></a>Write</STRONG> (ARM, 252 bytes, Stack size 32 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = Write &rArr; WriteBlock &rArr; Lgc2Phy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d48a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlock
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwflashlgc.o(.constdata)
</UL>
<P><STRONG><a name="[12d4810]"></a>Ease</STRONG> (ARM, 216 bytes, Stack size 16 bytes, _rwflashlgc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Ease &rArr; Lgc2Phy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d4978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lgc2Phy
<LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _rwflashlgc.o(.constdata)
</UL>
<P><STRONG><a name="[12d26c8]"></a>Trans_Gps_State</STRONG> (ARM, 160 bytes, Stack size 16 bytes, _datatrans.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12d1708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Hand
<LI><a href="#[12d1750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps
</UL>

<P><STRONG><a name="[12d2680]"></a>Trans_Gps_Year</STRONG> (ARM, 104 bytes, Stack size 16 bytes, _datatrans.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12d1708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Hand
<LI><a href="#[12d1750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps
</UL>

<P><STRONG><a name="[12d2638]"></a>Trans_Gps_Angle</STRONG> (ARM, 156 bytes, Stack size 32 bytes, _datatrans.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1507d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[1508430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d1708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Hand
<LI><a href="#[12d1750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps
</UL>

<P><STRONG><a name="[12d25f0]"></a>Trans_Gps_Speed</STRONG> (ARM, 144 bytes, Stack size 32 bytes, _datatrans.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1507d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[1508430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d1708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Hand
<LI><a href="#[12d1750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps
</UL>

<P><STRONG><a name="[12d25a8]"></a>Trans_Gps_Location</STRONG> (ARM, 288 bytes, Stack size 0 bytes, _datatrans.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12d1708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Hand
<LI><a href="#[12d1750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps
</UL>

<P><STRONG><a name="[12d2560]"></a>Trans_Gps_LongHem</STRONG> (ARM, 140 bytes, Stack size 32 bytes, _datatrans.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1507d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[1508430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d1708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Hand
<LI><a href="#[12d1750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps
</UL>

<P><STRONG><a name="[12d2518]"></a>Trans_Gps_Latitude</STRONG> (ARM, 140 bytes, Stack size 32 bytes, _datatrans.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1507d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[1508430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d1708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Hand
<LI><a href="#[12d1750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps
</UL>

<P><STRONG><a name="[12d24d0]"></a>Trans_Gps_Timer</STRONG> (ARM, 48 bytes, Stack size 16 bytes, _datatrans.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12d1708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps_Hand
<LI><a href="#[12d1750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Gps
</UL>

<P><STRONG><a name="[139e890]"></a>Get_Sys_State</STRONG> (ARM, 296 bytes, Stack size 16 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139cb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackInit
<LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[139e848]"></a>CheckFile_GpsMessage</STRONG> (ARM, 104 bytes, Stack size 8 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[139e800]"></a>CheckFile_Message</STRONG> (ARM, 184 bytes, Stack size 48 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[139e7b8]"></a>CheckFile_MessageState</STRONG> (ARM, 288 bytes, Stack size 8 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[139e770]"></a>BackUpLoader</STRONG> (ARM, 60 bytes, Stack size 16 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139cb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackInit
<LI><a href="#[139e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_UpLoader
</UL>

<P><STRONG><a name="[139e728]"></a>CheckFile_UpLoader</STRONG> (ARM, 144 bytes, Stack size 8 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139e770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackUpLoader
</UL>
<BR>[Called By]<UL><LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[139e6e0]"></a>BackAccTimer</STRONG> (ARM, 52 bytes, Stack size 8 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139cb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackInit
<LI><a href="#[139e698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_Acc
</UL>

<P><STRONG><a name="[139e698]"></a>CheckFile_Acc</STRONG> (ARM, 144 bytes, Stack size 8 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackAccTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[139e650]"></a>BackPareameter</STRONG> (ARM, 364 bytes, Stack size 104 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139cb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackInit
<LI><a href="#[139e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_Parameter
</UL>

<P><STRONG><a name="[139e608]"></a>CheckFile_Parameter</STRONG> (ARM, 144 bytes, Stack size 8 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139e650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackPareameter
</UL>
<BR>[Called By]<UL><LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[139e5c0]"></a>BackCan</STRONG> (ARM, 116 bytes, Stack size 24 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139cb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackInit
<LI><a href="#[139e578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_CanID
</UL>

<P><STRONG><a name="[139e578]"></a>CheckFile_CanID</STRONG> (ARM, 144 bytes, Stack size 8 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackCan
</UL>
<BR>[Called By]<UL><LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[139e530]"></a>BackBasic</STRONG> (ARM, 268 bytes, Stack size 40 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile_Basic
</UL>

<P><STRONG><a name="[139e4e8]"></a>CheckFile_Basic</STRONG> (ARM, 144 bytes, Stack size 8 bytes, _filedata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139e530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[139a0c0]"></a>InitContrl</STRONG> (ARM, 164 bytes, Stack size 304 bytes, _init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7b868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1398728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[139a078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[139a078]"></a>Init</STRONG> (ARM, 156 bytes, Stack size 8 bytes, _init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7d460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[139a0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitContrl
<LI><a href="#[139cbe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCenPhone
<LI><a href="#[139cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFile
</UL>

<P><STRONG><a name="[1468168]"></a>GpsSem</STRONG> (ARM, 84 bytes, Stack size 16 bytes, gpsevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpsSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpsevent.o(.constdata)
</UL>
<P><STRONG><a name="[1468120]"></a>GpsNoSem</STRONG> (ARM, 80 bytes, Stack size 16 bytes, gpsevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpsNoSem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpsevent.o(.constdata)
</UL>
<P><STRONG><a name="[14680d8]"></a>GpsErro</STRONG> (ARM, 16 bytes, Stack size 0 bytes, gpsevent.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gpsevent.o(.constdata)
</UL>
<P><STRONG><a name="[15079a8]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1507960]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1507918]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15077f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1504850]"></a>__ARM_exceptions_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504808]"></a>__Heap_DescSize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[15047c0]"></a>__alloca_initialize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504778]"></a>__cpp_initialize__aeabi_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504730]"></a>__cxa_finalize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[1506a28]"></a>__user_heap_extend</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1506b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[15046e8]"></a>_atexit_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504d60]"></a>_call_atexit_fns</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
</UL>

<P><STRONG><a name="[15046a0]"></a>_clock_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504658]"></a>_fp_trap_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504610]"></a>_get_lc_collate</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[15045c8]"></a>_get_lc_ctype</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504580]"></a>_get_lc_monetary</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504538]"></a>_get_lc_numeric</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[15044f0]"></a>_get_lc_time</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[15044a8]"></a>_getenv_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504460]"></a>_init_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504418]"></a>_init_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[15043d0]"></a>_initio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[1504340]"></a>_signal_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[15042f8]"></a>_terminate_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[15042b0]"></a>_terminateio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1504928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>
<HR></body></html>
